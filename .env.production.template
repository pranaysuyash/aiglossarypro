# =================================================================================
# AI/ML Glossary Pro - Production Environment Configuration
# =================================================================================
# Copy this file to .env.production and fill in your production values
# Run: npm run setup:production-check to validate configuration before deployment
# =================================================================================

# =================================================================================
# CRITICAL PRODUCTION CONFIGURATION
# =================================================================================

# Application Configuration (REQUIRED)
NODE_ENV=production
PORT=5000
HOST=0.0.0.0

# Database Configuration (REQUIRED)
# Use SSL-enabled connection string for production
DATABASE_URL=postgresql://username:password@host:port/database?sslmode=require

# Alternative PostgreSQL configuration (if not using DATABASE_URL)
# PGDATABASE=your_database_name
# PGHOST=your_host
# PGPORT=5432
# PGUSER=your_username
# PGPASSWORD=your_password

# Security Configuration (REQUIRED)
# Generate secure random strings (at least 32 characters)
SESSION_SECRET=your-super-secure-32-character-session-secret-here
JWT_SECRET=your-jwt-secret-key-here-also-32-characters-minimum
JWT_EXPIRES_IN=7d

# =================================================================================
# AUTHENTICATION & AUTHORIZATION
# =================================================================================

# OAuth Configuration (Optional - for social login)
# Google OAuth
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_REDIRECT_URI=https://yourdomain.com/auth/google/callback

# GitHub OAuth
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret
GITHUB_REDIRECT_URI=https://yourdomain.com/auth/github/callback

# Replit Authentication (if deploying to Replit)
# REPLIT_CLIENT_ID=your-replit-client-id
# REPLIT_CLIENT_SECRET=your-replit-client-secret
# REPLIT_DOMAINS=your-replit-domain.replit.dev
# REPL_ID=your-repl-id
# ISSUER_URL=https://replit.com/oidc

# Firebase Authentication (Optional - for Firebase auth integration)
# FIREBASE_PROJECT_ID=your-project-id
# FIREBASE_CLIENT_EMAIL=firebase-adminsdk-xxxxx@your-project-id.iam.gserviceaccount.com
# FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nYOUR_PRIVATE_KEY\n-----END PRIVATE KEY-----\n"

# =================================================================================
# NETWORK & SECURITY CONFIGURATION
# =================================================================================

# CORS Configuration (REQUIRED for web apps)
CORS_ORIGIN=https://yourdomain.com
CORS_CREDENTIALS=true

# Base URL for webhooks and redirects
BASE_URL=https://yourdomain.com

# SSL Configuration (if handling SSL directly)
# SSL_CERT_PATH=/path/to/ssl/certificate.crt
# SSL_KEY_PATH=/path/to/ssl/private.key

# Rate Limiting Configuration
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# File Upload Security
MAX_FILE_SIZE=52428800
UPLOAD_DIR=./uploads

# =================================================================================
# EXTERNAL SERVICES & APIS
# =================================================================================

# OpenAI API Configuration (Optional - for AI features)
# Required for AI-powered term suggestions and explanations
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_API_URL=https://api.openai.com/v1

# AWS S3 Configuration (Optional - for file storage)
# Required for file uploads and processing
AWS_ACCESS_KEY_ID=your-aws-access-key-id
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key
AWS_REGION=us-east-1
S3_BUCKET_NAME=your-s3-bucket-name

# Google Drive API (Optional - for Google Drive integration)
GOOGLE_DRIVE_API_KEY=your-google-drive-api-key

# =================================================================================
# MONETIZATION & PAYMENTS
# =================================================================================

# Gumroad Integration (Optional - for paid features)
# Required for processing payments and webhook verification
GUMROAD_WEBHOOK_SECRET=your-gumroad-webhook-secret-key

# =================================================================================
# GUEST ACCESS CONFIGURATION
# =================================================================================

# Guest Preview Limit (number of terms guests can preview without signing up)
GUEST_PREVIEW_LIMIT=50

# =================================================================================
# CACHING & PERFORMANCE
# =================================================================================

# Redis Configuration (Optional - for caching and job queues)
# Highly recommended for production performance
REDIS_URL=redis://username:password@host:port/database
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your-redis-password
REDIS_DB=0
REDIS_ENABLED=true

# Cache Configuration
CACHE_TTL=3600

# =================================================================================
# MONITORING & ANALYTICS
# =================================================================================

# Error Tracking - Sentry (Optional but recommended)
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# Analytics - PostHog (Optional)
POSTHOG_KEY=your-posthog-key
POSTHOG_HOST=https://app.posthog.com

# =================================================================================
# LOGGING & DEBUGGING
# =================================================================================

# Logging Configuration
LOG_LEVEL=warn
LOG_FILE=logs/production.log

# =================================================================================
# EMAIL CONFIGURATION (CRITICAL for production)
# =================================================================================

# Email Service Configuration (REQUIRED)
EMAIL_ENABLED=true
EMAIL_FROM=noreply@yourdomain.com
EMAIL_FROM_NAME="AI Glossary Pro"

# Option 1: Resend (RECOMMENDED - Modern, developer-friendly)
# Sign up at https://resend.com and get your API key
RESEND_API_KEY=re_your-resend-api-key-here

# Option 2: SMTP Fallback (if Resend not available)
# Configure if you prefer traditional SMTP or as backup
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# Legacy email configuration (keep for backward compatibility)
FROM_EMAIL=noreply@yourdomain.com

# =================================================================================
# VALIDATION & TESTING
# =================================================================================

# Run this command to validate your configuration:
# npm run setup:production-check

# =================================================================================
# DEPLOYMENT CHECKLIST
# =================================================================================

# Before deploying to production:
# 1. ✅ Fill in all REQUIRED environment variables above
# 2. ✅ Run production setup checker: npm run setup:production-check
# 3. ✅ Test database connection
# 4. ✅ Verify SSL certificates (if applicable)
# 5. ✅ Configure domain and DNS
# 6. ✅ Set up monitoring and logging
# 7. ✅ Test external API connections
# 8. ✅ Verify backup and recovery procedures
# 9. ✅ Performance test under load
# 10. ✅ Security scan and penetration test

# =================================================================================
# SECURITY NOTES
# =================================================================================

# 1. NEVER commit this file to version control
# 2. Use environment-specific databases (separate dev/staging/prod)
# 3. Rotate secrets regularly (every 90 days recommended)
# 4. Use SSL/TLS for all external connections
# 5. Enable database connection pooling and SSL
# 6. Use IAM roles instead of access keys when possible
# 7. Enable audit logging for all database operations
# 8. Implement proper backup and disaster recovery
# 9. Use secret management service (AWS Secrets Manager, etc.)
# 10. Enable monitoring and alerting for security events

# =================================================================================
# PERFORMANCE OPTIMIZATION
# =================================================================================

# 1. Enable Redis caching for optimal performance
# 2. Configure database connection pooling
# 3. Use CDN for static assets
# 4. Enable gzip compression
# 5. Implement proper database indexing
# 6. Monitor query performance and optimize slow queries
# 7. Use appropriate cache TTL values
# 8. Enable database read replicas for high traffic
# 9. Configure load balancing for horizontal scaling
# 10. Monitor and optimize memory usage