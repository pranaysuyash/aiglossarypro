import React from 'react';
import type { Meta, StoryObj } from '@storybook/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { AIContentFeedback } from './AIContentFeedback';
import { Toaster } from './ui/toaster';

// Mock function for actions
const fn = () => () => {};
const action = (_name: string) => fn;

// Create query client for stories
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: false,
      staleTime: 0,
    },
    mutations: {
      retry: false,
    },
  },
});

const meta: Meta<typeof AIContentFeedback> = {
  title: 'AI Components/AIContentFeedback',
  component: AIContentFeedback,
  decorators: [
    (Story) => (
      <QueryClientProvider client={queryClient}>
        <div className="max-w-4xl mx-auto p-6 bg-white min-h-[600px]">
          <div className="mb-6 p-4 bg-gray-50 rounded-lg">
            <h3 className="font-semibold text-lg mb-2">Sample AI-Generated Content</h3>
            <p className="text-gray-700 mb-4">
              Machine Learning is a subset of artificial intelligence that enables computer systems
              to automatically learn and improve from experience without being explicitly
              programmed. It focuses on developing algorithms that can analyze data, identify
              patterns, and make predictions or decisions with minimal human intervention.
            </p>
            <div className="text-sm text-gray-500">
              This content section helps visualize how the feedback component appears in context.
            </div>
          </div>
          <Story />
          <Toaster />
        </div>
      </QueryClientProvider>
    ),
  ],
  parameters: {
    layout: 'fullscreen',
    docs: {
      description: {
        component: `
**AIContentFeedback** is a comprehensive feedback system for AI-generated content that provides:

- **Content verification status tracking** with visual badges
- **User feedback collection** with categorized issue types  
- **Severity level selection** for reported problems
- **Contextual feedback** for specific content sections
- **Responsive design** that works across devices
- **Accessibility support** with proper ARIA labels
- **Real-time validation** and error handling

The component only shows for AI-generated content that hasn't been verified or expert-reviewed, ensuring users can report issues when content quality matters most.
        `,
      },
    },
    backgrounds: {
      default: 'light',
      values: [
        { name: 'light', value: '#ffffff' },
        { name: 'gray', value: '#f8f9fa' },
        { name: 'dark', value: '#1a1a1a' },
      ],
    },
  },
  argTypes: {
    termId: {
      control: 'text',
      description: 'Unique identifier for the term',
      table: { type: { summary: 'string' } },
    },
    termName: {
      control: 'text',
      description: 'Display name of the term',
      table: { type: { summary: 'string' } },
    },
    isAiGenerated: {
      control: 'boolean',
      description: 'Whether the content was generated by AI',
      table: { type: { summary: 'boolean' } },
    },
    verificationStatus: {
      control: { type: 'select' },
      options: ['unverified', 'verified', 'flagged', 'needs_review', 'expert_reviewed'],
      description: 'Current verification status of the content',
      table: {
        type: {
          summary: "'unverified' | 'verified' | 'flagged' | 'needs_review' | 'expert_reviewed'",
        },
        defaultValue: { summary: 'unverified' },
      },
    },
    section: {
      control: { type: 'select' },
      options: [
        undefined,
        'definition',
        'characteristics',
        'examples',
        'implementation',
        'theory',
        'applications',
      ],
      description: 'Specific section of content for contextual feedback',
      table: { type: { summary: 'string | undefined' } },
    },
    onFeedbackSubmitted: {
      action: 'feedbackSubmitted',
      description: 'Callback fired when feedback is successfully submitted',
      table: { type: { summary: '() => void' } },
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes',
      table: { type: { summary: 'string' } },
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

// Basic States
export const Default: Story = {
  args: {
    termId: 'ml-001',
    termName: 'Machine Learning',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
};

export const WithSection: Story = {
  args: {
    termId: 'nn-002',
    termName: 'Neural Networks',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'definition',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
};

// Verification Status Variants
export const UnverifiedContent: Story = {
  args: {
    termId: 'unverified-001',
    termName: 'Deep Learning Fundamentals',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'theory',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story: 'Unverified AI content shows warning and allows feedback reporting.',
      },
    },
  },
};

export const NeedsReviewContent: Story = {
  args: {
    termId: 'needs-review-001',
    termName: 'Transformer Architecture',
    isAiGenerated: true,
    verificationStatus: 'needs_review',
    section: 'implementation',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story: 'Content marked as needing review displays orange badge and allows feedback.',
      },
    },
  },
};

export const FlaggedContent: Story = {
  args: {
    termId: 'flagged-001',
    termName: 'Problematic Algorithm',
    isAiGenerated: true,
    verificationStatus: 'flagged',
    section: 'examples',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story: 'Flagged content shows red badge indicating previously reported issues.',
      },
    },
  },
};

export const VerifiedContent: Story = {
  args: {
    termId: 'verified-001',
    termName: 'Convolutional Neural Networks',
    isAiGenerated: true,
    verificationStatus: 'verified',
    section: 'definition',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story: 'Verified content does not show feedback component as it has been validated.',
      },
    },
  },
};

export const ExpertReviewedContent: Story = {
  args: {
    termId: 'expert-001',
    termName: 'Gradient Descent Optimization',
    isAiGenerated: true,
    verificationStatus: 'expert_reviewed',
    section: 'theory',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story:
          'Expert-reviewed content does not show feedback component as it has been validated by experts.',
      },
    },
  },
};

// Content Type Variants
export const HumanGeneratedContent: Story = {
  args: {
    termId: 'human-001',
    termName: 'Manual Entry Example',
    isAiGenerated: false,
    verificationStatus: 'unverified',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story: 'Human-generated content does not show the feedback component.',
      },
    },
  },
};

// Section-Specific Feedback
export const DefinitionSectionFeedback: Story = {
  args: {
    termId: 'def-001',
    termName: 'Support Vector Machine',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'definition',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story: 'Feedback for definition section includes contextual information.',
      },
    },
  },
};

export const CharacteristicsSectionFeedback: Story = {
  args: {
    termId: 'char-001',
    termName: 'Random Forest Algorithm',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'characteristics',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
};

export const ExamplesSectionFeedback: Story = {
  args: {
    termId: 'ex-001',
    termName: 'K-Means Clustering',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'examples',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
};

export const ImplementationSectionFeedback: Story = {
  args: {
    termId: 'impl-001',
    termName: 'LSTM Implementation',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'implementation',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
};

export const ApplicationsSectionFeedback: Story = {
  args: {
    termId: 'app-001',
    termName: 'Computer Vision Applications',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'applications',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
};

// Interactive Stories with Form States
export const FeedbackFormOpened: Story = {
  args: {
    termId: 'form-001',
    termName: 'Artificial Neural Network',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'theory',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story:
          'Shows the feedback form - click "Report Issue" to see the form with all fields visible.',
      },
    },
  },
};

export const IncorrectFeedbackExample: Story = {
  args: {
    termId: 'incorrect-001',
    termName: 'Backpropagation Algorithm',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'theory',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story:
          'Example of reporting factually incorrect content - demonstrates how users would report incorrect mathematical formulas or algorithmic explanations.',
      },
    },
  },
};

export const IncompleteFeedbackExample: Story = {
  args: {
    termId: 'incomplete-001',
    termName: 'Reinforcement Learning',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'examples',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story:
          'Example of reporting incomplete content - shows how users would report missing examples, practical applications, or code samples.',
      },
    },
  },
};

export const MisleadingFeedbackExample: Story = {
  args: {
    termId: 'misleading-001',
    termName: 'Overfitting in Machine Learning',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'definition',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story:
          'Example of reporting misleading content - demonstrates how users would report definitions or explanations that could cause misunderstanding.',
      },
    },
  },
};

export const OutdatedFeedbackExample: Story = {
  args: {
    termId: 'outdated-001',
    termName: 'State-of-the-art NLP Models',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'examples',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story:
          'Example of reporting outdated information - shows how users would report content referencing older models or deprecated techniques.',
      },
    },
  },
};

// Success and Error States
export const SuccessfulSubmission: Story = {
  args: {
    termId: 'success-001',
    termName: 'Gradient Boosting',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'implementation',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story:
          'Demonstrates the feedback form for implementation content - fill out the form to simulate successful submission.',
      },
    },
  },
};

export const SubmissionError: Story = {
  args: {
    termId: 'error-001',
    termName: 'Decision Trees',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'examples',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story:
          'Demonstrates the feedback form for examples content - includes proper error handling if submission fails.',
      },
    },
  },
};

// Form Validation
export const ValidationErrors: Story = {
  args: {
    termId: 'validation-001',
    termName: 'Cross Validation',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story:
          'Shows form validation - submit button is disabled when required fields (type and description) are missing.',
      },
    },
  },
};

// Layout and Responsive Design
export const MobileView: Story = {
  args: {
    termId: 'mobile-001',
    termName: 'Ensemble Methods',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'examples',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  decorators: [
    (Story) => (
      <QueryClientProvider client={queryClient}>
        <div className="max-w-sm mx-auto p-4 bg-white min-h-[600px]">
          <div className="mb-4 p-3 bg-gray-50 rounded-lg">
            <h3 className="font-semibold text-base mb-2">Mobile Content View</h3>
            <p className="text-sm text-gray-700">
              Ensemble methods combine multiple learning algorithms to improve predictive
              performance.
            </p>
          </div>
          <Story />
          <Toaster />
        </div>
      </QueryClientProvider>
    ),
  ],
  parameters: {
    viewport: {
      defaultViewport: 'mobile1',
    },
    docs: {
      description: {
        story: 'Demonstrates responsive design on mobile devices.',
      },
    },
  },
};

export const TabletView: Story = {
  args: {
    termId: 'tablet-001',
    termName: 'Feature Engineering',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'theory',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  decorators: [
    (Story) => (
      <QueryClientProvider client={queryClient}>
        <div className="max-w-2xl mx-auto p-4 bg-white min-h-[600px]">
          <div className="mb-4 p-4 bg-gray-50 rounded-lg">
            <h3 className="font-semibold text-lg mb-2">Tablet Content View</h3>
            <p className="text-gray-700">
              Feature engineering is the process of selecting, modifying, or creating new features
              from raw data to improve machine learning model performance.
            </p>
          </div>
          <Story />
          <Toaster />
        </div>
      </QueryClientProvider>
    ),
  ],
  parameters: {
    viewport: {
      defaultViewport: 'tablet',
    },
    docs: {
      description: {
        story: 'Demonstrates layout on tablet-sized screens.',
      },
    },
  },
};

// Dark Mode
export const DarkMode: Story = {
  args: {
    termId: 'dark-001',
    termName: 'Attention Mechanisms',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'theory',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  decorators: [
    (Story) => (
      <QueryClientProvider client={queryClient}>
        <div className="dark bg-gray-900 text-white min-h-[600px] p-6">
          <div className="max-w-4xl mx-auto">
            <div className="mb-6 p-4 bg-gray-800 rounded-lg border border-gray-700">
              <h3 className="font-semibold text-lg mb-2 text-white">Dark Mode Content</h3>
              <p className="text-gray-300 mb-4">
                Attention mechanisms allow neural networks to focus on different parts of the input
                sequence when producing each part of the output sequence, improving performance on
                sequence-to-sequence tasks.
              </p>
              <div className="text-sm text-gray-400">Content shown in dark mode theme.</div>
            </div>
            <Story />
            <Toaster />
          </div>
        </div>
      </QueryClientProvider>
    ),
  ],
  parameters: {
    backgrounds: {
      default: 'dark',
    },
    docs: {
      description: {
        story: 'Shows the component in dark mode with appropriate styling.',
      },
    },
  },
};

// Accessibility
export const AccessibilityFeatures: Story = {
  args: {
    termId: 'a11y-001',
    termName: 'Accessibility Example',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'definition',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story: `
**Accessibility Features:**
- Proper ARIA labels and roles
- Keyboard navigation support  
- Screen reader friendly text
- High contrast color scheme
- Focus management
- Semantic HTML structure
        `,
      },
    },
    a11y: {
      config: {
        rules: [
          {
            id: 'color-contrast',
            enabled: true,
          },
        ],
      },
    },
  },
};

// Custom Styling
export const CustomStyling: Story = {
  args: {
    termId: 'custom-001',
    termName: 'Custom Styled Example',
    isAiGenerated: true,
    verificationStatus: 'unverified',
    section: 'examples',
    className: 'border-2 border-purple-300 rounded-xl p-4 bg-purple-50',
    onFeedbackSubmitted: action('feedback-submitted'),
  },
  parameters: {
    docs: {
      description: {
        story: 'Demonstrates custom styling with additional CSS classes.',
      },
    },
  },
};
