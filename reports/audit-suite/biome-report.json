{"summary":{"changed":0,"unchanged":804,"matches":0,"duration":{"secs":0,"nanos":460049750},"scannerDuration":{"secs":0,"nanos":25787833},"errors":534,"warnings":2206,"skipped":0,"suggestedFixesSkipped":0,"diagnosticsNotPrinted":0},"diagnostics":[{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env node\n\n/** */\n\nconst http = require('httpnode:http);\nconst https = require('https');\n\nmain().catch(console.error);\n","ops":[{"diffOp":{"equal":{"range":[0,24]}}},{"equalLines":{"line_count":1}},{"diffOp":{"equal":{"range":[24,50]}}},{"diffOp":{"equal":{"range":[50,51]}}},{"diffOp":{"delete":{"range":[51,55]}}},{"diffOp":{"insert":{"range":[55,64]}}},{"diffOp":{"equal":{"range":[50,51]}}},{"diffOp":{"equal":{"range":[64,99]}}},{"equalLines":{"line_count":64}},{"diffOp":{"equal":{"range":[99,129]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"debug-auth-routes.js"},"span":[97,103],"sourceCode":"#!/usr/bin/env node\n\n/**\n * Debug script to test authentication routes\n */\n\nconst http = require('http');\nconst https = require('https');\n\nconst SERVER_URL = 'http://localhost:3001';\n\n// Test different authentication routes\nconst routes = [\n  '/api/auth/providers',\n  '/api/auth/check',\n  '/api/auth/me',\n  '/api/auth/firebase/login',\n  '/api/auth/firebase/register',\n  '/api/auth/login',\n  '/api/auth/register',\n  '/api/auth/user',\n  '/api/health'\n];\n\nasync function testRoute(route) {\n  return new Promise((resolve) => {\n    const url = `${SERVER_URL}${route}`;\n    const client = url.startsWith('https') ? https : http;\n    \n    console.log(`Testing: ${route}`);\n    \n    const req = client.request(url, { method: 'GET' }, (res) => {\n      let data = '';\n      res.on('data', (chunk) => data += chunk);\n      res.on('end', () => {\n        console.log(`  Status: ${res.statusCode}`);\n        console.log(`  Headers: ${JSON.stringify(res.headers, null, 2)}`);\n        \n        if (res.statusCode === 200) {\n          try {\n            const parsed = JSON.parse(data);\n            console.log(`  Response: ${JSON.stringify(parsed, null, 2)}`);\n          } catch (e) {\n            console.log(`  Response: ${data.substring(0, 200)}...`);\n          }\n        } else {\n          console.log(`  Error Response: ${data}`);\n        }\n        console.log('---');\n        resolve({ route, status: res.statusCode, response: data });\n      });\n    });\n    \n    req.on('error', (err) => {\n      console.log(`  Error: ${err.message}`);\n      console.log('---');\n      resolve({ route, error: err.message });\n    });\n    \n    req.end();\n  });\n}\n\nasync function main() {\n  console.log('🔍 Testing authentication routes...\\n');\n  \n  for (const route of routes) {\n    await testRoute(route);\n    await new Promise(resolve => setTimeout(resolve, 500)); // Small delay\n  }\n  \n  console.log('\\n✅ Route testing complete');\n}\n\nmain().catch(console.error);\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env node\n\n/**\nconst http = require('http');\nconst https = require('httpsnode:https);\n\nconst SERVER_URL = 'http://localhost:3001';\nmain().catch(console.error);\n","ops":[{"diffOp":{"equal":{"range":[0,24]}}},{"equalLines":{"line_count":2}},{"diffOp":{"equal":{"range":[24,77]}}},{"diffOp":{"equal":{"range":[77,78]}}},{"diffOp":{"delete":{"range":[78,83]}}},{"diffOp":{"insert":{"range":[83,93]}}},{"diffOp":{"equal":{"range":[77,78]}}},{"diffOp":{"equal":{"range":[93,140]}}},{"equalLines":{"line_count":63}},{"diffOp":{"equal":{"range":[140,170]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"debug-auth-routes.js"},"span":[128,135],"sourceCode":"#!/usr/bin/env node\n\n/**\n * Debug script to test authentication routes\n */\n\nconst http = require('http');\nconst https = require('https');\n\nconst SERVER_URL = 'http://localhost:3001';\n\n// Test different authentication routes\nconst routes = [\n  '/api/auth/providers',\n  '/api/auth/check',\n  '/api/auth/me',\n  '/api/auth/firebase/login',\n  '/api/auth/firebase/register',\n  '/api/auth/login',\n  '/api/auth/register',\n  '/api/auth/user',\n  '/api/health'\n];\n\nasync function testRoute(route) {\n  return new Promise((resolve) => {\n    const url = `${SERVER_URL}${route}`;\n    const client = url.startsWith('https') ? https : http;\n    \n    console.log(`Testing: ${route}`);\n    \n    const req = client.request(url, { method: 'GET' }, (res) => {\n      let data = '';\n      res.on('data', (chunk) => data += chunk);\n      res.on('end', () => {\n        console.log(`  Status: ${res.statusCode}`);\n        console.log(`  Headers: ${JSON.stringify(res.headers, null, 2)}`);\n        \n        if (res.statusCode === 200) {\n          try {\n            const parsed = JSON.parse(data);\n            console.log(`  Response: ${JSON.stringify(parsed, null, 2)}`);\n          } catch (e) {\n            console.log(`  Response: ${data.substring(0, 200)}...`);\n          }\n        } else {\n          console.log(`  Error Response: ${data}`);\n        }\n        console.log('---');\n        resolve({ route, status: res.statusCode, response: data });\n      });\n    });\n    \n    req.on('error', (err) => {\n      console.log(`  Error: ${err.message}`);\n      console.log('---');\n      resolve({ route, error: err.message });\n    });\n    \n    req.end();\n  });\n}\n\nasync function main() {\n  console.log('🔍 Testing authentication routes...\\n');\n  \n  for (const route of routes) {\n    await testRoute(route);\n    await new Promise(resolve => setTimeout(resolve, 500)); // Small delay\n  }\n  \n  console.log('\\n✅ Route testing complete');\n}\n\nmain().catch(console.error);\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env node\n\n/** */\n\nconst fs = require('fsnode:fs);\nconst path = require('path');\nconsole.log('✅ Fixed user authentication references');\nconsole.log('📝 Updated middleware calls and user ID access patterns');\n","ops":[{"diffOp":{"equal":{"range":[0,24]}}},{"equalLines":{"line_count":1}},{"diffOp":{"equal":{"range":[24,48]}}},{"diffOp":{"equal":{"range":[48,49]}}},{"diffOp":{"delete":{"range":[49,51]}}},{"diffOp":{"insert":{"range":[51,58]}}},{"diffOp":{"equal":{"range":[48,49]}}},{"diffOp":{"equal":{"range":[58,91]}}},{"equalLines":{"line_count":56}},{"diffOp":{"equal":{"range":[91,222]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"fix-user-auth.js"},"span":[112,116],"sourceCode":"#!/usr/bin/env node\n\n/**\n * Script to fix all user authentication references in user.ts\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst filePath = '/Users/pranay/Projects/AIMLGlossary/AIGlossaryPro/server/routes/user.ts';\n\nconsole.log('🔧 Fixing user authentication references...');\n\n// Read the file\nlet content = fs.readFileSync(filePath, 'utf8');\n\n// Replace all instances where we need to add tokenMiddleware and fix user ID access\nconst middlewareReplacements = [\n  // Add tokenMiddleware to routes that don't have it\n  {\n    search: /authMiddleware as any,\\s*parseId\\(\\) as any,/g,\n    replace: 'authMiddleware as any,\\n    tokenMiddleware,\\n    parseId() as any,'\n  },\n  {\n    search: /authMiddleware as any,\\s*parsePagination/g,\n    replace: 'authMiddleware as any,\\n    tokenMiddleware,\\n    parsePagination'\n  },\n  {\n    search: /authMiddleware as any,\\s*parseNumericQuery/g,\n    replace: 'authMiddleware as any,\\n    tokenMiddleware,\\n    parseNumericQuery'\n  },\n  {\n    search: /authMiddleware as any,\\s*async \\(req: AuthenticatedRequest/g,\n    replace: 'authMiddleware as any,\\n    tokenMiddleware,\\n    async (req: AuthenticatedRequest'\n  }\n];\n\n// Apply middleware replacements\nmiddlewareReplacements.forEach(replacement => {\n  content = content.replace(replacement.search, replacement.replace);\n});\n\n// Replace user ID access patterns\nconst userIdReplacements = [\n  {\n    search: /const userId = req\\.user\\.claims\\.sub;/g,\n    replace: `const userInfo = getUserInfo(req);\n        if (!userInfo) {\n          return res.status(401).json({\n            success: false,\n            message: 'Authentication required',\n          });\n        }\n        const userId = userInfo.id;`\n  }\n];\n\n// Apply user ID replacements\nuserIdReplacements.forEach(replacement => {\n  content = content.replace(replacement.search, replacement.replace);\n});\n\n// Write the file back\nfs.writeFileSync(filePath, content);\n\nconsole.log('✅ Fixed user authentication references');\nconsole.log('📝 Updated middleware calls and user ID access patterns');\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env node\n\n/**\nconst fs = require('fs');\nconst path = require('pathnode:path);\n\nconst filePath = '/Users/pranay/Projects/AIMLGlossary/AIGlossaryPro/server/routes/user.ts';console.log('✅ Fixed user authentication references');\nconsole.log('📝 Updated middleware calls and user ID access patterns');\n","ops":[{"diffOp":{"equal":{"range":[0,24]}}},{"equalLines":{"line_count":2}},{"diffOp":{"equal":{"range":[24,72]}}},{"diffOp":{"equal":{"range":[72,73]}}},{"diffOp":{"delete":{"range":[73,77]}}},{"diffOp":{"insert":{"range":[77,86]}}},{"diffOp":{"equal":{"range":[72,73]}}},{"diffOp":{"equal":{"range":[86,181]}}},{"equalLines":{"line_count":55}},{"diffOp":{"equal":{"range":[181,312]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"fix-user-auth.js"},"span":[140,146],"sourceCode":"#!/usr/bin/env node\n\n/**\n * Script to fix all user authentication references in user.ts\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst filePath = '/Users/pranay/Projects/AIMLGlossary/AIGlossaryPro/server/routes/user.ts';\n\nconsole.log('🔧 Fixing user authentication references...');\n\n// Read the file\nlet content = fs.readFileSync(filePath, 'utf8');\n\n// Replace all instances where we need to add tokenMiddleware and fix user ID access\nconst middlewareReplacements = [\n  // Add tokenMiddleware to routes that don't have it\n  {\n    search: /authMiddleware as any,\\s*parseId\\(\\) as any,/g,\n    replace: 'authMiddleware as any,\\n    tokenMiddleware,\\n    parseId() as any,'\n  },\n  {\n    search: /authMiddleware as any,\\s*parsePagination/g,\n    replace: 'authMiddleware as any,\\n    tokenMiddleware,\\n    parsePagination'\n  },\n  {\n    search: /authMiddleware as any,\\s*parseNumericQuery/g,\n    replace: 'authMiddleware as any,\\n    tokenMiddleware,\\n    parseNumericQuery'\n  },\n  {\n    search: /authMiddleware as any,\\s*async \\(req: AuthenticatedRequest/g,\n    replace: 'authMiddleware as any,\\n    tokenMiddleware,\\n    async (req: AuthenticatedRequest'\n  }\n];\n\n// Apply middleware replacements\nmiddlewareReplacements.forEach(replacement => {\n  content = content.replace(replacement.search, replacement.replace);\n});\n\n// Replace user ID access patterns\nconst userIdReplacements = [\n  {\n    search: /const userId = req\\.user\\.claims\\.sub;/g,\n    replace: `const userInfo = getUserInfo(req);\n        if (!userInfo) {\n          return res.status(401).json({\n            success: false,\n            message: 'Authentication required',\n          });\n        }\n        const userId = userInfo.id;`\n  }\n];\n\n// Apply user ID replacements\nuserIdReplacements.forEach(replacement => {\n  content = content.replace(replacement.search, replacement.replace);\n});\n\n// Write the file back\nfs.writeFileSync(filePath, content);\n\nconsole.log('✅ Fixed user authentication references');\nconsole.log('📝 Updated middleware calls and user ID access patterns');\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';\nimport fs from 'fsnode:fs;\nimport { db } from '../server/db.js';\n\nbackupDatabase().catch(console.error);\n","ops":[{"diffOp":{"equal":{"range":[0,70]}}},{"diffOp":{"equal":{"range":[70,71]}}},{"diffOp":{"delete":{"range":[71,73]}}},{"diffOp":{"insert":{"range":[73,80]}}},{"diffOp":{"equal":{"range":[70,71]}}},{"diffOp":{"equal":{"range":[80,120]}}},{"equalLines":{"line_count":45}},{"diffOp":{"equal":{"range":[120,160]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/backup-before-clear.ts"},"span":[70,74],"sourceCode":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';\nimport fs from 'fs';\nimport { db } from '../server/db.js';\n\nasync function backupDatabase() {\n  console.log('🔄 Creating database backup...');\n\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n  const backupDir = `backups/pre-fresh-start-${timestamp}`;\n\n  // Ensure backup directory exists\n  fs.mkdirSync(backupDir, { recursive: true });\n\n  const tables = ['terms', 'enhanced_terms', 'categories', 'term_sections', 'users', 'term_views'];\n  const backup: any = {};\n\n  for (const table of tables) {\n    try {\n      const result = await db.execute(sql.raw(`SELECT * FROM ${table}`));\n      backup[table] = {\n        count: result.rows.length,\n        data: result.rows,\n      };\n      console.log(`✅ Backed up ${table}: ${result.rows.length} records`);\n    } catch (error: any) {\n      console.log(`! Error backing up ${table}:`, error.message);\n      backup[table] = { count: 0, data: [], error: error.message };\n    }\n  }\n\n  const backupFile = `${backupDir}/database_backup.json`;\n  fs.writeFileSync(backupFile, JSON.stringify(backup, null, 2));\n  console.log(`💾 Backup saved to: ${backupFile}`);\n\n  // Create summary\n  const summary = {\n    timestamp: new Date().toISOString(),\n    tables: Object.keys(backup).map((table) => ({\n      name: table,\n      records: backup[table].count,\n      hasError: Boolean(backup[table].error),\n    })),\n    totalRecords: Object.values(backup).reduce((sum: number, table: any) => sum + table.count, 0),\n  };\n\n  fs.writeFileSync(`${backupDir}/backup_summary.json`, JSON.stringify(summary, null, 2));\n  console.log(`📋 Summary: ${summary.totalRecords} total records backed up`);\n  console.log(`📁 Backup location: ${backupDir}`);\n}\n\nbackupDatabase().catch(console.error);\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useTemplate","severity":"information","description":"Template literals are preferred over string concatenation.","message":[{"elements":["Emphasis"],"content":"Template"},{"elements":[],"content":" literals are preferred over "},{"elements":["Emphasis"],"content":"string concatenation."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Unsafe fix: Use a "},{"elements":["Emphasis"],"content":"template literal"},{"elements":[],"content":"."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';async function clearAllData() {\n  console.log('🗑 CLEARING ALL DATABASE DATA FOR FRESH START');\n  console.log('`=' + ${'='.repeat(50)}`);\n\n  try {\nclearAllData().catch(console.error);\n","ops":[{"diffOp":{"equal":{"range":[0,54]}}},{"equalLines":{"line_count":2}},{"diffOp":{"equal":{"range":[54,169]}}},{"diffOp":{"delete":{"range":[169,170]}}},{"diffOp":{"insert":{"range":[170,171]}}},{"diffOp":{"equal":{"range":[171,172]}}},{"diffOp":{"delete":{"range":[172,176]}}},{"diffOp":{"insert":{"range":[176,178]}}},{"diffOp":{"equal":{"range":[178,192]}}},{"diffOp":{"insert":{"range":[192,194]}}},{"diffOp":{"equal":{"range":[194,205]}}},{"equalLines":{"line_count":76}},{"diffOp":{"equal":{"range":[205,243]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/clear-all-data.ts"},"span":[209,229],"sourceCode":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';\nimport { db } from '../server/db.js';\n\nasync function clearAllData() {\n  console.log('🗑 CLEARING ALL DATABASE DATA FOR FRESH START');\n  console.log('=' + '='.repeat(50));\n\n  try {\n    // Clear data in dependency order (child tables first)\n    const clearOrder = [\n      'term_views',\n      'term_sections',\n      'user_progress',\n      'favorites',\n      'term_subcategories',\n      'enhanced_terms',\n      'terms',\n      'subcategories',\n      'categories',\n      'user_settings',\n      // Keep users table for authentication\n    ];\n\n    console.log('\\n🔄 Clearing tables in dependency order...\\n');\n\n    for (const tableName of clearOrder) {\n      try {\n        // Get count before clearing\n        const countResult = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM ${tableName}`));\n        const beforeCount = (countResult.rows[0] as any).count;\n\n        // Clear the table\n        await db.execute(sql.raw(`DELETE FROM ${tableName}`));\n\n        // Verify cleared\n        const afterResult = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM ${tableName}`));\n        const afterCount = (afterResult.rows[0] as any).count;\n\n        console.log(`✅ ${tableName}: ${beforeCount} → ${afterCount} records`);\n      } catch (error: any) {\n        console.log(`! ${tableName}: ${error.message}`);\n      }\n    }\n\n    // Reset sequences/auto-increment if needed\n    console.log('\\n🔄 Resetting sequences...');\n\n    const sequenceResets = [\n      'ALTER SEQUENCE IF EXISTS categories_id_seq RESTART WITH 1',\n      'ALTER SEQUENCE IF EXISTS subcategories_id_seq RESTART WITH 1',\n    ];\n\n    for (const resetSql of sequenceResets) {\n      try {\n        await db.execute(sql.raw(resetSql));\n        console.log(`✅ Reset sequence: ${resetSql.split(' ')[4]}`);\n      } catch (error: any) {\n        console.log(`! Sequence reset: ${error.message}`);\n      }\n    }\n\n    // Verify final state\n    console.log('\\n📊 FINAL DATABASE STATE:');\n    console.log('-'.repeat(40));\n\n    for (const tableName of ['terms', 'enhanced_terms', 'categories', 'term_sections', 'users']) {\n      try {\n        const result = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM ${tableName}`));\n        const count = (result.rows[0] as any).count;\n        const status =\n          count === 0 ? '✅ EMPTY' : tableName === 'users' ? '👥 PRESERVED' : '! NOT EMPTY';\n        console.log(`${tableName}: ${count} records ${status}`);\n      } catch (error: any) {\n        console.log(`${tableName}: ERROR - ${error.message}`);\n      }\n    }\n\n    console.log('\\n🎯 DATABASE CLEARING COMPLETE');\n    console.log('✅ Ready for 295-column hierarchical structure');\n    console.log('📁 Backup preserved at: backups/pre-fresh-start-*');\n  } catch (error) {\n    console.error('❌ Error clearing database:', error);\n  }\n}\n\nclearAllData().catch(console.error);\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**import chalk from 'chalk';\nimport { chromium } from 'playwright';\nimport { exec } from 'child_processnode:child_process;\nimport { promisify } from 'util';\nimport fs from 'fs';\nconst tester = new CompleteFeatureTester();\ntester.run().catch(console.error);","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":15}},{"diffOp":{"equal":{"range":[23,110]}}},{"diffOp":{"equal":{"range":[110,111]}}},{"diffOp":{"delete":{"range":[111,124]}}},{"diffOp":{"insert":{"range":[124,142]}}},{"diffOp":{"equal":{"range":[110,111]}}},{"diffOp":{"equal":{"range":[142,198]}}},{"equalLines":{"line_count":654}},{"diffOp":{"equal":{"range":[198,277]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/complete-feature-test.ts"},"span":[526,541],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * COMPLETE FEATURE TEST\n * \n * This script tests all major features of the application:\n * 1. Cookie consent functionality\n * 2. Authentication flows (including OAuth vs regular sign-up)\n * 3. Admin functionality\n * 4. Free user limitations \n * 5. Premium user 42-section components\n * 6. Gamification features\n * 7. Search functionality\n * 8. Responsive design\n * 9. API endpoints\n * 10. Backend integration\n */\n\nimport chalk from 'chalk';\nimport { chromium } from 'playwright';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs';\nimport path from 'path';\n\nconst execAsync = promisify(exec);\n\ninterface TestResult {\n  category: string;\n  testName: string;\n  userType: string;\n  status: 'PASS' | 'FAIL' | 'WARNING';\n  message: string;\n  screenshot?: string;\n  details?: any;\n}\n\nclass CompleteFeatureTester {\n  private browser: any;\n  private results: TestResult[] = [];\n  private screenshotDir: string;\n  private baseUrl = 'http://localhost:5173';\n  private apiUrl = 'http://localhost:3001';\n\n  constructor() {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    this.screenshotDir = path.join(process.cwd(), 'complete-feature-test', timestamp);\n    fs.mkdirSync(this.screenshotDir, { recursive: true });\n  }\n\n  async init() {\n    this.browser = await chromium.launch({\n      headless: false,\n      slowMo: 500,\n    });\n    console.log(chalk.blue('🚀 Starting Complete Feature Test...'));\n  }\n\n  async takeScreenshot(page: any, name: string, userType: string = 'guest'): Promise<string> {\n    const filename = `${userType}-${name}-${Date.now()}.png`;\n    const filepath = path.join(this.screenshotDir, filename);\n    await page.screenshot({ path: filepath, fullPage: true });\n    return filename;\n  }\n\n  addResult(result: TestResult) {\n    this.results.push(result);\n    const color = result.status === 'PASS' ? 'green' : result.status === 'FAIL' ? 'red' : 'yellow';\n    console.log(chalk[color](`${result.status}: [${result.category}] ${result.testName} (${result.userType}) - ${result.message}`));\n  }\n\n  async dismissCookieBanner(page: any) {\n    try {\n      // Check if cookie banner is visible and dismiss it\n      const cookieBanner = await page.locator('[data-testid=\"cookie-banner\"], .cookie-banner, [role=\"dialog\"]:has-text(\"cookie\")').first();\n      if (await cookieBanner.isVisible()) {\n        const acceptButton = await page.locator('button:has-text(\"Accept\"), button:has-text(\"Accept All\"), button:has-text(\"OK\")').first();\n        if (await acceptButton.isVisible()) {\n          await acceptButton.click();\n          await page.waitForTimeout(1000);\n        }\n      }\n    } catch (error) {\n      // Cookie banner might not be present, continue\n    }\n  }\n\n  // ========== BACKEND API TESTS ==========\n  async testBackendAPIs() {\n    console.log(chalk.blue('\\\\n🔌 Testing Backend APIs...'));\n    \n    const endpoints = [\n      { path: '/api/health', name: 'Health Check' },\n      { path: '/api/categories', name: 'Categories' },\n      { path: '/api/terms', name: 'Terms' },\n      { path: '/api/search/suggestions', name: 'Search Suggestions' },\n      { path: '/api/enhanced/terms', name: 'Enhanced Terms' },\n      { path: '/api/auth/check', name: 'Auth Check' },\n    ];\n\n    for (const endpoint of endpoints) {\n      try {\n        const { stdout, stderr } = await execAsync(`curl -s -w \"%{http_code}\" -o /dev/null ${this.apiUrl}${endpoint.path}`);\n        const statusCode = stdout.trim();\n        \n        this.addResult({\n          category: 'Backend API',\n          testName: endpoint.name,\n          userType: 'system',\n          status: statusCode.startsWith('2') ? 'PASS' : statusCode.startsWith('4') ? 'WARNING' : 'FAIL',\n          message: `HTTP ${statusCode}`,\n          details: { endpoint: endpoint.path, statusCode }\n        });\n        \n      } catch (error) {\n        this.addResult({\n          category: 'Backend API',\n          testName: endpoint.name,\n          userType: 'system',\n          status: 'FAIL',\n          message: `Connection failed: ${error}`,\n          details: { endpoint: endpoint.path, error }\n        });\n      }\n    }\n  }\n\n  // ========== COOKIE CONSENT TESTS ==========\n  async testCookieConsent() {\n    console.log(chalk.blue('\\\\n🍪 Testing Cookie Consent...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(this.baseUrl);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'homepage-initial');\n      \n      // Check for cookie consent implementation\n      const cookieElements = await page.locator('[class*=\"cookie\"], [data-testid*=\"cookie\"], [aria-label*=\"cookie\"]').count();\n      const posthogScript = await page.locator('script[src*=\"posthog\"]').count();\n      const gaScript = await page.locator('script[src*=\"google\"], script[src*=\"analytics\"]').count();\n      \n      this.addResult({\n        category: 'Cookie Consent',\n        testName: 'Cookie Implementation',\n        userType: 'guest',\n        status: (cookieElements > 0 || posthogScript > 0 || gaScript > 0) ? 'PASS' : 'WARNING',\n        message: `Cookie elements: ${cookieElements}, Analytics scripts: ${posthogScript + gaScript}`,\n        screenshot,\n        details: { cookieElements, posthogScript, gaScript }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Cookie Consent',\n        testName: 'Cookie Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== AUTHENTICATION TESTS ==========\n  async testAuthentication() {\n    console.log(chalk.blue('\\\\n🔐 Testing Authentication Systems...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/login`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      // Dismiss cookie banner if present\n      await this.dismissCookieBanner(page);\n      \n      const screenshot = await this.takeScreenshot(page, 'login-page');\n      \n      // Test OAuth vs Regular Sign-up\n      const googleButton = await page.locator('text=\"Continue with Google\"').isVisible();\n      const githubButton = await page.locator('text=\"Continue with GitHub\"').isVisible();\n      const emailSignUp = await page.locator('[role=\"tab\"]:has-text(\"Sign Up\")').isVisible();\n      const emailSignIn = await page.locator('[role=\"tab\"]:has-text(\"Sign In\")').isVisible();\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'OAuth vs Regular Sign-up',\n        userType: 'guest',\n        status: (googleButton && githubButton && emailSignUp) ? 'PASS' : 'WARNING',\n        message: `OAuth: Google ${googleButton ? '✓' : '✗'}, GitHub ${githubButton ? '✓' : '✗'}, Email Sign-up: ${emailSignUp ? '✓' : '✗'}`,\n        screenshot,\n        details: { googleButton, githubButton, emailSignUp, emailSignIn }\n      });\n\n      // Test Development Test Users\n      const testUsersTab = await page.locator('[role=\"tab\"]:has-text(\"Test Users\")').isVisible();\n      \n      if (testUsersTab) {\n        await page.click('[role=\"tab\"]:has-text(\"Test Users\")');\n        await page.waitForTimeout(2000);\n        \n        const testUsersScreenshot = await this.takeScreenshot(page, 'test-users-tab');\n        \n        const useAccountButtons = await page.locator('button:has-text(\"Use This Account\")').count();\n        const userTypes = await page.locator('text=\"Regular User\", text=\"Premium User\", text=\"Admin User\"').count();\n        \n        this.addResult({\n          category: 'Authentication',\n          testName: 'Test Users Feature',\n          userType: 'development',\n          status: (useAccountButtons >= 3 && userTypes >= 3) ? 'PASS' : 'WARNING',\n          message: `Found ${useAccountButtons} test accounts, ${userTypes} user types`,\n          screenshot: testUsersScreenshot,\n          details: { useAccountButtons, userTypes }\n        });\n\n        // Test actual login flow (dismiss cookie banner first)\n        await this.dismissCookieBanner(page);\n        await this.testLoginFlow(page);\n      }\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Authentication',\n        testName: 'Authentication Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  async testLoginFlow(page: any) {\n    try {\n      // Click first \"Use This Account\" button\n      await page.click('button:has-text(\"Use This Account\")');\n      await page.waitForTimeout(2000);\n      \n      // Switch to Sign In tab\n      await page.click('[role=\"tab\"]:has-text(\"Sign In\")');\n      await page.waitForTimeout(2000);\n      \n      const formScreenshot = await this.takeScreenshot(page, 'login-form-filled');\n      \n      // Check form population\n      const emailValue = await page.inputValue('input[type=\"email\"]').catch(() => '');\n      const passwordValue = await page.inputValue('input[type=\"password\"]').catch(() => '');\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'Form Auto-Population',\n        userType: 'free',\n        status: (emailValue.includes('@') && passwordValue.length > 0) ? 'PASS' : 'FAIL',\n        message: `Email: ${emailValue}, Password: ${passwordValue ? 'filled' : 'empty'}`,\n        screenshot: formScreenshot\n      });\n      \n      // Attempt login\n      const submitButton = await page.locator('button[type=\"submit\"]').first();\n      await submitButton.click();\n      \n      // Wait for login response - increased timeout for authentication\n      await page.waitForTimeout(10000);\n      \n      // Check for any error messages on the page\n      const errorMessages = await page.locator('[role=\"alert\"], .error, .destructive').allTextContents();\n      \n      const afterLoginScreenshot = await this.takeScreenshot(page, 'after-login-attempt');\n      const currentUrl = page.url();\n      const loginSuccess = currentUrl.includes('/dashboard') || currentUrl.includes('/admin') || !currentUrl.includes('/login');\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'Login Flow',\n        userType: 'free',\n        status: loginSuccess ? 'PASS' : 'FAIL',\n        message: `Post-login URL: ${currentUrl}${errorMessages.length > 0 ? ` | Errors: ${errorMessages.join(', ')}` : ''}`,\n        screenshot: afterLoginScreenshot,\n        details: { currentUrl, loginSuccess, errorMessages }\n      });\n      \n      return loginSuccess;\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Authentication',\n        testName: 'Login Flow',\n        userType: 'free',\n        status: 'FAIL',\n        message: `Login error: ${error}`\n      });\n      return false;\n    }\n  }\n\n  // ========== ADMIN FUNCTIONALITY TESTS ==========\n  async testAdminFunctionality() {\n    console.log(chalk.blue('\\\\n🔧 Testing Admin Functionality...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      // Try accessing admin page directly\n      await page.goto(`${this.baseUrl}/admin`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'admin-page');\n      \n      // Check admin page elements\n      const adminElements = {\n        dashboard: await page.locator('text=\"Admin Dashboard\", .admin-dashboard, [data-testid*=\"admin\"]').count(),\n        generateButton: await page.locator('button:has-text(\"Generate\"), button[data-testid*=\"generate\"]').count(),\n        userManagement: await page.locator('text=\"User Management\", text=\"Users\"').count(),\n        contentManagement: await page.locator('text=\"Content Management\", text=\"Content\"').count(),\n        analytics: await page.locator('text=\"Analytics\", text=\"Statistics\"').count()\n      };\n      \n      const adminFeaturesFound = Object.values(adminElements).reduce((sum, count) => sum + count, 0);\n      \n      this.addResult({\n        category: 'Admin Functionality',\n        testName: 'Admin Dashboard',\n        userType: 'admin',\n        status: adminFeaturesFound > 0 ? 'PASS' : 'WARNING',\n        message: `Found ${adminFeaturesFound} admin features`,\n        screenshot,\n        details: adminElements\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Admin Functionality',\n        testName: 'Admin Test',\n        userType: 'admin',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== SEARCH FUNCTIONALITY TESTS ==========\n  async testSearchFunctionality() {\n    console.log(chalk.blue('\\\\n🔍 Testing Search Functionality...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/terms`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'search-page');\n      \n      // Check search elements\n      const searchInput = await page.locator('input[type=\"text\"], input[placeholder*=\"search\"]').count();\n      const searchButton = await page.locator('button:has-text(\"Search\"), button[type=\"submit\"]').count();\n      const filters = await page.locator('button:has-text(\"Filter\"), .filter-button').count();\n      const aiSearch = await page.locator('text=\"AI Search\", input[type=\"checkbox\"]').count();\n      \n      this.addResult({\n        category: 'Search',\n        testName: 'Search Interface',\n        userType: 'guest',\n        status: searchInput > 0 ? 'PASS' : 'FAIL',\n        message: `Search input: ${searchInput}, Button: ${searchButton}, Filters: ${filters}, AI Search: ${aiSearch}`,\n        screenshot,\n        details: { searchInput, searchButton, filters, aiSearch }\n      });\n      \n      // Test search functionality\n      if (searchInput > 0) {\n        await page.fill('input[type=\"text\"], input[placeholder*=\"search\"]', 'neural network');\n        await page.waitForTimeout(2000);\n        \n        const searchResultsScreenshot = await this.takeScreenshot(page, 'search-results');\n        \n        const results = await page.locator('.search-result, .term-card, .result-item').count();\n        const emptyState = await page.locator('text=\"No results\", text=\"no terms\", .empty-state').count();\n        \n        this.addResult({\n          category: 'Search',\n          testName: 'Search Results',\n          userType: 'guest',\n          status: (results > 0 || emptyState > 0) ? 'PASS' : 'WARNING',\n          message: `Results: ${results}, Empty state: ${emptyState}`,\n          screenshot: searchResultsScreenshot,\n          details: { results, emptyState }\n        });\n      }\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Search',\n        testName: 'Search Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== PREMIUM FEATURES TESTS ==========\n  async testPremiumFeatures() {\n    console.log(chalk.blue('\\\\n💎 Testing Premium Features...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      // Try accessing a term page to check for premium features\n      await page.goto(`${this.baseUrl}/terms`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'premium-features');\n      \n      // Check for premium indicators\n      const premiumBadges = await page.locator('text=\"Premium\", text=\"PRO\", .premium-badge').count();\n      const upgradePrompts = await page.locator('button:has-text(\"Upgrade\"), button:has-text(\"Get Premium\")').count();\n      const lockedContent = await page.locator('.locked, .premium-only, text=\"Premium Only\"').count();\n      const sections42 = await page.locator('[data-testid*=\"section\"], .section, .accordion-item').count();\n      \n      this.addResult({\n        category: 'Premium Features',\n        testName: '42-Section Components',\n        userType: 'premium',\n        status: sections42 > 10 ? 'PASS' : 'WARNING',\n        message: `Found ${sections42} sections, Premium badges: ${premiumBadges}, Upgrade prompts: ${upgradePrompts}`,\n        screenshot,\n        details: { sections42, premiumBadges, upgradePrompts, lockedContent }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Premium Features',\n        testName: 'Premium Test',\n        userType: 'premium',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== GAMIFICATION TESTS ==========\n  async testGamificationFeatures() {\n    console.log(chalk.blue('\\\\n🎮 Testing Gamification Features...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/dashboard`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'gamification');\n      \n      // Check for gamification elements\n      const progressBars = await page.locator('.progress-bar, [role=\"progressbar\"]').count();\n      const achievements = await page.locator('.achievement, .badge, .trophy').count();\n      const streaks = await page.locator('text*=\"streak\", .streak-counter').count();\n      const levels = await page.locator('text*=\"level\", .level-indicator').count();\n      const points = await page.locator('text*=\"points\", .points-counter').count();\n      \n      const gamificationElements = progressBars + achievements + streaks + levels + points;\n      \n      this.addResult({\n        category: 'Gamification',\n        testName: 'Gamification Elements',\n        userType: 'user',\n        status: gamificationElements > 0 ? 'PASS' : 'WARNING',\n        message: `Progress: ${progressBars}, Achievements: ${achievements}, Streaks: ${streaks}, Levels: ${levels}, Points: ${points}`,\n        screenshot,\n        details: { progressBars, achievements, streaks, levels, points }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Gamification',\n        testName: 'Gamification Test',\n        userType: 'user',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== RESPONSIVE DESIGN TESTS ==========\n  async testResponsiveDesign() {\n    console.log(chalk.blue('\\\\n📱 Testing Responsive Design...'));\n    \n    const viewports = [\n      { name: 'mobile', width: 375, height: 812 },\n      { name: 'tablet', width: 768, height: 1024 },\n      { name: 'desktop', width: 1920, height: 1080 }\n    ];\n    \n    for (const viewport of viewports) {\n      const page = await this.browser.newPage();\n      await page.setViewportSize(viewport);\n      \n      try {\n        await page.goto(this.baseUrl);\n        await page.waitForLoadState('domcontentloaded');\n        await page.waitForTimeout(2000);\n        \n        const screenshot = await this.takeScreenshot(page, `responsive-${viewport.name}`);\n        \n        // Check responsive elements\n        const header = await page.locator('header').first().isVisible();\n        const nav = await page.locator('nav[role=\"navigation\"]').first().isVisible();\n        const menuButton = await page.locator('button[aria-label*=\"menu\"], .hamburger').first().isVisible();\n        \n        this.addResult({\n          category: 'Responsive Design',\n          testName: `${viewport.name} Layout`,\n          userType: 'guest',\n          status: header ? 'PASS' : 'WARNING',\n          message: `Header: ${header ? '✓' : '✗'}, Nav: ${nav ? '✓' : '✗'}, Menu: ${menuButton ? '✓' : '✗'}`,\n          screenshot,\n          details: { header, nav, menuButton, viewport }\n        });\n        \n      } catch (error) {\n        this.addResult({\n          category: 'Responsive Design',\n          testName: `${viewport.name} Test`,\n          userType: 'guest',\n          status: 'FAIL',\n          message: `Error: ${error}`\n        });\n      } finally {\n        await page.close();\n      }\n    }\n  }\n\n  // ========== GENERATE COMPREHENSIVE REPORT ==========\n  async generateReport() {\n    console.log(chalk.yellow('\\\\n📝 Generating Comprehensive Report...'));\n    \n    const categories = [...new Set(this.results.map(r => r.category))];\n    const summary = {\n      totalTests: this.results.length,\n      passed: this.results.filter(r => r.status === 'PASS').length,\n      failed: this.results.filter(r => r.status === 'FAIL').length,\n      warnings: this.results.filter(r => r.status === 'WARNING').length,\n      categories: categories.length\n    };\n    \n    const report = {\n      timestamp: new Date().toISOString(),\n      summary,\n      passRate: Math.round((summary.passed / summary.totalTests) * 100),\n      categories: categories.map(cat => ({\n        name: cat,\n        tests: this.results.filter(r => r.category === cat),\n        passed: this.results.filter(r => r.category === cat && r.status === 'PASS').length,\n        failed: this.results.filter(r => r.category === cat && r.status === 'FAIL').length,\n        warnings: this.results.filter(r => r.category === cat && r.status === 'WARNING').length\n      })),\n      allResults: this.results\n    };\n    \n    // Save JSON report\n    const reportPath = path.join(this.screenshotDir, 'complete-feature-report.json');\n    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n    \n    // Generate HTML report\n    const htmlReport = this.generateHTMLReport(report);\n    fs.writeFileSync(path.join(this.screenshotDir, 'index.html'), htmlReport);\n    \n    // Print summary\n    console.log(chalk.green('\\\\n✅ Complete Feature Test Report Generated!'));\n    console.log(chalk.blue(`📁 Results Directory: ${this.screenshotDir}`));\n    console.log(chalk.blue(`📊 Summary: ${summary.passed} passed, ${summary.failed} failed, ${summary.warnings} warnings`));\n    console.log(chalk.blue(`📈 Pass Rate: ${report.passRate}%`));\n    \n    // Print category breakdown\n    console.log(chalk.yellow('\\\\n📋 Category Breakdown:'));\n    report.categories.forEach(cat => {\n      const passRate = Math.round((cat.passed / cat.tests.length) * 100);\n      console.log(chalk.gray(`  ${cat.name}: ${cat.passed}/${cat.tests.length} passed (${passRate}%)`));\n    });\n    \n    return report;\n  }\n\n  generateHTMLReport(report: any): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Complete Feature Test Report</title>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }\n    .summary { background: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n    .metric { display: inline-block; margin: 10px; padding: 10px; background: white; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n    .category { margin: 20px 0; }\n    .test-result { margin: 10px 0; padding: 15px; border-radius: 4px; border-left: 4px solid; }\n    .test-pass { background: #d4edda; border-color: #28a745; }\n    .test-fail { background: #f8d7da; border-color: #dc3545; }\n    .test-warning { background: #fff3cd; border-color: #ffc107; }\n    h1 { color: #333; }\n    h2 { color: #555; border-bottom: 2px solid #eee; padding-bottom: 10px; }\n    .timestamp { color: #666; font-size: 0.9em; }\n  </style>\n</head>\n<body>\n  <h1>🚀 Complete Feature Test Report</h1>\n  <p class=\"timestamp\">Generated: ${new Date(report.timestamp).toLocaleString()}</p>\n  \n  <div class=\"summary\">\n    <h2>📊 Executive Summary</h2>\n    <div class=\"metric\"><strong>${report.summary.totalTests}</strong><br>Total Tests</div>\n    <div class=\"metric\"><strong>${report.summary.passed}</strong><br>Passed</div>\n    <div class=\"metric\"><strong>${report.summary.failed}</strong><br>Failed</div>\n    <div class=\"metric\"><strong>${report.summary.warnings}</strong><br>Warnings</div>\n    <div class=\"metric\"><strong>${report.passRate}%</strong><br>Pass Rate</div>\n  </div>\n\n  <h2>📋 Test Results by Category</h2>\n  ${report.categories.map(cat => `\n    <div class=\"category\">\n      <h3>${cat.name} (${cat.passed}/${cat.tests.length} passed)</h3>\n      ${cat.tests.map(test => `\n        <div class=\"test-result test-${test.status.toLowerCase()}\">\n          <strong>${test.testName}</strong> - ${test.status}<br>\n          <small>User: ${test.userType}</small><br>\n          ${test.message}\n          ${test.screenshot ? `<br><small>Screenshot: ${test.screenshot}</small>` : ''}\n        </div>\n      `).join('')}\n    </div>\n  `).join('')}\n\n  <div style=\"margin-top: 40px; padding: 20px; background: #f8f9fa; border-radius: 8px;\">\n    <h2>📁 File Locations</h2>\n    <p><strong>Screenshots:</strong> ${this.screenshotDir}</p>\n    <p><strong>JSON Report:</strong> ${path.join(this.screenshotDir, 'complete-feature-report.json')}</p>\n  </div>\n</body>\n</html>\n    `;\n  }\n\n  async run() {\n    try {\n      await this.init();\n      await this.testBackendAPIs();\n      await this.testCookieConsent();\n      await this.testAuthentication();\n      await this.testAdminFunctionality();\n      await this.testSearchFunctionality();\n      await this.testPremiumFeatures();\n      await this.testGamificationFeatures();\n      await this.testResponsiveDesign();\n      await this.generateReport();\n      \n    } catch (error) {\n      console.error(chalk.red('❌ Test failed:'), error);\n    } finally {\n      if (this.browser) {\n        await this.browser.close();\n      }\n    }\n  }\n}\n\nconst tester = new CompleteFeatureTester();\ntester.run().catch(console.error);"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**import { chromium } from 'playwright';\nimport { exec } from 'child_process';\nimport { promisify } from 'utilnode:util;\nimport fs from 'fs';\nimport path from 'path';\nconst tester = new CompleteFeatureTester();\ntester.run().catch(console.error);","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":16}},{"diffOp":{"equal":{"range":[23,126]}}},{"diffOp":{"equal":{"range":[126,127]}}},{"diffOp":{"delete":{"range":[127,131]}}},{"diffOp":{"insert":{"range":[131,140]}}},{"diffOp":{"equal":{"range":[126,127]}}},{"diffOp":{"equal":{"range":[140,187]}}},{"equalLines":{"line_count":653}},{"diffOp":{"equal":{"range":[187,266]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/complete-feature-test.ts"},"span":[569,575],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * COMPLETE FEATURE TEST\n * \n * This script tests all major features of the application:\n * 1. Cookie consent functionality\n * 2. Authentication flows (including OAuth vs regular sign-up)\n * 3. Admin functionality\n * 4. Free user limitations \n * 5. Premium user 42-section components\n * 6. Gamification features\n * 7. Search functionality\n * 8. Responsive design\n * 9. API endpoints\n * 10. Backend integration\n */\n\nimport chalk from 'chalk';\nimport { chromium } from 'playwright';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs';\nimport path from 'path';\n\nconst execAsync = promisify(exec);\n\ninterface TestResult {\n  category: string;\n  testName: string;\n  userType: string;\n  status: 'PASS' | 'FAIL' | 'WARNING';\n  message: string;\n  screenshot?: string;\n  details?: any;\n}\n\nclass CompleteFeatureTester {\n  private browser: any;\n  private results: TestResult[] = [];\n  private screenshotDir: string;\n  private baseUrl = 'http://localhost:5173';\n  private apiUrl = 'http://localhost:3001';\n\n  constructor() {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    this.screenshotDir = path.join(process.cwd(), 'complete-feature-test', timestamp);\n    fs.mkdirSync(this.screenshotDir, { recursive: true });\n  }\n\n  async init() {\n    this.browser = await chromium.launch({\n      headless: false,\n      slowMo: 500,\n    });\n    console.log(chalk.blue('🚀 Starting Complete Feature Test...'));\n  }\n\n  async takeScreenshot(page: any, name: string, userType: string = 'guest'): Promise<string> {\n    const filename = `${userType}-${name}-${Date.now()}.png`;\n    const filepath = path.join(this.screenshotDir, filename);\n    await page.screenshot({ path: filepath, fullPage: true });\n    return filename;\n  }\n\n  addResult(result: TestResult) {\n    this.results.push(result);\n    const color = result.status === 'PASS' ? 'green' : result.status === 'FAIL' ? 'red' : 'yellow';\n    console.log(chalk[color](`${result.status}: [${result.category}] ${result.testName} (${result.userType}) - ${result.message}`));\n  }\n\n  async dismissCookieBanner(page: any) {\n    try {\n      // Check if cookie banner is visible and dismiss it\n      const cookieBanner = await page.locator('[data-testid=\"cookie-banner\"], .cookie-banner, [role=\"dialog\"]:has-text(\"cookie\")').first();\n      if (await cookieBanner.isVisible()) {\n        const acceptButton = await page.locator('button:has-text(\"Accept\"), button:has-text(\"Accept All\"), button:has-text(\"OK\")').first();\n        if (await acceptButton.isVisible()) {\n          await acceptButton.click();\n          await page.waitForTimeout(1000);\n        }\n      }\n    } catch (error) {\n      // Cookie banner might not be present, continue\n    }\n  }\n\n  // ========== BACKEND API TESTS ==========\n  async testBackendAPIs() {\n    console.log(chalk.blue('\\\\n🔌 Testing Backend APIs...'));\n    \n    const endpoints = [\n      { path: '/api/health', name: 'Health Check' },\n      { path: '/api/categories', name: 'Categories' },\n      { path: '/api/terms', name: 'Terms' },\n      { path: '/api/search/suggestions', name: 'Search Suggestions' },\n      { path: '/api/enhanced/terms', name: 'Enhanced Terms' },\n      { path: '/api/auth/check', name: 'Auth Check' },\n    ];\n\n    for (const endpoint of endpoints) {\n      try {\n        const { stdout, stderr } = await execAsync(`curl -s -w \"%{http_code}\" -o /dev/null ${this.apiUrl}${endpoint.path}`);\n        const statusCode = stdout.trim();\n        \n        this.addResult({\n          category: 'Backend API',\n          testName: endpoint.name,\n          userType: 'system',\n          status: statusCode.startsWith('2') ? 'PASS' : statusCode.startsWith('4') ? 'WARNING' : 'FAIL',\n          message: `HTTP ${statusCode}`,\n          details: { endpoint: endpoint.path, statusCode }\n        });\n        \n      } catch (error) {\n        this.addResult({\n          category: 'Backend API',\n          testName: endpoint.name,\n          userType: 'system',\n          status: 'FAIL',\n          message: `Connection failed: ${error}`,\n          details: { endpoint: endpoint.path, error }\n        });\n      }\n    }\n  }\n\n  // ========== COOKIE CONSENT TESTS ==========\n  async testCookieConsent() {\n    console.log(chalk.blue('\\\\n🍪 Testing Cookie Consent...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(this.baseUrl);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'homepage-initial');\n      \n      // Check for cookie consent implementation\n      const cookieElements = await page.locator('[class*=\"cookie\"], [data-testid*=\"cookie\"], [aria-label*=\"cookie\"]').count();\n      const posthogScript = await page.locator('script[src*=\"posthog\"]').count();\n      const gaScript = await page.locator('script[src*=\"google\"], script[src*=\"analytics\"]').count();\n      \n      this.addResult({\n        category: 'Cookie Consent',\n        testName: 'Cookie Implementation',\n        userType: 'guest',\n        status: (cookieElements > 0 || posthogScript > 0 || gaScript > 0) ? 'PASS' : 'WARNING',\n        message: `Cookie elements: ${cookieElements}, Analytics scripts: ${posthogScript + gaScript}`,\n        screenshot,\n        details: { cookieElements, posthogScript, gaScript }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Cookie Consent',\n        testName: 'Cookie Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== AUTHENTICATION TESTS ==========\n  async testAuthentication() {\n    console.log(chalk.blue('\\\\n🔐 Testing Authentication Systems...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/login`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      // Dismiss cookie banner if present\n      await this.dismissCookieBanner(page);\n      \n      const screenshot = await this.takeScreenshot(page, 'login-page');\n      \n      // Test OAuth vs Regular Sign-up\n      const googleButton = await page.locator('text=\"Continue with Google\"').isVisible();\n      const githubButton = await page.locator('text=\"Continue with GitHub\"').isVisible();\n      const emailSignUp = await page.locator('[role=\"tab\"]:has-text(\"Sign Up\")').isVisible();\n      const emailSignIn = await page.locator('[role=\"tab\"]:has-text(\"Sign In\")').isVisible();\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'OAuth vs Regular Sign-up',\n        userType: 'guest',\n        status: (googleButton && githubButton && emailSignUp) ? 'PASS' : 'WARNING',\n        message: `OAuth: Google ${googleButton ? '✓' : '✗'}, GitHub ${githubButton ? '✓' : '✗'}, Email Sign-up: ${emailSignUp ? '✓' : '✗'}`,\n        screenshot,\n        details: { googleButton, githubButton, emailSignUp, emailSignIn }\n      });\n\n      // Test Development Test Users\n      const testUsersTab = await page.locator('[role=\"tab\"]:has-text(\"Test Users\")').isVisible();\n      \n      if (testUsersTab) {\n        await page.click('[role=\"tab\"]:has-text(\"Test Users\")');\n        await page.waitForTimeout(2000);\n        \n        const testUsersScreenshot = await this.takeScreenshot(page, 'test-users-tab');\n        \n        const useAccountButtons = await page.locator('button:has-text(\"Use This Account\")').count();\n        const userTypes = await page.locator('text=\"Regular User\", text=\"Premium User\", text=\"Admin User\"').count();\n        \n        this.addResult({\n          category: 'Authentication',\n          testName: 'Test Users Feature',\n          userType: 'development',\n          status: (useAccountButtons >= 3 && userTypes >= 3) ? 'PASS' : 'WARNING',\n          message: `Found ${useAccountButtons} test accounts, ${userTypes} user types`,\n          screenshot: testUsersScreenshot,\n          details: { useAccountButtons, userTypes }\n        });\n\n        // Test actual login flow (dismiss cookie banner first)\n        await this.dismissCookieBanner(page);\n        await this.testLoginFlow(page);\n      }\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Authentication',\n        testName: 'Authentication Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  async testLoginFlow(page: any) {\n    try {\n      // Click first \"Use This Account\" button\n      await page.click('button:has-text(\"Use This Account\")');\n      await page.waitForTimeout(2000);\n      \n      // Switch to Sign In tab\n      await page.click('[role=\"tab\"]:has-text(\"Sign In\")');\n      await page.waitForTimeout(2000);\n      \n      const formScreenshot = await this.takeScreenshot(page, 'login-form-filled');\n      \n      // Check form population\n      const emailValue = await page.inputValue('input[type=\"email\"]').catch(() => '');\n      const passwordValue = await page.inputValue('input[type=\"password\"]').catch(() => '');\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'Form Auto-Population',\n        userType: 'free',\n        status: (emailValue.includes('@') && passwordValue.length > 0) ? 'PASS' : 'FAIL',\n        message: `Email: ${emailValue}, Password: ${passwordValue ? 'filled' : 'empty'}`,\n        screenshot: formScreenshot\n      });\n      \n      // Attempt login\n      const submitButton = await page.locator('button[type=\"submit\"]').first();\n      await submitButton.click();\n      \n      // Wait for login response - increased timeout for authentication\n      await page.waitForTimeout(10000);\n      \n      // Check for any error messages on the page\n      const errorMessages = await page.locator('[role=\"alert\"], .error, .destructive').allTextContents();\n      \n      const afterLoginScreenshot = await this.takeScreenshot(page, 'after-login-attempt');\n      const currentUrl = page.url();\n      const loginSuccess = currentUrl.includes('/dashboard') || currentUrl.includes('/admin') || !currentUrl.includes('/login');\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'Login Flow',\n        userType: 'free',\n        status: loginSuccess ? 'PASS' : 'FAIL',\n        message: `Post-login URL: ${currentUrl}${errorMessages.length > 0 ? ` | Errors: ${errorMessages.join(', ')}` : ''}`,\n        screenshot: afterLoginScreenshot,\n        details: { currentUrl, loginSuccess, errorMessages }\n      });\n      \n      return loginSuccess;\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Authentication',\n        testName: 'Login Flow',\n        userType: 'free',\n        status: 'FAIL',\n        message: `Login error: ${error}`\n      });\n      return false;\n    }\n  }\n\n  // ========== ADMIN FUNCTIONALITY TESTS ==========\n  async testAdminFunctionality() {\n    console.log(chalk.blue('\\\\n🔧 Testing Admin Functionality...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      // Try accessing admin page directly\n      await page.goto(`${this.baseUrl}/admin`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'admin-page');\n      \n      // Check admin page elements\n      const adminElements = {\n        dashboard: await page.locator('text=\"Admin Dashboard\", .admin-dashboard, [data-testid*=\"admin\"]').count(),\n        generateButton: await page.locator('button:has-text(\"Generate\"), button[data-testid*=\"generate\"]').count(),\n        userManagement: await page.locator('text=\"User Management\", text=\"Users\"').count(),\n        contentManagement: await page.locator('text=\"Content Management\", text=\"Content\"').count(),\n        analytics: await page.locator('text=\"Analytics\", text=\"Statistics\"').count()\n      };\n      \n      const adminFeaturesFound = Object.values(adminElements).reduce((sum, count) => sum + count, 0);\n      \n      this.addResult({\n        category: 'Admin Functionality',\n        testName: 'Admin Dashboard',\n        userType: 'admin',\n        status: adminFeaturesFound > 0 ? 'PASS' : 'WARNING',\n        message: `Found ${adminFeaturesFound} admin features`,\n        screenshot,\n        details: adminElements\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Admin Functionality',\n        testName: 'Admin Test',\n        userType: 'admin',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== SEARCH FUNCTIONALITY TESTS ==========\n  async testSearchFunctionality() {\n    console.log(chalk.blue('\\\\n🔍 Testing Search Functionality...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/terms`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'search-page');\n      \n      // Check search elements\n      const searchInput = await page.locator('input[type=\"text\"], input[placeholder*=\"search\"]').count();\n      const searchButton = await page.locator('button:has-text(\"Search\"), button[type=\"submit\"]').count();\n      const filters = await page.locator('button:has-text(\"Filter\"), .filter-button').count();\n      const aiSearch = await page.locator('text=\"AI Search\", input[type=\"checkbox\"]').count();\n      \n      this.addResult({\n        category: 'Search',\n        testName: 'Search Interface',\n        userType: 'guest',\n        status: searchInput > 0 ? 'PASS' : 'FAIL',\n        message: `Search input: ${searchInput}, Button: ${searchButton}, Filters: ${filters}, AI Search: ${aiSearch}`,\n        screenshot,\n        details: { searchInput, searchButton, filters, aiSearch }\n      });\n      \n      // Test search functionality\n      if (searchInput > 0) {\n        await page.fill('input[type=\"text\"], input[placeholder*=\"search\"]', 'neural network');\n        await page.waitForTimeout(2000);\n        \n        const searchResultsScreenshot = await this.takeScreenshot(page, 'search-results');\n        \n        const results = await page.locator('.search-result, .term-card, .result-item').count();\n        const emptyState = await page.locator('text=\"No results\", text=\"no terms\", .empty-state').count();\n        \n        this.addResult({\n          category: 'Search',\n          testName: 'Search Results',\n          userType: 'guest',\n          status: (results > 0 || emptyState > 0) ? 'PASS' : 'WARNING',\n          message: `Results: ${results}, Empty state: ${emptyState}`,\n          screenshot: searchResultsScreenshot,\n          details: { results, emptyState }\n        });\n      }\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Search',\n        testName: 'Search Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== PREMIUM FEATURES TESTS ==========\n  async testPremiumFeatures() {\n    console.log(chalk.blue('\\\\n💎 Testing Premium Features...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      // Try accessing a term page to check for premium features\n      await page.goto(`${this.baseUrl}/terms`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'premium-features');\n      \n      // Check for premium indicators\n      const premiumBadges = await page.locator('text=\"Premium\", text=\"PRO\", .premium-badge').count();\n      const upgradePrompts = await page.locator('button:has-text(\"Upgrade\"), button:has-text(\"Get Premium\")').count();\n      const lockedContent = await page.locator('.locked, .premium-only, text=\"Premium Only\"').count();\n      const sections42 = await page.locator('[data-testid*=\"section\"], .section, .accordion-item').count();\n      \n      this.addResult({\n        category: 'Premium Features',\n        testName: '42-Section Components',\n        userType: 'premium',\n        status: sections42 > 10 ? 'PASS' : 'WARNING',\n        message: `Found ${sections42} sections, Premium badges: ${premiumBadges}, Upgrade prompts: ${upgradePrompts}`,\n        screenshot,\n        details: { sections42, premiumBadges, upgradePrompts, lockedContent }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Premium Features',\n        testName: 'Premium Test',\n        userType: 'premium',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== GAMIFICATION TESTS ==========\n  async testGamificationFeatures() {\n    console.log(chalk.blue('\\\\n🎮 Testing Gamification Features...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/dashboard`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'gamification');\n      \n      // Check for gamification elements\n      const progressBars = await page.locator('.progress-bar, [role=\"progressbar\"]').count();\n      const achievements = await page.locator('.achievement, .badge, .trophy').count();\n      const streaks = await page.locator('text*=\"streak\", .streak-counter').count();\n      const levels = await page.locator('text*=\"level\", .level-indicator').count();\n      const points = await page.locator('text*=\"points\", .points-counter').count();\n      \n      const gamificationElements = progressBars + achievements + streaks + levels + points;\n      \n      this.addResult({\n        category: 'Gamification',\n        testName: 'Gamification Elements',\n        userType: 'user',\n        status: gamificationElements > 0 ? 'PASS' : 'WARNING',\n        message: `Progress: ${progressBars}, Achievements: ${achievements}, Streaks: ${streaks}, Levels: ${levels}, Points: ${points}`,\n        screenshot,\n        details: { progressBars, achievements, streaks, levels, points }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Gamification',\n        testName: 'Gamification Test',\n        userType: 'user',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== RESPONSIVE DESIGN TESTS ==========\n  async testResponsiveDesign() {\n    console.log(chalk.blue('\\\\n📱 Testing Responsive Design...'));\n    \n    const viewports = [\n      { name: 'mobile', width: 375, height: 812 },\n      { name: 'tablet', width: 768, height: 1024 },\n      { name: 'desktop', width: 1920, height: 1080 }\n    ];\n    \n    for (const viewport of viewports) {\n      const page = await this.browser.newPage();\n      await page.setViewportSize(viewport);\n      \n      try {\n        await page.goto(this.baseUrl);\n        await page.waitForLoadState('domcontentloaded');\n        await page.waitForTimeout(2000);\n        \n        const screenshot = await this.takeScreenshot(page, `responsive-${viewport.name}`);\n        \n        // Check responsive elements\n        const header = await page.locator('header').first().isVisible();\n        const nav = await page.locator('nav[role=\"navigation\"]').first().isVisible();\n        const menuButton = await page.locator('button[aria-label*=\"menu\"], .hamburger').first().isVisible();\n        \n        this.addResult({\n          category: 'Responsive Design',\n          testName: `${viewport.name} Layout`,\n          userType: 'guest',\n          status: header ? 'PASS' : 'WARNING',\n          message: `Header: ${header ? '✓' : '✗'}, Nav: ${nav ? '✓' : '✗'}, Menu: ${menuButton ? '✓' : '✗'}`,\n          screenshot,\n          details: { header, nav, menuButton, viewport }\n        });\n        \n      } catch (error) {\n        this.addResult({\n          category: 'Responsive Design',\n          testName: `${viewport.name} Test`,\n          userType: 'guest',\n          status: 'FAIL',\n          message: `Error: ${error}`\n        });\n      } finally {\n        await page.close();\n      }\n    }\n  }\n\n  // ========== GENERATE COMPREHENSIVE REPORT ==========\n  async generateReport() {\n    console.log(chalk.yellow('\\\\n📝 Generating Comprehensive Report...'));\n    \n    const categories = [...new Set(this.results.map(r => r.category))];\n    const summary = {\n      totalTests: this.results.length,\n      passed: this.results.filter(r => r.status === 'PASS').length,\n      failed: this.results.filter(r => r.status === 'FAIL').length,\n      warnings: this.results.filter(r => r.status === 'WARNING').length,\n      categories: categories.length\n    };\n    \n    const report = {\n      timestamp: new Date().toISOString(),\n      summary,\n      passRate: Math.round((summary.passed / summary.totalTests) * 100),\n      categories: categories.map(cat => ({\n        name: cat,\n        tests: this.results.filter(r => r.category === cat),\n        passed: this.results.filter(r => r.category === cat && r.status === 'PASS').length,\n        failed: this.results.filter(r => r.category === cat && r.status === 'FAIL').length,\n        warnings: this.results.filter(r => r.category === cat && r.status === 'WARNING').length\n      })),\n      allResults: this.results\n    };\n    \n    // Save JSON report\n    const reportPath = path.join(this.screenshotDir, 'complete-feature-report.json');\n    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n    \n    // Generate HTML report\n    const htmlReport = this.generateHTMLReport(report);\n    fs.writeFileSync(path.join(this.screenshotDir, 'index.html'), htmlReport);\n    \n    // Print summary\n    console.log(chalk.green('\\\\n✅ Complete Feature Test Report Generated!'));\n    console.log(chalk.blue(`📁 Results Directory: ${this.screenshotDir}`));\n    console.log(chalk.blue(`📊 Summary: ${summary.passed} passed, ${summary.failed} failed, ${summary.warnings} warnings`));\n    console.log(chalk.blue(`📈 Pass Rate: ${report.passRate}%`));\n    \n    // Print category breakdown\n    console.log(chalk.yellow('\\\\n📋 Category Breakdown:'));\n    report.categories.forEach(cat => {\n      const passRate = Math.round((cat.passed / cat.tests.length) * 100);\n      console.log(chalk.gray(`  ${cat.name}: ${cat.passed}/${cat.tests.length} passed (${passRate}%)`));\n    });\n    \n    return report;\n  }\n\n  generateHTMLReport(report: any): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Complete Feature Test Report</title>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }\n    .summary { background: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n    .metric { display: inline-block; margin: 10px; padding: 10px; background: white; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n    .category { margin: 20px 0; }\n    .test-result { margin: 10px 0; padding: 15px; border-radius: 4px; border-left: 4px solid; }\n    .test-pass { background: #d4edda; border-color: #28a745; }\n    .test-fail { background: #f8d7da; border-color: #dc3545; }\n    .test-warning { background: #fff3cd; border-color: #ffc107; }\n    h1 { color: #333; }\n    h2 { color: #555; border-bottom: 2px solid #eee; padding-bottom: 10px; }\n    .timestamp { color: #666; font-size: 0.9em; }\n  </style>\n</head>\n<body>\n  <h1>🚀 Complete Feature Test Report</h1>\n  <p class=\"timestamp\">Generated: ${new Date(report.timestamp).toLocaleString()}</p>\n  \n  <div class=\"summary\">\n    <h2>📊 Executive Summary</h2>\n    <div class=\"metric\"><strong>${report.summary.totalTests}</strong><br>Total Tests</div>\n    <div class=\"metric\"><strong>${report.summary.passed}</strong><br>Passed</div>\n    <div class=\"metric\"><strong>${report.summary.failed}</strong><br>Failed</div>\n    <div class=\"metric\"><strong>${report.summary.warnings}</strong><br>Warnings</div>\n    <div class=\"metric\"><strong>${report.passRate}%</strong><br>Pass Rate</div>\n  </div>\n\n  <h2>📋 Test Results by Category</h2>\n  ${report.categories.map(cat => `\n    <div class=\"category\">\n      <h3>${cat.name} (${cat.passed}/${cat.tests.length} passed)</h3>\n      ${cat.tests.map(test => `\n        <div class=\"test-result test-${test.status.toLowerCase()}\">\n          <strong>${test.testName}</strong> - ${test.status}<br>\n          <small>User: ${test.userType}</small><br>\n          ${test.message}\n          ${test.screenshot ? `<br><small>Screenshot: ${test.screenshot}</small>` : ''}\n        </div>\n      `).join('')}\n    </div>\n  `).join('')}\n\n  <div style=\"margin-top: 40px; padding: 20px; background: #f8f9fa; border-radius: 8px;\">\n    <h2>📁 File Locations</h2>\n    <p><strong>Screenshots:</strong> ${this.screenshotDir}</p>\n    <p><strong>JSON Report:</strong> ${path.join(this.screenshotDir, 'complete-feature-report.json')}</p>\n  </div>\n</body>\n</html>\n    `;\n  }\n\n  async run() {\n    try {\n      await this.init();\n      await this.testBackendAPIs();\n      await this.testCookieConsent();\n      await this.testAuthentication();\n      await this.testAdminFunctionality();\n      await this.testSearchFunctionality();\n      await this.testPremiumFeatures();\n      await this.testGamificationFeatures();\n      await this.testResponsiveDesign();\n      await this.generateReport();\n      \n    } catch (error) {\n      console.error(chalk.red('❌ Test failed:'), error);\n    } finally {\n      if (this.browser) {\n        await this.browser.close();\n      }\n    }\n  }\n}\n\nconst tester = new CompleteFeatureTester();\ntester.run().catch(console.error);"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**import { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fsnode:fs;\nimport path from 'path';\n\nconst tester = new CompleteFeatureTester();\ntester.run().catch(console.error);","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":17}},{"diffOp":{"equal":{"range":[23,110]}}},{"diffOp":{"equal":{"range":[110,111]}}},{"diffOp":{"delete":{"range":[111,113]}}},{"diffOp":{"insert":{"range":[113,120]}}},{"diffOp":{"equal":{"range":[110,111]}}},{"diffOp":{"equal":{"range":[120,147]}}},{"equalLines":{"line_count":652}},{"diffOp":{"equal":{"range":[147,226]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/complete-feature-test.ts"},"span":[592,596],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * COMPLETE FEATURE TEST\n * \n * This script tests all major features of the application:\n * 1. Cookie consent functionality\n * 2. Authentication flows (including OAuth vs regular sign-up)\n * 3. Admin functionality\n * 4. Free user limitations \n * 5. Premium user 42-section components\n * 6. Gamification features\n * 7. Search functionality\n * 8. Responsive design\n * 9. API endpoints\n * 10. Backend integration\n */\n\nimport chalk from 'chalk';\nimport { chromium } from 'playwright';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs';\nimport path from 'path';\n\nconst execAsync = promisify(exec);\n\ninterface TestResult {\n  category: string;\n  testName: string;\n  userType: string;\n  status: 'PASS' | 'FAIL' | 'WARNING';\n  message: string;\n  screenshot?: string;\n  details?: any;\n}\n\nclass CompleteFeatureTester {\n  private browser: any;\n  private results: TestResult[] = [];\n  private screenshotDir: string;\n  private baseUrl = 'http://localhost:5173';\n  private apiUrl = 'http://localhost:3001';\n\n  constructor() {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    this.screenshotDir = path.join(process.cwd(), 'complete-feature-test', timestamp);\n    fs.mkdirSync(this.screenshotDir, { recursive: true });\n  }\n\n  async init() {\n    this.browser = await chromium.launch({\n      headless: false,\n      slowMo: 500,\n    });\n    console.log(chalk.blue('🚀 Starting Complete Feature Test...'));\n  }\n\n  async takeScreenshot(page: any, name: string, userType: string = 'guest'): Promise<string> {\n    const filename = `${userType}-${name}-${Date.now()}.png`;\n    const filepath = path.join(this.screenshotDir, filename);\n    await page.screenshot({ path: filepath, fullPage: true });\n    return filename;\n  }\n\n  addResult(result: TestResult) {\n    this.results.push(result);\n    const color = result.status === 'PASS' ? 'green' : result.status === 'FAIL' ? 'red' : 'yellow';\n    console.log(chalk[color](`${result.status}: [${result.category}] ${result.testName} (${result.userType}) - ${result.message}`));\n  }\n\n  async dismissCookieBanner(page: any) {\n    try {\n      // Check if cookie banner is visible and dismiss it\n      const cookieBanner = await page.locator('[data-testid=\"cookie-banner\"], .cookie-banner, [role=\"dialog\"]:has-text(\"cookie\")').first();\n      if (await cookieBanner.isVisible()) {\n        const acceptButton = await page.locator('button:has-text(\"Accept\"), button:has-text(\"Accept All\"), button:has-text(\"OK\")').first();\n        if (await acceptButton.isVisible()) {\n          await acceptButton.click();\n          await page.waitForTimeout(1000);\n        }\n      }\n    } catch (error) {\n      // Cookie banner might not be present, continue\n    }\n  }\n\n  // ========== BACKEND API TESTS ==========\n  async testBackendAPIs() {\n    console.log(chalk.blue('\\\\n🔌 Testing Backend APIs...'));\n    \n    const endpoints = [\n      { path: '/api/health', name: 'Health Check' },\n      { path: '/api/categories', name: 'Categories' },\n      { path: '/api/terms', name: 'Terms' },\n      { path: '/api/search/suggestions', name: 'Search Suggestions' },\n      { path: '/api/enhanced/terms', name: 'Enhanced Terms' },\n      { path: '/api/auth/check', name: 'Auth Check' },\n    ];\n\n    for (const endpoint of endpoints) {\n      try {\n        const { stdout, stderr } = await execAsync(`curl -s -w \"%{http_code}\" -o /dev/null ${this.apiUrl}${endpoint.path}`);\n        const statusCode = stdout.trim();\n        \n        this.addResult({\n          category: 'Backend API',\n          testName: endpoint.name,\n          userType: 'system',\n          status: statusCode.startsWith('2') ? 'PASS' : statusCode.startsWith('4') ? 'WARNING' : 'FAIL',\n          message: `HTTP ${statusCode}`,\n          details: { endpoint: endpoint.path, statusCode }\n        });\n        \n      } catch (error) {\n        this.addResult({\n          category: 'Backend API',\n          testName: endpoint.name,\n          userType: 'system',\n          status: 'FAIL',\n          message: `Connection failed: ${error}`,\n          details: { endpoint: endpoint.path, error }\n        });\n      }\n    }\n  }\n\n  // ========== COOKIE CONSENT TESTS ==========\n  async testCookieConsent() {\n    console.log(chalk.blue('\\\\n🍪 Testing Cookie Consent...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(this.baseUrl);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'homepage-initial');\n      \n      // Check for cookie consent implementation\n      const cookieElements = await page.locator('[class*=\"cookie\"], [data-testid*=\"cookie\"], [aria-label*=\"cookie\"]').count();\n      const posthogScript = await page.locator('script[src*=\"posthog\"]').count();\n      const gaScript = await page.locator('script[src*=\"google\"], script[src*=\"analytics\"]').count();\n      \n      this.addResult({\n        category: 'Cookie Consent',\n        testName: 'Cookie Implementation',\n        userType: 'guest',\n        status: (cookieElements > 0 || posthogScript > 0 || gaScript > 0) ? 'PASS' : 'WARNING',\n        message: `Cookie elements: ${cookieElements}, Analytics scripts: ${posthogScript + gaScript}`,\n        screenshot,\n        details: { cookieElements, posthogScript, gaScript }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Cookie Consent',\n        testName: 'Cookie Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== AUTHENTICATION TESTS ==========\n  async testAuthentication() {\n    console.log(chalk.blue('\\\\n🔐 Testing Authentication Systems...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/login`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      // Dismiss cookie banner if present\n      await this.dismissCookieBanner(page);\n      \n      const screenshot = await this.takeScreenshot(page, 'login-page');\n      \n      // Test OAuth vs Regular Sign-up\n      const googleButton = await page.locator('text=\"Continue with Google\"').isVisible();\n      const githubButton = await page.locator('text=\"Continue with GitHub\"').isVisible();\n      const emailSignUp = await page.locator('[role=\"tab\"]:has-text(\"Sign Up\")').isVisible();\n      const emailSignIn = await page.locator('[role=\"tab\"]:has-text(\"Sign In\")').isVisible();\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'OAuth vs Regular Sign-up',\n        userType: 'guest',\n        status: (googleButton && githubButton && emailSignUp) ? 'PASS' : 'WARNING',\n        message: `OAuth: Google ${googleButton ? '✓' : '✗'}, GitHub ${githubButton ? '✓' : '✗'}, Email Sign-up: ${emailSignUp ? '✓' : '✗'}`,\n        screenshot,\n        details: { googleButton, githubButton, emailSignUp, emailSignIn }\n      });\n\n      // Test Development Test Users\n      const testUsersTab = await page.locator('[role=\"tab\"]:has-text(\"Test Users\")').isVisible();\n      \n      if (testUsersTab) {\n        await page.click('[role=\"tab\"]:has-text(\"Test Users\")');\n        await page.waitForTimeout(2000);\n        \n        const testUsersScreenshot = await this.takeScreenshot(page, 'test-users-tab');\n        \n        const useAccountButtons = await page.locator('button:has-text(\"Use This Account\")').count();\n        const userTypes = await page.locator('text=\"Regular User\", text=\"Premium User\", text=\"Admin User\"').count();\n        \n        this.addResult({\n          category: 'Authentication',\n          testName: 'Test Users Feature',\n          userType: 'development',\n          status: (useAccountButtons >= 3 && userTypes >= 3) ? 'PASS' : 'WARNING',\n          message: `Found ${useAccountButtons} test accounts, ${userTypes} user types`,\n          screenshot: testUsersScreenshot,\n          details: { useAccountButtons, userTypes }\n        });\n\n        // Test actual login flow (dismiss cookie banner first)\n        await this.dismissCookieBanner(page);\n        await this.testLoginFlow(page);\n      }\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Authentication',\n        testName: 'Authentication Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  async testLoginFlow(page: any) {\n    try {\n      // Click first \"Use This Account\" button\n      await page.click('button:has-text(\"Use This Account\")');\n      await page.waitForTimeout(2000);\n      \n      // Switch to Sign In tab\n      await page.click('[role=\"tab\"]:has-text(\"Sign In\")');\n      await page.waitForTimeout(2000);\n      \n      const formScreenshot = await this.takeScreenshot(page, 'login-form-filled');\n      \n      // Check form population\n      const emailValue = await page.inputValue('input[type=\"email\"]').catch(() => '');\n      const passwordValue = await page.inputValue('input[type=\"password\"]').catch(() => '');\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'Form Auto-Population',\n        userType: 'free',\n        status: (emailValue.includes('@') && passwordValue.length > 0) ? 'PASS' : 'FAIL',\n        message: `Email: ${emailValue}, Password: ${passwordValue ? 'filled' : 'empty'}`,\n        screenshot: formScreenshot\n      });\n      \n      // Attempt login\n      const submitButton = await page.locator('button[type=\"submit\"]').first();\n      await submitButton.click();\n      \n      // Wait for login response - increased timeout for authentication\n      await page.waitForTimeout(10000);\n      \n      // Check for any error messages on the page\n      const errorMessages = await page.locator('[role=\"alert\"], .error, .destructive').allTextContents();\n      \n      const afterLoginScreenshot = await this.takeScreenshot(page, 'after-login-attempt');\n      const currentUrl = page.url();\n      const loginSuccess = currentUrl.includes('/dashboard') || currentUrl.includes('/admin') || !currentUrl.includes('/login');\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'Login Flow',\n        userType: 'free',\n        status: loginSuccess ? 'PASS' : 'FAIL',\n        message: `Post-login URL: ${currentUrl}${errorMessages.length > 0 ? ` | Errors: ${errorMessages.join(', ')}` : ''}`,\n        screenshot: afterLoginScreenshot,\n        details: { currentUrl, loginSuccess, errorMessages }\n      });\n      \n      return loginSuccess;\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Authentication',\n        testName: 'Login Flow',\n        userType: 'free',\n        status: 'FAIL',\n        message: `Login error: ${error}`\n      });\n      return false;\n    }\n  }\n\n  // ========== ADMIN FUNCTIONALITY TESTS ==========\n  async testAdminFunctionality() {\n    console.log(chalk.blue('\\\\n🔧 Testing Admin Functionality...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      // Try accessing admin page directly\n      await page.goto(`${this.baseUrl}/admin`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'admin-page');\n      \n      // Check admin page elements\n      const adminElements = {\n        dashboard: await page.locator('text=\"Admin Dashboard\", .admin-dashboard, [data-testid*=\"admin\"]').count(),\n        generateButton: await page.locator('button:has-text(\"Generate\"), button[data-testid*=\"generate\"]').count(),\n        userManagement: await page.locator('text=\"User Management\", text=\"Users\"').count(),\n        contentManagement: await page.locator('text=\"Content Management\", text=\"Content\"').count(),\n        analytics: await page.locator('text=\"Analytics\", text=\"Statistics\"').count()\n      };\n      \n      const adminFeaturesFound = Object.values(adminElements).reduce((sum, count) => sum + count, 0);\n      \n      this.addResult({\n        category: 'Admin Functionality',\n        testName: 'Admin Dashboard',\n        userType: 'admin',\n        status: adminFeaturesFound > 0 ? 'PASS' : 'WARNING',\n        message: `Found ${adminFeaturesFound} admin features`,\n        screenshot,\n        details: adminElements\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Admin Functionality',\n        testName: 'Admin Test',\n        userType: 'admin',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== SEARCH FUNCTIONALITY TESTS ==========\n  async testSearchFunctionality() {\n    console.log(chalk.blue('\\\\n🔍 Testing Search Functionality...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/terms`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'search-page');\n      \n      // Check search elements\n      const searchInput = await page.locator('input[type=\"text\"], input[placeholder*=\"search\"]').count();\n      const searchButton = await page.locator('button:has-text(\"Search\"), button[type=\"submit\"]').count();\n      const filters = await page.locator('button:has-text(\"Filter\"), .filter-button').count();\n      const aiSearch = await page.locator('text=\"AI Search\", input[type=\"checkbox\"]').count();\n      \n      this.addResult({\n        category: 'Search',\n        testName: 'Search Interface',\n        userType: 'guest',\n        status: searchInput > 0 ? 'PASS' : 'FAIL',\n        message: `Search input: ${searchInput}, Button: ${searchButton}, Filters: ${filters}, AI Search: ${aiSearch}`,\n        screenshot,\n        details: { searchInput, searchButton, filters, aiSearch }\n      });\n      \n      // Test search functionality\n      if (searchInput > 0) {\n        await page.fill('input[type=\"text\"], input[placeholder*=\"search\"]', 'neural network');\n        await page.waitForTimeout(2000);\n        \n        const searchResultsScreenshot = await this.takeScreenshot(page, 'search-results');\n        \n        const results = await page.locator('.search-result, .term-card, .result-item').count();\n        const emptyState = await page.locator('text=\"No results\", text=\"no terms\", .empty-state').count();\n        \n        this.addResult({\n          category: 'Search',\n          testName: 'Search Results',\n          userType: 'guest',\n          status: (results > 0 || emptyState > 0) ? 'PASS' : 'WARNING',\n          message: `Results: ${results}, Empty state: ${emptyState}`,\n          screenshot: searchResultsScreenshot,\n          details: { results, emptyState }\n        });\n      }\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Search',\n        testName: 'Search Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== PREMIUM FEATURES TESTS ==========\n  async testPremiumFeatures() {\n    console.log(chalk.blue('\\\\n💎 Testing Premium Features...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      // Try accessing a term page to check for premium features\n      await page.goto(`${this.baseUrl}/terms`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'premium-features');\n      \n      // Check for premium indicators\n      const premiumBadges = await page.locator('text=\"Premium\", text=\"PRO\", .premium-badge').count();\n      const upgradePrompts = await page.locator('button:has-text(\"Upgrade\"), button:has-text(\"Get Premium\")').count();\n      const lockedContent = await page.locator('.locked, .premium-only, text=\"Premium Only\"').count();\n      const sections42 = await page.locator('[data-testid*=\"section\"], .section, .accordion-item').count();\n      \n      this.addResult({\n        category: 'Premium Features',\n        testName: '42-Section Components',\n        userType: 'premium',\n        status: sections42 > 10 ? 'PASS' : 'WARNING',\n        message: `Found ${sections42} sections, Premium badges: ${premiumBadges}, Upgrade prompts: ${upgradePrompts}`,\n        screenshot,\n        details: { sections42, premiumBadges, upgradePrompts, lockedContent }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Premium Features',\n        testName: 'Premium Test',\n        userType: 'premium',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== GAMIFICATION TESTS ==========\n  async testGamificationFeatures() {\n    console.log(chalk.blue('\\\\n🎮 Testing Gamification Features...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/dashboard`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'gamification');\n      \n      // Check for gamification elements\n      const progressBars = await page.locator('.progress-bar, [role=\"progressbar\"]').count();\n      const achievements = await page.locator('.achievement, .badge, .trophy').count();\n      const streaks = await page.locator('text*=\"streak\", .streak-counter').count();\n      const levels = await page.locator('text*=\"level\", .level-indicator').count();\n      const points = await page.locator('text*=\"points\", .points-counter').count();\n      \n      const gamificationElements = progressBars + achievements + streaks + levels + points;\n      \n      this.addResult({\n        category: 'Gamification',\n        testName: 'Gamification Elements',\n        userType: 'user',\n        status: gamificationElements > 0 ? 'PASS' : 'WARNING',\n        message: `Progress: ${progressBars}, Achievements: ${achievements}, Streaks: ${streaks}, Levels: ${levels}, Points: ${points}`,\n        screenshot,\n        details: { progressBars, achievements, streaks, levels, points }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Gamification',\n        testName: 'Gamification Test',\n        userType: 'user',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== RESPONSIVE DESIGN TESTS ==========\n  async testResponsiveDesign() {\n    console.log(chalk.blue('\\\\n📱 Testing Responsive Design...'));\n    \n    const viewports = [\n      { name: 'mobile', width: 375, height: 812 },\n      { name: 'tablet', width: 768, height: 1024 },\n      { name: 'desktop', width: 1920, height: 1080 }\n    ];\n    \n    for (const viewport of viewports) {\n      const page = await this.browser.newPage();\n      await page.setViewportSize(viewport);\n      \n      try {\n        await page.goto(this.baseUrl);\n        await page.waitForLoadState('domcontentloaded');\n        await page.waitForTimeout(2000);\n        \n        const screenshot = await this.takeScreenshot(page, `responsive-${viewport.name}`);\n        \n        // Check responsive elements\n        const header = await page.locator('header').first().isVisible();\n        const nav = await page.locator('nav[role=\"navigation\"]').first().isVisible();\n        const menuButton = await page.locator('button[aria-label*=\"menu\"], .hamburger').first().isVisible();\n        \n        this.addResult({\n          category: 'Responsive Design',\n          testName: `${viewport.name} Layout`,\n          userType: 'guest',\n          status: header ? 'PASS' : 'WARNING',\n          message: `Header: ${header ? '✓' : '✗'}, Nav: ${nav ? '✓' : '✗'}, Menu: ${menuButton ? '✓' : '✗'}`,\n          screenshot,\n          details: { header, nav, menuButton, viewport }\n        });\n        \n      } catch (error) {\n        this.addResult({\n          category: 'Responsive Design',\n          testName: `${viewport.name} Test`,\n          userType: 'guest',\n          status: 'FAIL',\n          message: `Error: ${error}`\n        });\n      } finally {\n        await page.close();\n      }\n    }\n  }\n\n  // ========== GENERATE COMPREHENSIVE REPORT ==========\n  async generateReport() {\n    console.log(chalk.yellow('\\\\n📝 Generating Comprehensive Report...'));\n    \n    const categories = [...new Set(this.results.map(r => r.category))];\n    const summary = {\n      totalTests: this.results.length,\n      passed: this.results.filter(r => r.status === 'PASS').length,\n      failed: this.results.filter(r => r.status === 'FAIL').length,\n      warnings: this.results.filter(r => r.status === 'WARNING').length,\n      categories: categories.length\n    };\n    \n    const report = {\n      timestamp: new Date().toISOString(),\n      summary,\n      passRate: Math.round((summary.passed / summary.totalTests) * 100),\n      categories: categories.map(cat => ({\n        name: cat,\n        tests: this.results.filter(r => r.category === cat),\n        passed: this.results.filter(r => r.category === cat && r.status === 'PASS').length,\n        failed: this.results.filter(r => r.category === cat && r.status === 'FAIL').length,\n        warnings: this.results.filter(r => r.category === cat && r.status === 'WARNING').length\n      })),\n      allResults: this.results\n    };\n    \n    // Save JSON report\n    const reportPath = path.join(this.screenshotDir, 'complete-feature-report.json');\n    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n    \n    // Generate HTML report\n    const htmlReport = this.generateHTMLReport(report);\n    fs.writeFileSync(path.join(this.screenshotDir, 'index.html'), htmlReport);\n    \n    // Print summary\n    console.log(chalk.green('\\\\n✅ Complete Feature Test Report Generated!'));\n    console.log(chalk.blue(`📁 Results Directory: ${this.screenshotDir}`));\n    console.log(chalk.blue(`📊 Summary: ${summary.passed} passed, ${summary.failed} failed, ${summary.warnings} warnings`));\n    console.log(chalk.blue(`📈 Pass Rate: ${report.passRate}%`));\n    \n    // Print category breakdown\n    console.log(chalk.yellow('\\\\n📋 Category Breakdown:'));\n    report.categories.forEach(cat => {\n      const passRate = Math.round((cat.passed / cat.tests.length) * 100);\n      console.log(chalk.gray(`  ${cat.name}: ${cat.passed}/${cat.tests.length} passed (${passRate}%)`));\n    });\n    \n    return report;\n  }\n\n  generateHTMLReport(report: any): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Complete Feature Test Report</title>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }\n    .summary { background: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n    .metric { display: inline-block; margin: 10px; padding: 10px; background: white; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n    .category { margin: 20px 0; }\n    .test-result { margin: 10px 0; padding: 15px; border-radius: 4px; border-left: 4px solid; }\n    .test-pass { background: #d4edda; border-color: #28a745; }\n    .test-fail { background: #f8d7da; border-color: #dc3545; }\n    .test-warning { background: #fff3cd; border-color: #ffc107; }\n    h1 { color: #333; }\n    h2 { color: #555; border-bottom: 2px solid #eee; padding-bottom: 10px; }\n    .timestamp { color: #666; font-size: 0.9em; }\n  </style>\n</head>\n<body>\n  <h1>🚀 Complete Feature Test Report</h1>\n  <p class=\"timestamp\">Generated: ${new Date(report.timestamp).toLocaleString()}</p>\n  \n  <div class=\"summary\">\n    <h2>📊 Executive Summary</h2>\n    <div class=\"metric\"><strong>${report.summary.totalTests}</strong><br>Total Tests</div>\n    <div class=\"metric\"><strong>${report.summary.passed}</strong><br>Passed</div>\n    <div class=\"metric\"><strong>${report.summary.failed}</strong><br>Failed</div>\n    <div class=\"metric\"><strong>${report.summary.warnings}</strong><br>Warnings</div>\n    <div class=\"metric\"><strong>${report.passRate}%</strong><br>Pass Rate</div>\n  </div>\n\n  <h2>📋 Test Results by Category</h2>\n  ${report.categories.map(cat => `\n    <div class=\"category\">\n      <h3>${cat.name} (${cat.passed}/${cat.tests.length} passed)</h3>\n      ${cat.tests.map(test => `\n        <div class=\"test-result test-${test.status.toLowerCase()}\">\n          <strong>${test.testName}</strong> - ${test.status}<br>\n          <small>User: ${test.userType}</small><br>\n          ${test.message}\n          ${test.screenshot ? `<br><small>Screenshot: ${test.screenshot}</small>` : ''}\n        </div>\n      `).join('')}\n    </div>\n  `).join('')}\n\n  <div style=\"margin-top: 40px; padding: 20px; background: #f8f9fa; border-radius: 8px;\">\n    <h2>📁 File Locations</h2>\n    <p><strong>Screenshots:</strong> ${this.screenshotDir}</p>\n    <p><strong>JSON Report:</strong> ${path.join(this.screenshotDir, 'complete-feature-report.json')}</p>\n  </div>\n</body>\n</html>\n    `;\n  }\n\n  async run() {\n    try {\n      await this.init();\n      await this.testBackendAPIs();\n      await this.testCookieConsent();\n      await this.testAuthentication();\n      await this.testAdminFunctionality();\n      await this.testSearchFunctionality();\n      await this.testPremiumFeatures();\n      await this.testGamificationFeatures();\n      await this.testResponsiveDesign();\n      await this.generateReport();\n      \n    } catch (error) {\n      console.error(chalk.red('❌ Test failed:'), error);\n    } finally {\n      if (this.browser) {\n        await this.browser.close();\n      }\n    }\n  }\n}\n\nconst tester = new CompleteFeatureTester();\ntester.run().catch(console.error);"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**import { promisify } from 'util';\nimport fs from 'fs';\nimport path from 'pathnode:path;\n\nconst execAsync = promisify(exec);\nconst tester = new CompleteFeatureTester();\ntester.run().catch(console.error);","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":18}},{"diffOp":{"equal":{"range":[23,95]}}},{"diffOp":{"equal":{"range":[95,96]}}},{"diffOp":{"delete":{"range":[96,100]}}},{"diffOp":{"insert":{"range":[100,109]}}},{"diffOp":{"equal":{"range":[95,96]}}},{"diffOp":{"equal":{"range":[109,146]}}},{"equalLines":{"line_count":651}},{"diffOp":{"equal":{"range":[146,225]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/complete-feature-test.ts"},"span":[615,621],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * COMPLETE FEATURE TEST\n * \n * This script tests all major features of the application:\n * 1. Cookie consent functionality\n * 2. Authentication flows (including OAuth vs regular sign-up)\n * 3. Admin functionality\n * 4. Free user limitations \n * 5. Premium user 42-section components\n * 6. Gamification features\n * 7. Search functionality\n * 8. Responsive design\n * 9. API endpoints\n * 10. Backend integration\n */\n\nimport chalk from 'chalk';\nimport { chromium } from 'playwright';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs';\nimport path from 'path';\n\nconst execAsync = promisify(exec);\n\ninterface TestResult {\n  category: string;\n  testName: string;\n  userType: string;\n  status: 'PASS' | 'FAIL' | 'WARNING';\n  message: string;\n  screenshot?: string;\n  details?: any;\n}\n\nclass CompleteFeatureTester {\n  private browser: any;\n  private results: TestResult[] = [];\n  private screenshotDir: string;\n  private baseUrl = 'http://localhost:5173';\n  private apiUrl = 'http://localhost:3001';\n\n  constructor() {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    this.screenshotDir = path.join(process.cwd(), 'complete-feature-test', timestamp);\n    fs.mkdirSync(this.screenshotDir, { recursive: true });\n  }\n\n  async init() {\n    this.browser = await chromium.launch({\n      headless: false,\n      slowMo: 500,\n    });\n    console.log(chalk.blue('🚀 Starting Complete Feature Test...'));\n  }\n\n  async takeScreenshot(page: any, name: string, userType: string = 'guest'): Promise<string> {\n    const filename = `${userType}-${name}-${Date.now()}.png`;\n    const filepath = path.join(this.screenshotDir, filename);\n    await page.screenshot({ path: filepath, fullPage: true });\n    return filename;\n  }\n\n  addResult(result: TestResult) {\n    this.results.push(result);\n    const color = result.status === 'PASS' ? 'green' : result.status === 'FAIL' ? 'red' : 'yellow';\n    console.log(chalk[color](`${result.status}: [${result.category}] ${result.testName} (${result.userType}) - ${result.message}`));\n  }\n\n  async dismissCookieBanner(page: any) {\n    try {\n      // Check if cookie banner is visible and dismiss it\n      const cookieBanner = await page.locator('[data-testid=\"cookie-banner\"], .cookie-banner, [role=\"dialog\"]:has-text(\"cookie\")').first();\n      if (await cookieBanner.isVisible()) {\n        const acceptButton = await page.locator('button:has-text(\"Accept\"), button:has-text(\"Accept All\"), button:has-text(\"OK\")').first();\n        if (await acceptButton.isVisible()) {\n          await acceptButton.click();\n          await page.waitForTimeout(1000);\n        }\n      }\n    } catch (error) {\n      // Cookie banner might not be present, continue\n    }\n  }\n\n  // ========== BACKEND API TESTS ==========\n  async testBackendAPIs() {\n    console.log(chalk.blue('\\\\n🔌 Testing Backend APIs...'));\n    \n    const endpoints = [\n      { path: '/api/health', name: 'Health Check' },\n      { path: '/api/categories', name: 'Categories' },\n      { path: '/api/terms', name: 'Terms' },\n      { path: '/api/search/suggestions', name: 'Search Suggestions' },\n      { path: '/api/enhanced/terms', name: 'Enhanced Terms' },\n      { path: '/api/auth/check', name: 'Auth Check' },\n    ];\n\n    for (const endpoint of endpoints) {\n      try {\n        const { stdout, stderr } = await execAsync(`curl -s -w \"%{http_code}\" -o /dev/null ${this.apiUrl}${endpoint.path}`);\n        const statusCode = stdout.trim();\n        \n        this.addResult({\n          category: 'Backend API',\n          testName: endpoint.name,\n          userType: 'system',\n          status: statusCode.startsWith('2') ? 'PASS' : statusCode.startsWith('4') ? 'WARNING' : 'FAIL',\n          message: `HTTP ${statusCode}`,\n          details: { endpoint: endpoint.path, statusCode }\n        });\n        \n      } catch (error) {\n        this.addResult({\n          category: 'Backend API',\n          testName: endpoint.name,\n          userType: 'system',\n          status: 'FAIL',\n          message: `Connection failed: ${error}`,\n          details: { endpoint: endpoint.path, error }\n        });\n      }\n    }\n  }\n\n  // ========== COOKIE CONSENT TESTS ==========\n  async testCookieConsent() {\n    console.log(chalk.blue('\\\\n🍪 Testing Cookie Consent...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(this.baseUrl);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'homepage-initial');\n      \n      // Check for cookie consent implementation\n      const cookieElements = await page.locator('[class*=\"cookie\"], [data-testid*=\"cookie\"], [aria-label*=\"cookie\"]').count();\n      const posthogScript = await page.locator('script[src*=\"posthog\"]').count();\n      const gaScript = await page.locator('script[src*=\"google\"], script[src*=\"analytics\"]').count();\n      \n      this.addResult({\n        category: 'Cookie Consent',\n        testName: 'Cookie Implementation',\n        userType: 'guest',\n        status: (cookieElements > 0 || posthogScript > 0 || gaScript > 0) ? 'PASS' : 'WARNING',\n        message: `Cookie elements: ${cookieElements}, Analytics scripts: ${posthogScript + gaScript}`,\n        screenshot,\n        details: { cookieElements, posthogScript, gaScript }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Cookie Consent',\n        testName: 'Cookie Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== AUTHENTICATION TESTS ==========\n  async testAuthentication() {\n    console.log(chalk.blue('\\\\n🔐 Testing Authentication Systems...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/login`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      // Dismiss cookie banner if present\n      await this.dismissCookieBanner(page);\n      \n      const screenshot = await this.takeScreenshot(page, 'login-page');\n      \n      // Test OAuth vs Regular Sign-up\n      const googleButton = await page.locator('text=\"Continue with Google\"').isVisible();\n      const githubButton = await page.locator('text=\"Continue with GitHub\"').isVisible();\n      const emailSignUp = await page.locator('[role=\"tab\"]:has-text(\"Sign Up\")').isVisible();\n      const emailSignIn = await page.locator('[role=\"tab\"]:has-text(\"Sign In\")').isVisible();\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'OAuth vs Regular Sign-up',\n        userType: 'guest',\n        status: (googleButton && githubButton && emailSignUp) ? 'PASS' : 'WARNING',\n        message: `OAuth: Google ${googleButton ? '✓' : '✗'}, GitHub ${githubButton ? '✓' : '✗'}, Email Sign-up: ${emailSignUp ? '✓' : '✗'}`,\n        screenshot,\n        details: { googleButton, githubButton, emailSignUp, emailSignIn }\n      });\n\n      // Test Development Test Users\n      const testUsersTab = await page.locator('[role=\"tab\"]:has-text(\"Test Users\")').isVisible();\n      \n      if (testUsersTab) {\n        await page.click('[role=\"tab\"]:has-text(\"Test Users\")');\n        await page.waitForTimeout(2000);\n        \n        const testUsersScreenshot = await this.takeScreenshot(page, 'test-users-tab');\n        \n        const useAccountButtons = await page.locator('button:has-text(\"Use This Account\")').count();\n        const userTypes = await page.locator('text=\"Regular User\", text=\"Premium User\", text=\"Admin User\"').count();\n        \n        this.addResult({\n          category: 'Authentication',\n          testName: 'Test Users Feature',\n          userType: 'development',\n          status: (useAccountButtons >= 3 && userTypes >= 3) ? 'PASS' : 'WARNING',\n          message: `Found ${useAccountButtons} test accounts, ${userTypes} user types`,\n          screenshot: testUsersScreenshot,\n          details: { useAccountButtons, userTypes }\n        });\n\n        // Test actual login flow (dismiss cookie banner first)\n        await this.dismissCookieBanner(page);\n        await this.testLoginFlow(page);\n      }\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Authentication',\n        testName: 'Authentication Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  async testLoginFlow(page: any) {\n    try {\n      // Click first \"Use This Account\" button\n      await page.click('button:has-text(\"Use This Account\")');\n      await page.waitForTimeout(2000);\n      \n      // Switch to Sign In tab\n      await page.click('[role=\"tab\"]:has-text(\"Sign In\")');\n      await page.waitForTimeout(2000);\n      \n      const formScreenshot = await this.takeScreenshot(page, 'login-form-filled');\n      \n      // Check form population\n      const emailValue = await page.inputValue('input[type=\"email\"]').catch(() => '');\n      const passwordValue = await page.inputValue('input[type=\"password\"]').catch(() => '');\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'Form Auto-Population',\n        userType: 'free',\n        status: (emailValue.includes('@') && passwordValue.length > 0) ? 'PASS' : 'FAIL',\n        message: `Email: ${emailValue}, Password: ${passwordValue ? 'filled' : 'empty'}`,\n        screenshot: formScreenshot\n      });\n      \n      // Attempt login\n      const submitButton = await page.locator('button[type=\"submit\"]').first();\n      await submitButton.click();\n      \n      // Wait for login response - increased timeout for authentication\n      await page.waitForTimeout(10000);\n      \n      // Check for any error messages on the page\n      const errorMessages = await page.locator('[role=\"alert\"], .error, .destructive').allTextContents();\n      \n      const afterLoginScreenshot = await this.takeScreenshot(page, 'after-login-attempt');\n      const currentUrl = page.url();\n      const loginSuccess = currentUrl.includes('/dashboard') || currentUrl.includes('/admin') || !currentUrl.includes('/login');\n      \n      this.addResult({\n        category: 'Authentication',\n        testName: 'Login Flow',\n        userType: 'free',\n        status: loginSuccess ? 'PASS' : 'FAIL',\n        message: `Post-login URL: ${currentUrl}${errorMessages.length > 0 ? ` | Errors: ${errorMessages.join(', ')}` : ''}`,\n        screenshot: afterLoginScreenshot,\n        details: { currentUrl, loginSuccess, errorMessages }\n      });\n      \n      return loginSuccess;\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Authentication',\n        testName: 'Login Flow',\n        userType: 'free',\n        status: 'FAIL',\n        message: `Login error: ${error}`\n      });\n      return false;\n    }\n  }\n\n  // ========== ADMIN FUNCTIONALITY TESTS ==========\n  async testAdminFunctionality() {\n    console.log(chalk.blue('\\\\n🔧 Testing Admin Functionality...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      // Try accessing admin page directly\n      await page.goto(`${this.baseUrl}/admin`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'admin-page');\n      \n      // Check admin page elements\n      const adminElements = {\n        dashboard: await page.locator('text=\"Admin Dashboard\", .admin-dashboard, [data-testid*=\"admin\"]').count(),\n        generateButton: await page.locator('button:has-text(\"Generate\"), button[data-testid*=\"generate\"]').count(),\n        userManagement: await page.locator('text=\"User Management\", text=\"Users\"').count(),\n        contentManagement: await page.locator('text=\"Content Management\", text=\"Content\"').count(),\n        analytics: await page.locator('text=\"Analytics\", text=\"Statistics\"').count()\n      };\n      \n      const adminFeaturesFound = Object.values(adminElements).reduce((sum, count) => sum + count, 0);\n      \n      this.addResult({\n        category: 'Admin Functionality',\n        testName: 'Admin Dashboard',\n        userType: 'admin',\n        status: adminFeaturesFound > 0 ? 'PASS' : 'WARNING',\n        message: `Found ${adminFeaturesFound} admin features`,\n        screenshot,\n        details: adminElements\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Admin Functionality',\n        testName: 'Admin Test',\n        userType: 'admin',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== SEARCH FUNCTIONALITY TESTS ==========\n  async testSearchFunctionality() {\n    console.log(chalk.blue('\\\\n🔍 Testing Search Functionality...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/terms`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'search-page');\n      \n      // Check search elements\n      const searchInput = await page.locator('input[type=\"text\"], input[placeholder*=\"search\"]').count();\n      const searchButton = await page.locator('button:has-text(\"Search\"), button[type=\"submit\"]').count();\n      const filters = await page.locator('button:has-text(\"Filter\"), .filter-button').count();\n      const aiSearch = await page.locator('text=\"AI Search\", input[type=\"checkbox\"]').count();\n      \n      this.addResult({\n        category: 'Search',\n        testName: 'Search Interface',\n        userType: 'guest',\n        status: searchInput > 0 ? 'PASS' : 'FAIL',\n        message: `Search input: ${searchInput}, Button: ${searchButton}, Filters: ${filters}, AI Search: ${aiSearch}`,\n        screenshot,\n        details: { searchInput, searchButton, filters, aiSearch }\n      });\n      \n      // Test search functionality\n      if (searchInput > 0) {\n        await page.fill('input[type=\"text\"], input[placeholder*=\"search\"]', 'neural network');\n        await page.waitForTimeout(2000);\n        \n        const searchResultsScreenshot = await this.takeScreenshot(page, 'search-results');\n        \n        const results = await page.locator('.search-result, .term-card, .result-item').count();\n        const emptyState = await page.locator('text=\"No results\", text=\"no terms\", .empty-state').count();\n        \n        this.addResult({\n          category: 'Search',\n          testName: 'Search Results',\n          userType: 'guest',\n          status: (results > 0 || emptyState > 0) ? 'PASS' : 'WARNING',\n          message: `Results: ${results}, Empty state: ${emptyState}`,\n          screenshot: searchResultsScreenshot,\n          details: { results, emptyState }\n        });\n      }\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Search',\n        testName: 'Search Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== PREMIUM FEATURES TESTS ==========\n  async testPremiumFeatures() {\n    console.log(chalk.blue('\\\\n💎 Testing Premium Features...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      // Try accessing a term page to check for premium features\n      await page.goto(`${this.baseUrl}/terms`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'premium-features');\n      \n      // Check for premium indicators\n      const premiumBadges = await page.locator('text=\"Premium\", text=\"PRO\", .premium-badge').count();\n      const upgradePrompts = await page.locator('button:has-text(\"Upgrade\"), button:has-text(\"Get Premium\")').count();\n      const lockedContent = await page.locator('.locked, .premium-only, text=\"Premium Only\"').count();\n      const sections42 = await page.locator('[data-testid*=\"section\"], .section, .accordion-item').count();\n      \n      this.addResult({\n        category: 'Premium Features',\n        testName: '42-Section Components',\n        userType: 'premium',\n        status: sections42 > 10 ? 'PASS' : 'WARNING',\n        message: `Found ${sections42} sections, Premium badges: ${premiumBadges}, Upgrade prompts: ${upgradePrompts}`,\n        screenshot,\n        details: { sections42, premiumBadges, upgradePrompts, lockedContent }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Premium Features',\n        testName: 'Premium Test',\n        userType: 'premium',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== GAMIFICATION TESTS ==========\n  async testGamificationFeatures() {\n    console.log(chalk.blue('\\\\n🎮 Testing Gamification Features...'));\n    const page = await this.browser.newPage();\n    \n    try {\n      await page.goto(`${this.baseUrl}/dashboard`);\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      const screenshot = await this.takeScreenshot(page, 'gamification');\n      \n      // Check for gamification elements\n      const progressBars = await page.locator('.progress-bar, [role=\"progressbar\"]').count();\n      const achievements = await page.locator('.achievement, .badge, .trophy').count();\n      const streaks = await page.locator('text*=\"streak\", .streak-counter').count();\n      const levels = await page.locator('text*=\"level\", .level-indicator').count();\n      const points = await page.locator('text*=\"points\", .points-counter').count();\n      \n      const gamificationElements = progressBars + achievements + streaks + levels + points;\n      \n      this.addResult({\n        category: 'Gamification',\n        testName: 'Gamification Elements',\n        userType: 'user',\n        status: gamificationElements > 0 ? 'PASS' : 'WARNING',\n        message: `Progress: ${progressBars}, Achievements: ${achievements}, Streaks: ${streaks}, Levels: ${levels}, Points: ${points}`,\n        screenshot,\n        details: { progressBars, achievements, streaks, levels, points }\n      });\n      \n    } catch (error) {\n      this.addResult({\n        category: 'Gamification',\n        testName: 'Gamification Test',\n        userType: 'user',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  // ========== RESPONSIVE DESIGN TESTS ==========\n  async testResponsiveDesign() {\n    console.log(chalk.blue('\\\\n📱 Testing Responsive Design...'));\n    \n    const viewports = [\n      { name: 'mobile', width: 375, height: 812 },\n      { name: 'tablet', width: 768, height: 1024 },\n      { name: 'desktop', width: 1920, height: 1080 }\n    ];\n    \n    for (const viewport of viewports) {\n      const page = await this.browser.newPage();\n      await page.setViewportSize(viewport);\n      \n      try {\n        await page.goto(this.baseUrl);\n        await page.waitForLoadState('domcontentloaded');\n        await page.waitForTimeout(2000);\n        \n        const screenshot = await this.takeScreenshot(page, `responsive-${viewport.name}`);\n        \n        // Check responsive elements\n        const header = await page.locator('header').first().isVisible();\n        const nav = await page.locator('nav[role=\"navigation\"]').first().isVisible();\n        const menuButton = await page.locator('button[aria-label*=\"menu\"], .hamburger').first().isVisible();\n        \n        this.addResult({\n          category: 'Responsive Design',\n          testName: `${viewport.name} Layout`,\n          userType: 'guest',\n          status: header ? 'PASS' : 'WARNING',\n          message: `Header: ${header ? '✓' : '✗'}, Nav: ${nav ? '✓' : '✗'}, Menu: ${menuButton ? '✓' : '✗'}`,\n          screenshot,\n          details: { header, nav, menuButton, viewport }\n        });\n        \n      } catch (error) {\n        this.addResult({\n          category: 'Responsive Design',\n          testName: `${viewport.name} Test`,\n          userType: 'guest',\n          status: 'FAIL',\n          message: `Error: ${error}`\n        });\n      } finally {\n        await page.close();\n      }\n    }\n  }\n\n  // ========== GENERATE COMPREHENSIVE REPORT ==========\n  async generateReport() {\n    console.log(chalk.yellow('\\\\n📝 Generating Comprehensive Report...'));\n    \n    const categories = [...new Set(this.results.map(r => r.category))];\n    const summary = {\n      totalTests: this.results.length,\n      passed: this.results.filter(r => r.status === 'PASS').length,\n      failed: this.results.filter(r => r.status === 'FAIL').length,\n      warnings: this.results.filter(r => r.status === 'WARNING').length,\n      categories: categories.length\n    };\n    \n    const report = {\n      timestamp: new Date().toISOString(),\n      summary,\n      passRate: Math.round((summary.passed / summary.totalTests) * 100),\n      categories: categories.map(cat => ({\n        name: cat,\n        tests: this.results.filter(r => r.category === cat),\n        passed: this.results.filter(r => r.category === cat && r.status === 'PASS').length,\n        failed: this.results.filter(r => r.category === cat && r.status === 'FAIL').length,\n        warnings: this.results.filter(r => r.category === cat && r.status === 'WARNING').length\n      })),\n      allResults: this.results\n    };\n    \n    // Save JSON report\n    const reportPath = path.join(this.screenshotDir, 'complete-feature-report.json');\n    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n    \n    // Generate HTML report\n    const htmlReport = this.generateHTMLReport(report);\n    fs.writeFileSync(path.join(this.screenshotDir, 'index.html'), htmlReport);\n    \n    // Print summary\n    console.log(chalk.green('\\\\n✅ Complete Feature Test Report Generated!'));\n    console.log(chalk.blue(`📁 Results Directory: ${this.screenshotDir}`));\n    console.log(chalk.blue(`📊 Summary: ${summary.passed} passed, ${summary.failed} failed, ${summary.warnings} warnings`));\n    console.log(chalk.blue(`📈 Pass Rate: ${report.passRate}%`));\n    \n    // Print category breakdown\n    console.log(chalk.yellow('\\\\n📋 Category Breakdown:'));\n    report.categories.forEach(cat => {\n      const passRate = Math.round((cat.passed / cat.tests.length) * 100);\n      console.log(chalk.gray(`  ${cat.name}: ${cat.passed}/${cat.tests.length} passed (${passRate}%)`));\n    });\n    \n    return report;\n  }\n\n  generateHTMLReport(report: any): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Complete Feature Test Report</title>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }\n    .summary { background: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n    .metric { display: inline-block; margin: 10px; padding: 10px; background: white; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n    .category { margin: 20px 0; }\n    .test-result { margin: 10px 0; padding: 15px; border-radius: 4px; border-left: 4px solid; }\n    .test-pass { background: #d4edda; border-color: #28a745; }\n    .test-fail { background: #f8d7da; border-color: #dc3545; }\n    .test-warning { background: #fff3cd; border-color: #ffc107; }\n    h1 { color: #333; }\n    h2 { color: #555; border-bottom: 2px solid #eee; padding-bottom: 10px; }\n    .timestamp { color: #666; font-size: 0.9em; }\n  </style>\n</head>\n<body>\n  <h1>🚀 Complete Feature Test Report</h1>\n  <p class=\"timestamp\">Generated: ${new Date(report.timestamp).toLocaleString()}</p>\n  \n  <div class=\"summary\">\n    <h2>📊 Executive Summary</h2>\n    <div class=\"metric\"><strong>${report.summary.totalTests}</strong><br>Total Tests</div>\n    <div class=\"metric\"><strong>${report.summary.passed}</strong><br>Passed</div>\n    <div class=\"metric\"><strong>${report.summary.failed}</strong><br>Failed</div>\n    <div class=\"metric\"><strong>${report.summary.warnings}</strong><br>Warnings</div>\n    <div class=\"metric\"><strong>${report.passRate}%</strong><br>Pass Rate</div>\n  </div>\n\n  <h2>📋 Test Results by Category</h2>\n  ${report.categories.map(cat => `\n    <div class=\"category\">\n      <h3>${cat.name} (${cat.passed}/${cat.tests.length} passed)</h3>\n      ${cat.tests.map(test => `\n        <div class=\"test-result test-${test.status.toLowerCase()}\">\n          <strong>${test.testName}</strong> - ${test.status}<br>\n          <small>User: ${test.userType}</small><br>\n          ${test.message}\n          ${test.screenshot ? `<br><small>Screenshot: ${test.screenshot}</small>` : ''}\n        </div>\n      `).join('')}\n    </div>\n  `).join('')}\n\n  <div style=\"margin-top: 40px; padding: 20px; background: #f8f9fa; border-radius: 8px;\">\n    <h2>📁 File Locations</h2>\n    <p><strong>Screenshots:</strong> ${this.screenshotDir}</p>\n    <p><strong>JSON Report:</strong> ${path.join(this.screenshotDir, 'complete-feature-report.json')}</p>\n  </div>\n</body>\n</html>\n    `;\n  }\n\n  async run() {\n    try {\n      await this.init();\n      await this.testBackendAPIs();\n      await this.testCookieConsent();\n      await this.testAuthentication();\n      await this.testAdminFunctionality();\n      await this.testSearchFunctionality();\n      await this.testPremiumFeatures();\n      await this.testGamificationFeatures();\n      await this.testResponsiveDesign();\n      await this.generateReport();\n      \n    } catch (error) {\n      console.error(chalk.red('❌ Test failed:'), error);\n    } finally {\n      if (this.browser) {\n        await this.browser.close();\n      }\n    }\n  }\n}\n\nconst tester = new CompleteFeatureTester();\ntester.run().catch(console.error);"},"tags":["fixable"],"source":null},{"category":"lint/style/useTemplate","severity":"information","description":"Template literals are preferred over string concatenation.","message":[{"elements":["Emphasis"],"content":"Template"},{"elements":[],"content":" literals are preferred over "},{"elements":["Emphasis"],"content":"string concatenation."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Unsafe fix: Use a "},{"elements":["Emphasis"],"content":"template literal"},{"elements":[],"content":"."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';async function completeReset() {\n  console.log('🗑 COMPLETE DATABASE RESET - FORCE CLEARING ALL DATA');\n  console.log('`=' + ${'='.repeat(60)}`);\n\n  try {\ncompleteReset().catch(console.error);\n","ops":[{"diffOp":{"equal":{"range":[0,54]}}},{"equalLines":{"line_count":2}},{"diffOp":{"equal":{"range":[54,177]}}},{"diffOp":{"delete":{"range":[177,178]}}},{"diffOp":{"insert":{"range":[178,179]}}},{"diffOp":{"equal":{"range":[179,180]}}},{"diffOp":{"delete":{"range":[180,184]}}},{"diffOp":{"insert":{"range":[184,186]}}},{"diffOp":{"equal":{"range":[186,200]}}},{"diffOp":{"insert":{"range":[200,202]}}},{"diffOp":{"equal":{"range":[202,213]}}},{"equalLines":{"line_count":170}},{"diffOp":{"equal":{"range":[213,252]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/complete-reset.ts"},"span":[217,237],"sourceCode":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';\nimport { db } from '../server/db.js';\n\nasync function completeReset() {\n  console.log('🗑 COMPLETE DATABASE RESET - FORCE CLEARING ALL DATA');\n  console.log('=' + '='.repeat(60));\n\n  try {\n    console.log('\\n! This will DELETE ALL DATA except user accounts');\n    console.log('📁 Data has been backed up to: backups/pre-fresh-start-*\\n');\n\n    // Strategy: Drop and recreate problematic tables to bypass FK constraints\n    const problematicTables = [\n      {\n        name: 'enhanced_terms',\n        createSql: `\n          CREATE TABLE enhanced_terms (\n            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n            name VARCHAR(200) NOT NULL UNIQUE,\n            slug VARCHAR(250) NOT NULL UNIQUE,\n            short_definition TEXT,\n            full_definition TEXT NOT NULL,\n            main_categories TEXT[] DEFAULT '{}',\n            sub_categories TEXT[] DEFAULT '{}',\n            related_concepts TEXT[] DEFAULT '{}',\n            application_domains TEXT[] DEFAULT '{}',\n            techniques TEXT[] DEFAULT '{}',\n            difficulty_level VARCHAR(20),\n            has_implementation BOOLEAN DEFAULT false,\n            has_interactive_elements BOOLEAN DEFAULT false,\n            has_case_studies BOOLEAN DEFAULT false,\n            has_code_examples BOOLEAN DEFAULT false,\n            search_text TEXT,\n            keywords TEXT[] DEFAULT '{}',\n            view_count INTEGER DEFAULT 0,\n            last_viewed TIMESTAMP,\n            parse_hash VARCHAR(32),\n            parse_version VARCHAR(10) DEFAULT '1.0',\n            created_at TIMESTAMP DEFAULT NOW(),\n            updated_at TIMESTAMP DEFAULT NOW()\n          )\n        `,\n      },\n      {\n        name: 'categories',\n        createSql: `\n          CREATE TABLE categories (\n            id SERIAL PRIMARY KEY,\n            name VARCHAR(100) NOT NULL UNIQUE,\n            description TEXT,\n            created_at TIMESTAMP DEFAULT NOW(),\n            updated_at TIMESTAMP DEFAULT NOW()\n          )\n        `,\n      },\n    ];\n\n    console.log('🔄 Step 1: Force clearing dependent tables...\\n');\n\n    // Clear all dependent tables first\n    const dependentTables = [\n      'term_sections',\n      'interactive_elements',\n      'term_relationships',\n      'term_subcategories',\n      'subcategories',\n      'term_views',\n      'user_progress',\n      'favorites',\n      'user_settings',\n    ];\n\n    for (const tableName of dependentTables) {\n      try {\n        const countResult = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM ${tableName}`));\n        const count = (countResult.rows[0] as any).count;\n\n        if (count > 0) {\n          await db.execute(sql.raw(`DELETE FROM ${tableName}`));\n          console.log(`✅ Cleared ${tableName}: ${count} records deleted`);\n        } else {\n          console.log(`✅ ${tableName}: Already empty`);\n        }\n      } catch (error: any) {\n        if (error.message.includes('does not exist')) {\n          console.log(`✅ ${tableName}: Table doesn't exist`);\n        } else {\n          console.log(`! ${tableName}: ${error.message.split('\\\\n')[0]}`);\n        }\n      }\n    }\n\n    console.log('\\n🔄 Step 2: Dropping and recreating problematic tables...\\n');\n\n    for (const { name, createSql } of problematicTables) {\n      try {\n        // Get count before dropping\n        const countResult = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM ${name}`));\n        const count = (countResult.rows[0] as any).count;\n\n        // Drop table (CASCADE will handle FK constraints)\n        await db.execute(sql.raw(`DROP TABLE IF EXISTS ${name} CASCADE`));\n        console.log(`✅ Dropped ${name}: ${count} records removed`);\n\n        // Recreate table\n        await db.execute(sql.raw(createSql));\n        console.log(`✅ Recreated ${name}: Fresh empty table`);\n      } catch (error: any) {\n        console.log(`❌ ${name}: ${error.message.split('\\\\n')[0]}`);\n      }\n    }\n\n    console.log('\\n🔄 Step 3: Final verification...\\n');\n\n    // Verify all content tables are empty\n    const allTables = [\n      'terms',\n      'enhanced_terms',\n      'categories',\n      'subcategories',\n      'term_sections',\n      'interactive_elements',\n      'term_relationships',\n      'term_subcategories',\n      'term_views',\n      'user_progress',\n      'favorites',\n      'user_settings',\n      'users',\n    ];\n\n    let totalRecords = 0;\n    let emptyCount = 0;\n\n    for (const tableName of allTables) {\n      try {\n        const result = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM ${tableName}`));\n        const count = (result.rows[0] as any).count;\n        totalRecords += count;\n\n        let status = '';\n        if (count === 0) {\n          status = tableName === 'users' ? '! EMPTY (users cleared too!)' : '✅ EMPTY';\n          emptyCount++;\n        } else if (tableName === 'users') {\n          status = '👥 PRESERVED';\n        } else {\n          status = '❌ STILL HAS DATA';\n        }\n\n        console.log(`${tableName.padEnd(20)}: ${String(count).padStart(6)} records ${status}`);\n      } catch (error: any) {\n        console.log(`${tableName.padEnd(20)}: ERROR - Table may not exist`);\n      }\n    }\n\n    console.log('-'.repeat(60));\n    console.log(`Total records remaining: ${totalRecords}`);\n    console.log(`Empty tables: ${emptyCount}/${allTables.length}`);\n\n    // Success criteria\n    const contentTables = allTables.filter((t) => t !== 'users');\n    const emptyContentTables = emptyCount - (totalRecords === 0 ? 1 : 0); // Subtract users if they're empty\n\n    if (emptyContentTables === contentTables.length) {\n      console.log('\\n🎉 SUCCESS! All content tables cleared successfully');\n      console.log('✅ Database ready for fresh 295-column structure');\n      console.log('🚀 System prepared for new content pipeline');\n    } else {\n      console.log('\\n! Some content tables still have data');\n      console.log('💡 Manual cleanup may be needed for remaining tables');\n    }\n\n    console.log('\\n📁 Original data backed up in: backups/pre-fresh-start-*');\n  } catch (error) {\n    console.error('❌ Error in complete reset:', error);\n  }\n}\n\ncompleteReset().catch(console.error);\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/** */\n\nimport { execSync } from 'child_processnode:child_process;\nimport fs from 'fs';\nimport path from 'path';}\n\nexport { ComprehensiveAuditSuite };","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":16}},{"diffOp":{"equal":{"range":[23,53]}}},{"diffOp":{"equal":{"range":[53,54]}}},{"diffOp":{"delete":{"range":[54,67]}}},{"diffOp":{"insert":{"range":[67,85]}}},{"diffOp":{"equal":{"range":[53,54]}}},{"diffOp":{"equal":{"range":[85,132]}}},{"equalLines":{"line_count":667}},{"diffOp":{"equal":{"range":[132,170]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/comprehensive-audit-suite.ts"},"span":[762,777],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * Comprehensive Audit Suite for AIGlossaryPro\n * \n * This script implements the 5-pillar audit strategy:\n * 1. Visual & Interaction Correctness (Component & Page Level)\n * 2. Accessibility (WCAG 2.1 Level AA)\n * 3. Performance (Lighthouse & React Scan)\n * 4. Functional Correctness (End-to-End Tests)\n * 5. Code Quality (ESLint, Biome)\n * \n * Usage:\n * - npm run audit:all                 # Run all audits\n * - npm run audit:visual             # Visual regression only\n * - npm run audit:accessibility      # Accessibility only\n * - npm run audit:performance        # Performance only\n * - npm run audit:functional         # Functional testing only\n * - npm run audit:code-quality       # Code quality only\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst projectRoot = path.resolve(__dirname, '..');\nconst reportsDir = path.join(projectRoot, 'reports', 'audit-suite');\n\n// Ensure reports directory exists\nif (!fs.existsSync(reportsDir)) {\n  fs.mkdirSync(reportsDir, { recursive: true });\n}\n\ninterface AuditResult {\n  pillar: string;\n  status: 'passed' | 'failed' | 'skipped';\n  duration: number;\n  summary: {\n    total: number;\n    passed: number;\n    failed: number;\n    warnings: number;\n  };\n  details: any[];\n  reportPath?: string;\n}\n\ninterface AuditSuiteResult {\n  timestamp: string;\n  totalDuration: number;\n  results: AuditResult[];\n  overallStatus: 'passed' | 'failed' | 'partial';\n  reportPath: string;\n}\n\nclass ComprehensiveAuditSuite {\n  private results: AuditResult[] = [];\n  private startTime: number = 0;\n\n  constructor() {\n    this.startTime = Date.now();\n  }\n\n  async runAll(): Promise<AuditSuiteResult> {\n    console.log('🚀 Starting Comprehensive Audit Suite...\\n');\n\n    const pillars = [\n      { name: 'visual', description: 'Visual & Interaction Correctness' },\n      { name: 'accessibility', description: 'Accessibility (WCAG 2.1 AA)' },\n      { name: 'performance', description: 'Performance Analysis' },\n      { name: 'functional', description: 'Functional Correctness' },\n      { name: 'code-quality', description: 'Code Quality & Best Practices' }\n    ];\n\n    for (const pillar of pillars) {\n      console.log(`\\n📊 Running ${pillar.description}...`);\n      const result = await this.runPillar(pillar.name);\n      this.results.push(result);\n    }\n\n    const finalResult = this.generateFinalReport();\n    console.log('\\n✨ Comprehensive Audit Suite Complete!');\n    console.log(`📄 Report available at: ${finalResult.reportPath}`);\n    \n    return finalResult;\n  }\n\n  async runPillar(pillarName: string): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      switch (pillarName) {\n        case 'visual':\n          return await this.runVisualAudit();\n        case 'accessibility':\n          return await this.runAccessibilityAudit();\n        case 'performance':\n          return await this.runPerformanceAudit();\n        case 'functional':\n          return await this.runFunctionalAudit();\n        case 'code-quality':\n          return await this.runCodeQualityAudit();\n        default:\n          throw new Error(`Unknown pillar: ${pillarName}`);\n      }\n    } catch (error) {\n      return {\n        pillar: pillarName,\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runVisualAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Component-level visual audit (Storybook)\n      console.log('  🔍 Component-level visual regression testing...');\n      const storybookResult = await this.executeCommand(\n        'npx playwright test --config=playwright.config.js --reporter=json',\n        { timeout: 300000 } // 5 minutes timeout\n      );\n\n      // Page-level visual audit\n      console.log('  🔍 Page-level visual regression testing...');\n      const pageResult = await this.executeCommand(\n        'npx playwright test --config=playwright.visual.config.ts --reporter=json',\n        { timeout: 300000 }\n      );\n\n      // Parse results\n      const componentResults = this.parsePlaywrightResults(storybookResult);\n      const pageResults = this.parsePlaywrightResults(pageResult);\n\n      return {\n        pillar: 'visual',\n        status: (componentResults.failed === 0 && pageResults.failed === 0) ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: componentResults.total + pageResults.total,\n          passed: componentResults.passed + pageResults.passed,\n          failed: componentResults.failed + pageResults.failed,\n          warnings: 0\n        },\n        details: [\n          { type: 'component', ...componentResults },\n          { type: 'page', ...pageResults }\n        ],\n        reportPath: path.join(reportsDir, 'visual-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'visual',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runAccessibilityAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  ♿ Running accessibility scan with axe-core...');\n      \n      // Run accessibility tests using Playwright with axe-core\n      const result = await this.executeCommand(\n        'npx playwright test tests/e2e/accessibility.spec.ts --reporter=json',\n        { timeout: 180000 }\n      );\n\n      const parsedResult = this.parsePlaywrightResults(result);\n      \n      return {\n        pillar: 'accessibility',\n        status: parsedResult.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: parsedResult.total,\n          passed: parsedResult.passed,\n          failed: parsedResult.failed,\n          warnings: 0\n        },\n        details: parsedResult.details || [],\n        reportPath: path.join(reportsDir, 'accessibility-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'accessibility',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runPerformanceAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  ⚡ Running performance analysis...');\n      \n      // Run React Scan for static analysis\n      console.log('    🔍 React Scan static analysis...');\n      const reactScanResult = await this.executeCommand(\n        'npx react-scan@latest --build --report --output-file=reports/audit-suite/react-scan-report.json',\n        { timeout: 120000, allowFailure: true }\n      );\n\n      // Run Lighthouse performance audit\n      console.log('    🔍 Lighthouse performance audit...');\n      const lighthouseResult = await this.executeCommand(\n        'npx playwright test tests/e2e/performance.spec.ts --reporter=json',\n        { timeout: 180000 }\n      );\n\n      const parsedResult = this.parsePlaywrightResults(lighthouseResult);\n      \n      return {\n        pillar: 'performance',\n        status: parsedResult.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: parsedResult.total,\n          passed: parsedResult.passed,\n          failed: parsedResult.failed,\n          warnings: 0\n        },\n        details: [\n          { type: 'lighthouse', ...parsedResult },\n          { type: 'react-scan', result: reactScanResult }\n        ],\n        reportPath: path.join(reportsDir, 'performance-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'performance',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runFunctionalAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  🧪 Running functional correctness tests...');\n      \n      // Run comprehensive functional tests\n      const e2eTests = [\n        'tests/e2e/authentication.spec.ts',\n        'tests/e2e/search-functionality.spec.ts',\n        'tests/e2e/navigation.spec.ts',\n        'tests/e2e/ai-features.spec.ts'\n      ];\n\n      const results = [];\n      for (const testFile of e2eTests) {\n        if (fs.existsSync(path.join(projectRoot, testFile))) {\n          const result = await this.executeCommand(\n            `npx playwright test ${testFile} --reporter=json`,\n            { timeout: 180000 }\n          );\n          results.push(this.parsePlaywrightResults(result));\n        }\n      }\n\n      const totalResults = results.reduce((acc, curr) => ({\n        total: acc.total + curr.total,\n        passed: acc.passed + curr.passed,\n        failed: acc.failed + curr.failed\n      }), { total: 0, passed: 0, failed: 0 });\n\n      return {\n        pillar: 'functional',\n        status: totalResults.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: totalResults.total,\n          passed: totalResults.passed,\n          failed: totalResults.failed,\n          warnings: 0\n        },\n        details: results,\n        reportPath: path.join(reportsDir, 'functional-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'functional',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runCodeQualityAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  📋 Running code quality analysis...');\n      \n      // Ensure reports directory exists\n      const eslintReportPath = path.join(reportsDir, 'eslint-report.json');\n      const biomeReportPath = path.join(reportsDir, 'biome-report.json');\n      \n      // Run ESLint\n      console.log('    🔍 ESLint analysis...');\n      const eslintResult = await this.executeCommand(\n        `npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ${eslintReportPath}`,\n        { allowFailure: true }\n      );\n\n      // Run Biome\n      console.log('    🔍 Biome analysis...');\n      const biomeResult = await this.executeCommand(\n        `npx biome check . --reporter json --diagnostic-level=info`,\n        { allowFailure: true }\n      );\n\n      // Write Biome results to file\n      if (biomeResult) {\n        try {\n          // Truncate very large outputs to prevent JSON parsing issues\n          const maxSize = 1024 * 1024; // 1MB limit\n          const truncatedResult = biomeResult.length > maxSize \n            ? biomeResult.substring(0, maxSize) + '...[truncated]'\n            : biomeResult;\n          fs.writeFileSync(biomeReportPath, truncatedResult);\n        } catch (error) {\n          console.log('Failed to write Biome results:', error.message);\n        }\n      }\n\n      // Run TypeScript type checking\n      console.log('    🔍 TypeScript type checking...');\n      const tscResult = await this.executeCommand(\n        'npx tsc --noEmit --skipLibCheck',\n        { allowFailure: true }\n      );\n\n      // Parse ESLint results\n      let eslintData = { total: 0, errors: 0, warnings: 0, details: [] };\n      \n      if (fs.existsSync(eslintReportPath)) {\n        try {\n          const eslintReport = JSON.parse(fs.readFileSync(eslintReportPath, 'utf8'));\n          eslintData = this.parseEslintResults(eslintReport);\n        } catch (error) {\n          console.log('Failed to parse ESLint results:', error.message);\n        }\n      }\n\n      // Parse Biome results\n      let biomeData = { total: 0, errors: 0, warnings: 0 };\n      if (fs.existsSync(biomeReportPath)) {\n        try {\n          const biomeContent = fs.readFileSync(biomeReportPath, 'utf8');\n          // Try to parse as JSON, but handle truncated content\n          if (biomeContent.includes('[truncated]')) {\n            console.log('Biome output was truncated due to size, using fallback parsing');\n            biomeData = this.parseBiomeOutputText(biomeContent);\n          } else {\n            const biomeReport = JSON.parse(biomeContent);\n            biomeData = this.parseBiomeResults(biomeReport);\n          }\n        } catch (error) {\n          console.log('Failed to parse Biome results:', error.message);\n          // Try alternative text parsing as fallback\n          try {\n            const biomeContent = fs.readFileSync(biomeReportPath, 'utf8');\n            biomeData = this.parseBiomeOutputText(biomeContent);\n          } catch (fallbackError) {\n            console.log('Fallback Biome parsing also failed:', fallbackError.message);\n          }\n        }\n      }\n\n      // Parse TypeScript results\n      const tscErrors = this.parseTscResults(tscResult);\n\n      const totalErrors = eslintData.errors + biomeData.errors + tscErrors.count;\n      const totalWarnings = eslintData.warnings + biomeData.warnings;\n      const totalIssues = eslintData.total + biomeData.total + tscErrors.count;\n\n      return {\n        pillar: 'code-quality',\n        status: totalErrors === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: totalIssues,\n          passed: totalIssues - totalErrors - totalWarnings,\n          failed: totalErrors,\n          warnings: totalWarnings\n        },\n        details: [\n          { type: 'eslint', ...eslintData },\n          { type: 'biome', ...biomeData },\n          { type: 'typescript', ...tscErrors }\n        ],\n        reportPath: path.join(reportsDir, 'code-quality-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'code-quality',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async executeCommand(command: string, options: { timeout?: number; allowFailure?: boolean } = {}): Promise<string> {\n    const { timeout = 60000, allowFailure = false } = options;\n    \n    try {\n      const result = execSync(command, {\n        encoding: 'utf8',\n        timeout,\n        cwd: projectRoot,\n        maxBuffer: 1024 * 1024 * 10 // 10MB buffer\n      });\n      return result;\n    } catch (error) {\n      if (allowFailure) {\n        return error.stdout || error.stderr || '';\n      }\n      throw error;\n    }\n  }\n\n  private parsePlaywrightResults(output: string): { total: number; passed: number; failed: number; details?: any[] } {\n    try {\n      const result = JSON.parse(output);\n      return {\n        total: result.stats?.total || 0,\n        passed: result.stats?.passed || 0,\n        failed: result.stats?.failed || 0,\n        details: result.tests || []\n      };\n    } catch {\n      // Fallback parsing for non-JSON output\n      const failedMatch = output.match(/(\\d+) failed/);\n      const passedMatch = output.match(/(\\d+) passed/);\n      \n      const failed = failedMatch ? parseInt(failedMatch[1]) : 0;\n      const passed = passedMatch ? parseInt(passedMatch[1]) : 0;\n      \n      return {\n        total: failed + passed,\n        passed,\n        failed\n      };\n    }\n  }\n\n  private parseEslintResults(eslintReport: any[]): { total: number; errors: number; warnings: number; details: any[] } {\n    const stats = eslintReport.reduce((acc, file) => {\n      acc.total += file.messages.length;\n      acc.errors += file.errorCount;\n      acc.warnings += file.warningCount;\n      \n      // Add file details for serious issues\n      if (file.errorCount > 0 || file.warningCount > 5) {\n        acc.details.push({\n          filePath: file.filePath,\n          errors: file.errorCount,\n          warnings: file.warningCount,\n          messages: file.messages.slice(0, 5) // First 5 messages only\n        });\n      }\n      \n      return acc;\n    }, { total: 0, errors: 0, warnings: 0, details: [] });\n\n    return stats;\n  }\n\n  private parseBiomeResults(biomeReport: any): { total: number; errors: number; warnings: number } {\n    // Biome report structure may vary, adapt as needed\n    let total = 0;\n    let errors = 0;\n    let warnings = 0;\n\n    if (biomeReport.diagnostics) {\n      total = biomeReport.diagnostics.length;\n      errors = biomeReport.diagnostics.filter(d => d.severity === 'error').length;\n      warnings = biomeReport.diagnostics.filter(d => d.severity === 'warning').length;\n    }\n\n    return { total, errors, warnings };\n  }\n\n  private parseBiomeOutputText(biomeOutput: string): { total: number; errors: number; warnings: number } {\n    // Fallback text parsing for when JSON parsing fails\n    let total = 0;\n    let errors = 0;\n    let warnings = 0;\n\n    const lines = biomeOutput.split('\\n');\n    \n    // Look for summary patterns in Biome output\n    const summaryLine = lines.find(line => \n      line.includes('Found') || line.includes('issues') || line.includes('diagnostics')\n    );\n    \n    if (summaryLine) {\n      const numberMatches = summaryLine.match(/\\d+/g);\n      if (numberMatches && numberMatches.length > 0) {\n        total = parseInt(numberMatches[0]);\n      }\n    }\n\n    // Count error/warning patterns\n    errors = (biomeOutput.match(/error/gi) || []).length;\n    warnings = (biomeOutput.match(/warning/gi) || []).length;\n\n    return { total: Math.max(total, errors + warnings), errors, warnings };\n  }\n\n  private parseTscResults(tscOutput: string): { count: number; errors: string[] } {\n    if (!tscOutput) {\n      return { count: 0, errors: [] };\n    }\n\n    const lines = tscOutput.split('\\n').filter(line => line.includes('error TS'));\n    return {\n      count: lines.length,\n      errors: lines.slice(0, 10) // First 10 errors only\n    };\n  }\n\n  private generateFinalReport(): AuditSuiteResult {\n    const totalDuration = Date.now() - this.startTime;\n    const timestamp = new Date().toISOString();\n    \n    // Calculate overall status\n    const failedPillars = this.results.filter(r => r.status === 'failed').length;\n    const overallStatus = failedPillars === 0 ? 'passed' : (failedPillars < this.results.length ? 'partial' : 'failed');\n\n    // Generate HTML report\n    const reportPath = this.generateHtmlReport(timestamp, totalDuration, overallStatus);\n\n    return {\n      timestamp,\n      totalDuration,\n      results: this.results,\n      overallStatus,\n      reportPath\n    };\n  }\n\n  private generateHtmlReport(timestamp: string, duration: number, overallStatus: string): string {\n    const reportPath = path.join(reportsDir, `comprehensive-audit-${Date.now()}.html`);\n    \n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Comprehensive Audit Report - AIGlossaryPro</title>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }\n        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; padding: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { text-align: center; margin-bottom: 30px; }\n        .status { display: inline-block; padding: 8px 16px; border-radius: 4px; font-weight: bold; }\n        .status.passed { background: #d4edda; color: #155724; }\n        .status.failed { background: #f8d7da; color: #721c24; }\n        .status.partial { background: #fff3cd; color: #856404; }\n        .pillar { margin: 20px 0; padding: 20px; border-left: 4px solid #007bff; background: #f8f9fa; }\n        .pillar.failed { border-left-color: #dc3545; }\n        .pillar.passed { border-left-color: #28a745; }\n        .summary { display: flex; gap: 20px; margin: 10px 0; }\n        .metric { text-align: center; }\n        .metric-value { font-size: 24px; font-weight: bold; }\n        .metric-label { font-size: 12px; color: #666; }\n        .details { margin-top: 15px; }\n        .details summary { cursor: pointer; font-weight: bold; }\n        .details pre { background: #f1f1f1; padding: 10px; border-radius: 4px; overflow-x: auto; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🔍 Comprehensive Audit Report</h1>\n            <p><strong>AIGlossaryPro</strong> - ${timestamp}</p>\n            <div class=\"status ${overallStatus}\">${overallStatus.toUpperCase()}</div>\n            <p>Total Duration: ${(duration / 1000).toFixed(2)}s</p>\n        </div>\n\n        <div class=\"executive-summary\">\n            <h2>📊 Executive Summary</h2>\n            <div class=\"summary\">\n                ${this.results.map(result => `\n                    <div class=\"metric\">\n                        <div class=\"metric-value ${result.status === 'passed' ? 'text-success' : 'text-danger'}\">${result.summary.total}</div>\n                        <div class=\"metric-label\">${result.pillar}</div>\n                    </div>\n                `).join('')}\n            </div>\n        </div>\n\n        ${this.results.map(result => `\n            <div class=\"pillar ${result.status}\">\n                <h3>${this.getPillarTitle(result.pillar)} ${result.status === 'passed' ? '✅' : '❌'}</h3>\n                <div class=\"summary\">\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.total}</div>\n                        <div class=\"metric-label\">Total</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.passed}</div>\n                        <div class=\"metric-label\">Passed</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.failed}</div>\n                        <div class=\"metric-label\">Failed</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.warnings}</div>\n                        <div class=\"metric-label\">Warnings</div>\n                    </div>\n                </div>\n                <p><strong>Duration:</strong> ${(result.duration / 1000).toFixed(2)}s</p>\n                \n                <details class=\"details\">\n                    <summary>View Details</summary>\n                    <pre>${JSON.stringify(result.details, null, 2)}</pre>\n                </details>\n            </div>\n        `).join('')}\n\n        <div class=\"footer\">\n            <p><em>Generated by AIGlossaryPro Comprehensive Audit Suite</em></p>\n        </div>\n    </div>\n</body>\n</html>`;\n\n    fs.writeFileSync(reportPath, html);\n    return reportPath;\n  }\n\n  private getPillarTitle(pillar: string): string {\n    const titles = {\n      'visual': '🎨 Visual & Interaction Correctness',\n      'accessibility': '♿ Accessibility (WCAG 2.1 AA)',\n      'performance': '⚡ Performance Analysis',\n      'functional': '🧪 Functional Correctness',\n      'code-quality': '📋 Code Quality & Best Practices'\n    };\n    return titles[pillar] || pillar;\n  }\n}\n\n// CLI Interface\nasync function main() {\n  const args = process.argv.slice(2);\n  const pillar = args[0];\n\n  const suite = new ComprehensiveAuditSuite();\n\n  if (pillar && pillar !== 'all') {\n    console.log(`🚀 Running ${pillar} audit...`);\n    const result = await suite.runPillar(pillar);\n    console.log(`✨ ${pillar} audit complete!`);\n    console.log(`Status: ${result.status}`);\n    console.log(`Duration: ${(result.duration / 1000).toFixed(2)}s`);\n    console.log(`Summary: ${result.summary.passed}/${result.summary.total} passed`);\n  } else {\n    await suite.runAll();\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error);\n}\n\nexport { ComprehensiveAuditSuite };"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**\nimport { execSync } from 'child_process';\nimport fs from 'fsnode:fs;\nimport path from 'path';\nimport { fileURLToPath } from 'url';}\n\nexport { ComprehensiveAuditSuite };","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":17}},{"diffOp":{"equal":{"range":[23,81]}}},{"diffOp":{"equal":{"range":[81,82]}}},{"diffOp":{"delete":{"range":[82,84]}}},{"diffOp":{"insert":{"range":[84,91]}}},{"diffOp":{"equal":{"range":[81,82]}}},{"diffOp":{"equal":{"range":[91,154]}}},{"equalLines":{"line_count":666}},{"diffOp":{"equal":{"range":[154,192]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/comprehensive-audit-suite.ts"},"span":[794,798],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * Comprehensive Audit Suite for AIGlossaryPro\n * \n * This script implements the 5-pillar audit strategy:\n * 1. Visual & Interaction Correctness (Component & Page Level)\n * 2. Accessibility (WCAG 2.1 Level AA)\n * 3. Performance (Lighthouse & React Scan)\n * 4. Functional Correctness (End-to-End Tests)\n * 5. Code Quality (ESLint, Biome)\n * \n * Usage:\n * - npm run audit:all                 # Run all audits\n * - npm run audit:visual             # Visual regression only\n * - npm run audit:accessibility      # Accessibility only\n * - npm run audit:performance        # Performance only\n * - npm run audit:functional         # Functional testing only\n * - npm run audit:code-quality       # Code quality only\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst projectRoot = path.resolve(__dirname, '..');\nconst reportsDir = path.join(projectRoot, 'reports', 'audit-suite');\n\n// Ensure reports directory exists\nif (!fs.existsSync(reportsDir)) {\n  fs.mkdirSync(reportsDir, { recursive: true });\n}\n\ninterface AuditResult {\n  pillar: string;\n  status: 'passed' | 'failed' | 'skipped';\n  duration: number;\n  summary: {\n    total: number;\n    passed: number;\n    failed: number;\n    warnings: number;\n  };\n  details: any[];\n  reportPath?: string;\n}\n\ninterface AuditSuiteResult {\n  timestamp: string;\n  totalDuration: number;\n  results: AuditResult[];\n  overallStatus: 'passed' | 'failed' | 'partial';\n  reportPath: string;\n}\n\nclass ComprehensiveAuditSuite {\n  private results: AuditResult[] = [];\n  private startTime: number = 0;\n\n  constructor() {\n    this.startTime = Date.now();\n  }\n\n  async runAll(): Promise<AuditSuiteResult> {\n    console.log('🚀 Starting Comprehensive Audit Suite...\\n');\n\n    const pillars = [\n      { name: 'visual', description: 'Visual & Interaction Correctness' },\n      { name: 'accessibility', description: 'Accessibility (WCAG 2.1 AA)' },\n      { name: 'performance', description: 'Performance Analysis' },\n      { name: 'functional', description: 'Functional Correctness' },\n      { name: 'code-quality', description: 'Code Quality & Best Practices' }\n    ];\n\n    for (const pillar of pillars) {\n      console.log(`\\n📊 Running ${pillar.description}...`);\n      const result = await this.runPillar(pillar.name);\n      this.results.push(result);\n    }\n\n    const finalResult = this.generateFinalReport();\n    console.log('\\n✨ Comprehensive Audit Suite Complete!');\n    console.log(`📄 Report available at: ${finalResult.reportPath}`);\n    \n    return finalResult;\n  }\n\n  async runPillar(pillarName: string): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      switch (pillarName) {\n        case 'visual':\n          return await this.runVisualAudit();\n        case 'accessibility':\n          return await this.runAccessibilityAudit();\n        case 'performance':\n          return await this.runPerformanceAudit();\n        case 'functional':\n          return await this.runFunctionalAudit();\n        case 'code-quality':\n          return await this.runCodeQualityAudit();\n        default:\n          throw new Error(`Unknown pillar: ${pillarName}`);\n      }\n    } catch (error) {\n      return {\n        pillar: pillarName,\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runVisualAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Component-level visual audit (Storybook)\n      console.log('  🔍 Component-level visual regression testing...');\n      const storybookResult = await this.executeCommand(\n        'npx playwright test --config=playwright.config.js --reporter=json',\n        { timeout: 300000 } // 5 minutes timeout\n      );\n\n      // Page-level visual audit\n      console.log('  🔍 Page-level visual regression testing...');\n      const pageResult = await this.executeCommand(\n        'npx playwright test --config=playwright.visual.config.ts --reporter=json',\n        { timeout: 300000 }\n      );\n\n      // Parse results\n      const componentResults = this.parsePlaywrightResults(storybookResult);\n      const pageResults = this.parsePlaywrightResults(pageResult);\n\n      return {\n        pillar: 'visual',\n        status: (componentResults.failed === 0 && pageResults.failed === 0) ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: componentResults.total + pageResults.total,\n          passed: componentResults.passed + pageResults.passed,\n          failed: componentResults.failed + pageResults.failed,\n          warnings: 0\n        },\n        details: [\n          { type: 'component', ...componentResults },\n          { type: 'page', ...pageResults }\n        ],\n        reportPath: path.join(reportsDir, 'visual-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'visual',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runAccessibilityAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  ♿ Running accessibility scan with axe-core...');\n      \n      // Run accessibility tests using Playwright with axe-core\n      const result = await this.executeCommand(\n        'npx playwright test tests/e2e/accessibility.spec.ts --reporter=json',\n        { timeout: 180000 }\n      );\n\n      const parsedResult = this.parsePlaywrightResults(result);\n      \n      return {\n        pillar: 'accessibility',\n        status: parsedResult.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: parsedResult.total,\n          passed: parsedResult.passed,\n          failed: parsedResult.failed,\n          warnings: 0\n        },\n        details: parsedResult.details || [],\n        reportPath: path.join(reportsDir, 'accessibility-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'accessibility',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runPerformanceAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  ⚡ Running performance analysis...');\n      \n      // Run React Scan for static analysis\n      console.log('    🔍 React Scan static analysis...');\n      const reactScanResult = await this.executeCommand(\n        'npx react-scan@latest --build --report --output-file=reports/audit-suite/react-scan-report.json',\n        { timeout: 120000, allowFailure: true }\n      );\n\n      // Run Lighthouse performance audit\n      console.log('    🔍 Lighthouse performance audit...');\n      const lighthouseResult = await this.executeCommand(\n        'npx playwright test tests/e2e/performance.spec.ts --reporter=json',\n        { timeout: 180000 }\n      );\n\n      const parsedResult = this.parsePlaywrightResults(lighthouseResult);\n      \n      return {\n        pillar: 'performance',\n        status: parsedResult.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: parsedResult.total,\n          passed: parsedResult.passed,\n          failed: parsedResult.failed,\n          warnings: 0\n        },\n        details: [\n          { type: 'lighthouse', ...parsedResult },\n          { type: 'react-scan', result: reactScanResult }\n        ],\n        reportPath: path.join(reportsDir, 'performance-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'performance',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runFunctionalAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  🧪 Running functional correctness tests...');\n      \n      // Run comprehensive functional tests\n      const e2eTests = [\n        'tests/e2e/authentication.spec.ts',\n        'tests/e2e/search-functionality.spec.ts',\n        'tests/e2e/navigation.spec.ts',\n        'tests/e2e/ai-features.spec.ts'\n      ];\n\n      const results = [];\n      for (const testFile of e2eTests) {\n        if (fs.existsSync(path.join(projectRoot, testFile))) {\n          const result = await this.executeCommand(\n            `npx playwright test ${testFile} --reporter=json`,\n            { timeout: 180000 }\n          );\n          results.push(this.parsePlaywrightResults(result));\n        }\n      }\n\n      const totalResults = results.reduce((acc, curr) => ({\n        total: acc.total + curr.total,\n        passed: acc.passed + curr.passed,\n        failed: acc.failed + curr.failed\n      }), { total: 0, passed: 0, failed: 0 });\n\n      return {\n        pillar: 'functional',\n        status: totalResults.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: totalResults.total,\n          passed: totalResults.passed,\n          failed: totalResults.failed,\n          warnings: 0\n        },\n        details: results,\n        reportPath: path.join(reportsDir, 'functional-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'functional',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runCodeQualityAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  📋 Running code quality analysis...');\n      \n      // Ensure reports directory exists\n      const eslintReportPath = path.join(reportsDir, 'eslint-report.json');\n      const biomeReportPath = path.join(reportsDir, 'biome-report.json');\n      \n      // Run ESLint\n      console.log('    🔍 ESLint analysis...');\n      const eslintResult = await this.executeCommand(\n        `npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ${eslintReportPath}`,\n        { allowFailure: true }\n      );\n\n      // Run Biome\n      console.log('    🔍 Biome analysis...');\n      const biomeResult = await this.executeCommand(\n        `npx biome check . --reporter json --diagnostic-level=info`,\n        { allowFailure: true }\n      );\n\n      // Write Biome results to file\n      if (biomeResult) {\n        try {\n          // Truncate very large outputs to prevent JSON parsing issues\n          const maxSize = 1024 * 1024; // 1MB limit\n          const truncatedResult = biomeResult.length > maxSize \n            ? biomeResult.substring(0, maxSize) + '...[truncated]'\n            : biomeResult;\n          fs.writeFileSync(biomeReportPath, truncatedResult);\n        } catch (error) {\n          console.log('Failed to write Biome results:', error.message);\n        }\n      }\n\n      // Run TypeScript type checking\n      console.log('    🔍 TypeScript type checking...');\n      const tscResult = await this.executeCommand(\n        'npx tsc --noEmit --skipLibCheck',\n        { allowFailure: true }\n      );\n\n      // Parse ESLint results\n      let eslintData = { total: 0, errors: 0, warnings: 0, details: [] };\n      \n      if (fs.existsSync(eslintReportPath)) {\n        try {\n          const eslintReport = JSON.parse(fs.readFileSync(eslintReportPath, 'utf8'));\n          eslintData = this.parseEslintResults(eslintReport);\n        } catch (error) {\n          console.log('Failed to parse ESLint results:', error.message);\n        }\n      }\n\n      // Parse Biome results\n      let biomeData = { total: 0, errors: 0, warnings: 0 };\n      if (fs.existsSync(biomeReportPath)) {\n        try {\n          const biomeContent = fs.readFileSync(biomeReportPath, 'utf8');\n          // Try to parse as JSON, but handle truncated content\n          if (biomeContent.includes('[truncated]')) {\n            console.log('Biome output was truncated due to size, using fallback parsing');\n            biomeData = this.parseBiomeOutputText(biomeContent);\n          } else {\n            const biomeReport = JSON.parse(biomeContent);\n            biomeData = this.parseBiomeResults(biomeReport);\n          }\n        } catch (error) {\n          console.log('Failed to parse Biome results:', error.message);\n          // Try alternative text parsing as fallback\n          try {\n            const biomeContent = fs.readFileSync(biomeReportPath, 'utf8');\n            biomeData = this.parseBiomeOutputText(biomeContent);\n          } catch (fallbackError) {\n            console.log('Fallback Biome parsing also failed:', fallbackError.message);\n          }\n        }\n      }\n\n      // Parse TypeScript results\n      const tscErrors = this.parseTscResults(tscResult);\n\n      const totalErrors = eslintData.errors + biomeData.errors + tscErrors.count;\n      const totalWarnings = eslintData.warnings + biomeData.warnings;\n      const totalIssues = eslintData.total + biomeData.total + tscErrors.count;\n\n      return {\n        pillar: 'code-quality',\n        status: totalErrors === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: totalIssues,\n          passed: totalIssues - totalErrors - totalWarnings,\n          failed: totalErrors,\n          warnings: totalWarnings\n        },\n        details: [\n          { type: 'eslint', ...eslintData },\n          { type: 'biome', ...biomeData },\n          { type: 'typescript', ...tscErrors }\n        ],\n        reportPath: path.join(reportsDir, 'code-quality-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'code-quality',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async executeCommand(command: string, options: { timeout?: number; allowFailure?: boolean } = {}): Promise<string> {\n    const { timeout = 60000, allowFailure = false } = options;\n    \n    try {\n      const result = execSync(command, {\n        encoding: 'utf8',\n        timeout,\n        cwd: projectRoot,\n        maxBuffer: 1024 * 1024 * 10 // 10MB buffer\n      });\n      return result;\n    } catch (error) {\n      if (allowFailure) {\n        return error.stdout || error.stderr || '';\n      }\n      throw error;\n    }\n  }\n\n  private parsePlaywrightResults(output: string): { total: number; passed: number; failed: number; details?: any[] } {\n    try {\n      const result = JSON.parse(output);\n      return {\n        total: result.stats?.total || 0,\n        passed: result.stats?.passed || 0,\n        failed: result.stats?.failed || 0,\n        details: result.tests || []\n      };\n    } catch {\n      // Fallback parsing for non-JSON output\n      const failedMatch = output.match(/(\\d+) failed/);\n      const passedMatch = output.match(/(\\d+) passed/);\n      \n      const failed = failedMatch ? parseInt(failedMatch[1]) : 0;\n      const passed = passedMatch ? parseInt(passedMatch[1]) : 0;\n      \n      return {\n        total: failed + passed,\n        passed,\n        failed\n      };\n    }\n  }\n\n  private parseEslintResults(eslintReport: any[]): { total: number; errors: number; warnings: number; details: any[] } {\n    const stats = eslintReport.reduce((acc, file) => {\n      acc.total += file.messages.length;\n      acc.errors += file.errorCount;\n      acc.warnings += file.warningCount;\n      \n      // Add file details for serious issues\n      if (file.errorCount > 0 || file.warningCount > 5) {\n        acc.details.push({\n          filePath: file.filePath,\n          errors: file.errorCount,\n          warnings: file.warningCount,\n          messages: file.messages.slice(0, 5) // First 5 messages only\n        });\n      }\n      \n      return acc;\n    }, { total: 0, errors: 0, warnings: 0, details: [] });\n\n    return stats;\n  }\n\n  private parseBiomeResults(biomeReport: any): { total: number; errors: number; warnings: number } {\n    // Biome report structure may vary, adapt as needed\n    let total = 0;\n    let errors = 0;\n    let warnings = 0;\n\n    if (biomeReport.diagnostics) {\n      total = biomeReport.diagnostics.length;\n      errors = biomeReport.diagnostics.filter(d => d.severity === 'error').length;\n      warnings = biomeReport.diagnostics.filter(d => d.severity === 'warning').length;\n    }\n\n    return { total, errors, warnings };\n  }\n\n  private parseBiomeOutputText(biomeOutput: string): { total: number; errors: number; warnings: number } {\n    // Fallback text parsing for when JSON parsing fails\n    let total = 0;\n    let errors = 0;\n    let warnings = 0;\n\n    const lines = biomeOutput.split('\\n');\n    \n    // Look for summary patterns in Biome output\n    const summaryLine = lines.find(line => \n      line.includes('Found') || line.includes('issues') || line.includes('diagnostics')\n    );\n    \n    if (summaryLine) {\n      const numberMatches = summaryLine.match(/\\d+/g);\n      if (numberMatches && numberMatches.length > 0) {\n        total = parseInt(numberMatches[0]);\n      }\n    }\n\n    // Count error/warning patterns\n    errors = (biomeOutput.match(/error/gi) || []).length;\n    warnings = (biomeOutput.match(/warning/gi) || []).length;\n\n    return { total: Math.max(total, errors + warnings), errors, warnings };\n  }\n\n  private parseTscResults(tscOutput: string): { count: number; errors: string[] } {\n    if (!tscOutput) {\n      return { count: 0, errors: [] };\n    }\n\n    const lines = tscOutput.split('\\n').filter(line => line.includes('error TS'));\n    return {\n      count: lines.length,\n      errors: lines.slice(0, 10) // First 10 errors only\n    };\n  }\n\n  private generateFinalReport(): AuditSuiteResult {\n    const totalDuration = Date.now() - this.startTime;\n    const timestamp = new Date().toISOString();\n    \n    // Calculate overall status\n    const failedPillars = this.results.filter(r => r.status === 'failed').length;\n    const overallStatus = failedPillars === 0 ? 'passed' : (failedPillars < this.results.length ? 'partial' : 'failed');\n\n    // Generate HTML report\n    const reportPath = this.generateHtmlReport(timestamp, totalDuration, overallStatus);\n\n    return {\n      timestamp,\n      totalDuration,\n      results: this.results,\n      overallStatus,\n      reportPath\n    };\n  }\n\n  private generateHtmlReport(timestamp: string, duration: number, overallStatus: string): string {\n    const reportPath = path.join(reportsDir, `comprehensive-audit-${Date.now()}.html`);\n    \n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Comprehensive Audit Report - AIGlossaryPro</title>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }\n        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; padding: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { text-align: center; margin-bottom: 30px; }\n        .status { display: inline-block; padding: 8px 16px; border-radius: 4px; font-weight: bold; }\n        .status.passed { background: #d4edda; color: #155724; }\n        .status.failed { background: #f8d7da; color: #721c24; }\n        .status.partial { background: #fff3cd; color: #856404; }\n        .pillar { margin: 20px 0; padding: 20px; border-left: 4px solid #007bff; background: #f8f9fa; }\n        .pillar.failed { border-left-color: #dc3545; }\n        .pillar.passed { border-left-color: #28a745; }\n        .summary { display: flex; gap: 20px; margin: 10px 0; }\n        .metric { text-align: center; }\n        .metric-value { font-size: 24px; font-weight: bold; }\n        .metric-label { font-size: 12px; color: #666; }\n        .details { margin-top: 15px; }\n        .details summary { cursor: pointer; font-weight: bold; }\n        .details pre { background: #f1f1f1; padding: 10px; border-radius: 4px; overflow-x: auto; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🔍 Comprehensive Audit Report</h1>\n            <p><strong>AIGlossaryPro</strong> - ${timestamp}</p>\n            <div class=\"status ${overallStatus}\">${overallStatus.toUpperCase()}</div>\n            <p>Total Duration: ${(duration / 1000).toFixed(2)}s</p>\n        </div>\n\n        <div class=\"executive-summary\">\n            <h2>📊 Executive Summary</h2>\n            <div class=\"summary\">\n                ${this.results.map(result => `\n                    <div class=\"metric\">\n                        <div class=\"metric-value ${result.status === 'passed' ? 'text-success' : 'text-danger'}\">${result.summary.total}</div>\n                        <div class=\"metric-label\">${result.pillar}</div>\n                    </div>\n                `).join('')}\n            </div>\n        </div>\n\n        ${this.results.map(result => `\n            <div class=\"pillar ${result.status}\">\n                <h3>${this.getPillarTitle(result.pillar)} ${result.status === 'passed' ? '✅' : '❌'}</h3>\n                <div class=\"summary\">\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.total}</div>\n                        <div class=\"metric-label\">Total</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.passed}</div>\n                        <div class=\"metric-label\">Passed</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.failed}</div>\n                        <div class=\"metric-label\">Failed</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.warnings}</div>\n                        <div class=\"metric-label\">Warnings</div>\n                    </div>\n                </div>\n                <p><strong>Duration:</strong> ${(result.duration / 1000).toFixed(2)}s</p>\n                \n                <details class=\"details\">\n                    <summary>View Details</summary>\n                    <pre>${JSON.stringify(result.details, null, 2)}</pre>\n                </details>\n            </div>\n        `).join('')}\n\n        <div class=\"footer\">\n            <p><em>Generated by AIGlossaryPro Comprehensive Audit Suite</em></p>\n        </div>\n    </div>\n</body>\n</html>`;\n\n    fs.writeFileSync(reportPath, html);\n    return reportPath;\n  }\n\n  private getPillarTitle(pillar: string): string {\n    const titles = {\n      'visual': '🎨 Visual & Interaction Correctness',\n      'accessibility': '♿ Accessibility (WCAG 2.1 AA)',\n      'performance': '⚡ Performance Analysis',\n      'functional': '🧪 Functional Correctness',\n      'code-quality': '📋 Code Quality & Best Practices'\n    };\n    return titles[pillar] || pillar;\n  }\n}\n\n// CLI Interface\nasync function main() {\n  const args = process.argv.slice(2);\n  const pillar = args[0];\n\n  const suite = new ComprehensiveAuditSuite();\n\n  if (pillar && pillar !== 'all') {\n    console.log(`🚀 Running ${pillar} audit...`);\n    const result = await suite.runPillar(pillar);\n    console.log(`✨ ${pillar} audit complete!`);\n    console.log(`Status: ${result.status}`);\n    console.log(`Duration: ${(result.duration / 1000).toFixed(2)}s`);\n    console.log(`Summary: ${result.summary.passed}/${result.summary.total} passed`);\n  } else {\n    await suite.runAll();\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error);\n}\n\nexport { ComprehensiveAuditSuite };"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**import { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'pathnode:path;\nimport { fileURLToPath } from 'url';\n}\n\nexport { ComprehensiveAuditSuite };","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":18}},{"diffOp":{"equal":{"range":[23,103]}}},{"diffOp":{"equal":{"range":[103,104]}}},{"diffOp":{"delete":{"range":[104,108]}}},{"diffOp":{"insert":{"range":[108,117]}}},{"diffOp":{"equal":{"range":[103,104]}}},{"diffOp":{"equal":{"range":[117,156]}}},{"equalLines":{"line_count":665}},{"diffOp":{"equal":{"range":[156,194]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/comprehensive-audit-suite.ts"},"span":[817,823],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * Comprehensive Audit Suite for AIGlossaryPro\n * \n * This script implements the 5-pillar audit strategy:\n * 1. Visual & Interaction Correctness (Component & Page Level)\n * 2. Accessibility (WCAG 2.1 Level AA)\n * 3. Performance (Lighthouse & React Scan)\n * 4. Functional Correctness (End-to-End Tests)\n * 5. Code Quality (ESLint, Biome)\n * \n * Usage:\n * - npm run audit:all                 # Run all audits\n * - npm run audit:visual             # Visual regression only\n * - npm run audit:accessibility      # Accessibility only\n * - npm run audit:performance        # Performance only\n * - npm run audit:functional         # Functional testing only\n * - npm run audit:code-quality       # Code quality only\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst projectRoot = path.resolve(__dirname, '..');\nconst reportsDir = path.join(projectRoot, 'reports', 'audit-suite');\n\n// Ensure reports directory exists\nif (!fs.existsSync(reportsDir)) {\n  fs.mkdirSync(reportsDir, { recursive: true });\n}\n\ninterface AuditResult {\n  pillar: string;\n  status: 'passed' | 'failed' | 'skipped';\n  duration: number;\n  summary: {\n    total: number;\n    passed: number;\n    failed: number;\n    warnings: number;\n  };\n  details: any[];\n  reportPath?: string;\n}\n\ninterface AuditSuiteResult {\n  timestamp: string;\n  totalDuration: number;\n  results: AuditResult[];\n  overallStatus: 'passed' | 'failed' | 'partial';\n  reportPath: string;\n}\n\nclass ComprehensiveAuditSuite {\n  private results: AuditResult[] = [];\n  private startTime: number = 0;\n\n  constructor() {\n    this.startTime = Date.now();\n  }\n\n  async runAll(): Promise<AuditSuiteResult> {\n    console.log('🚀 Starting Comprehensive Audit Suite...\\n');\n\n    const pillars = [\n      { name: 'visual', description: 'Visual & Interaction Correctness' },\n      { name: 'accessibility', description: 'Accessibility (WCAG 2.1 AA)' },\n      { name: 'performance', description: 'Performance Analysis' },\n      { name: 'functional', description: 'Functional Correctness' },\n      { name: 'code-quality', description: 'Code Quality & Best Practices' }\n    ];\n\n    for (const pillar of pillars) {\n      console.log(`\\n📊 Running ${pillar.description}...`);\n      const result = await this.runPillar(pillar.name);\n      this.results.push(result);\n    }\n\n    const finalResult = this.generateFinalReport();\n    console.log('\\n✨ Comprehensive Audit Suite Complete!');\n    console.log(`📄 Report available at: ${finalResult.reportPath}`);\n    \n    return finalResult;\n  }\n\n  async runPillar(pillarName: string): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      switch (pillarName) {\n        case 'visual':\n          return await this.runVisualAudit();\n        case 'accessibility':\n          return await this.runAccessibilityAudit();\n        case 'performance':\n          return await this.runPerformanceAudit();\n        case 'functional':\n          return await this.runFunctionalAudit();\n        case 'code-quality':\n          return await this.runCodeQualityAudit();\n        default:\n          throw new Error(`Unknown pillar: ${pillarName}`);\n      }\n    } catch (error) {\n      return {\n        pillar: pillarName,\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runVisualAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Component-level visual audit (Storybook)\n      console.log('  🔍 Component-level visual regression testing...');\n      const storybookResult = await this.executeCommand(\n        'npx playwright test --config=playwright.config.js --reporter=json',\n        { timeout: 300000 } // 5 minutes timeout\n      );\n\n      // Page-level visual audit\n      console.log('  🔍 Page-level visual regression testing...');\n      const pageResult = await this.executeCommand(\n        'npx playwright test --config=playwright.visual.config.ts --reporter=json',\n        { timeout: 300000 }\n      );\n\n      // Parse results\n      const componentResults = this.parsePlaywrightResults(storybookResult);\n      const pageResults = this.parsePlaywrightResults(pageResult);\n\n      return {\n        pillar: 'visual',\n        status: (componentResults.failed === 0 && pageResults.failed === 0) ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: componentResults.total + pageResults.total,\n          passed: componentResults.passed + pageResults.passed,\n          failed: componentResults.failed + pageResults.failed,\n          warnings: 0\n        },\n        details: [\n          { type: 'component', ...componentResults },\n          { type: 'page', ...pageResults }\n        ],\n        reportPath: path.join(reportsDir, 'visual-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'visual',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runAccessibilityAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  ♿ Running accessibility scan with axe-core...');\n      \n      // Run accessibility tests using Playwright with axe-core\n      const result = await this.executeCommand(\n        'npx playwright test tests/e2e/accessibility.spec.ts --reporter=json',\n        { timeout: 180000 }\n      );\n\n      const parsedResult = this.parsePlaywrightResults(result);\n      \n      return {\n        pillar: 'accessibility',\n        status: parsedResult.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: parsedResult.total,\n          passed: parsedResult.passed,\n          failed: parsedResult.failed,\n          warnings: 0\n        },\n        details: parsedResult.details || [],\n        reportPath: path.join(reportsDir, 'accessibility-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'accessibility',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runPerformanceAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  ⚡ Running performance analysis...');\n      \n      // Run React Scan for static analysis\n      console.log('    🔍 React Scan static analysis...');\n      const reactScanResult = await this.executeCommand(\n        'npx react-scan@latest --build --report --output-file=reports/audit-suite/react-scan-report.json',\n        { timeout: 120000, allowFailure: true }\n      );\n\n      // Run Lighthouse performance audit\n      console.log('    🔍 Lighthouse performance audit...');\n      const lighthouseResult = await this.executeCommand(\n        'npx playwright test tests/e2e/performance.spec.ts --reporter=json',\n        { timeout: 180000 }\n      );\n\n      const parsedResult = this.parsePlaywrightResults(lighthouseResult);\n      \n      return {\n        pillar: 'performance',\n        status: parsedResult.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: parsedResult.total,\n          passed: parsedResult.passed,\n          failed: parsedResult.failed,\n          warnings: 0\n        },\n        details: [\n          { type: 'lighthouse', ...parsedResult },\n          { type: 'react-scan', result: reactScanResult }\n        ],\n        reportPath: path.join(reportsDir, 'performance-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'performance',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runFunctionalAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  🧪 Running functional correctness tests...');\n      \n      // Run comprehensive functional tests\n      const e2eTests = [\n        'tests/e2e/authentication.spec.ts',\n        'tests/e2e/search-functionality.spec.ts',\n        'tests/e2e/navigation.spec.ts',\n        'tests/e2e/ai-features.spec.ts'\n      ];\n\n      const results = [];\n      for (const testFile of e2eTests) {\n        if (fs.existsSync(path.join(projectRoot, testFile))) {\n          const result = await this.executeCommand(\n            `npx playwright test ${testFile} --reporter=json`,\n            { timeout: 180000 }\n          );\n          results.push(this.parsePlaywrightResults(result));\n        }\n      }\n\n      const totalResults = results.reduce((acc, curr) => ({\n        total: acc.total + curr.total,\n        passed: acc.passed + curr.passed,\n        failed: acc.failed + curr.failed\n      }), { total: 0, passed: 0, failed: 0 });\n\n      return {\n        pillar: 'functional',\n        status: totalResults.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: totalResults.total,\n          passed: totalResults.passed,\n          failed: totalResults.failed,\n          warnings: 0\n        },\n        details: results,\n        reportPath: path.join(reportsDir, 'functional-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'functional',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runCodeQualityAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  📋 Running code quality analysis...');\n      \n      // Ensure reports directory exists\n      const eslintReportPath = path.join(reportsDir, 'eslint-report.json');\n      const biomeReportPath = path.join(reportsDir, 'biome-report.json');\n      \n      // Run ESLint\n      console.log('    🔍 ESLint analysis...');\n      const eslintResult = await this.executeCommand(\n        `npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ${eslintReportPath}`,\n        { allowFailure: true }\n      );\n\n      // Run Biome\n      console.log('    🔍 Biome analysis...');\n      const biomeResult = await this.executeCommand(\n        `npx biome check . --reporter json --diagnostic-level=info`,\n        { allowFailure: true }\n      );\n\n      // Write Biome results to file\n      if (biomeResult) {\n        try {\n          // Truncate very large outputs to prevent JSON parsing issues\n          const maxSize = 1024 * 1024; // 1MB limit\n          const truncatedResult = biomeResult.length > maxSize \n            ? biomeResult.substring(0, maxSize) + '...[truncated]'\n            : biomeResult;\n          fs.writeFileSync(biomeReportPath, truncatedResult);\n        } catch (error) {\n          console.log('Failed to write Biome results:', error.message);\n        }\n      }\n\n      // Run TypeScript type checking\n      console.log('    🔍 TypeScript type checking...');\n      const tscResult = await this.executeCommand(\n        'npx tsc --noEmit --skipLibCheck',\n        { allowFailure: true }\n      );\n\n      // Parse ESLint results\n      let eslintData = { total: 0, errors: 0, warnings: 0, details: [] };\n      \n      if (fs.existsSync(eslintReportPath)) {\n        try {\n          const eslintReport = JSON.parse(fs.readFileSync(eslintReportPath, 'utf8'));\n          eslintData = this.parseEslintResults(eslintReport);\n        } catch (error) {\n          console.log('Failed to parse ESLint results:', error.message);\n        }\n      }\n\n      // Parse Biome results\n      let biomeData = { total: 0, errors: 0, warnings: 0 };\n      if (fs.existsSync(biomeReportPath)) {\n        try {\n          const biomeContent = fs.readFileSync(biomeReportPath, 'utf8');\n          // Try to parse as JSON, but handle truncated content\n          if (biomeContent.includes('[truncated]')) {\n            console.log('Biome output was truncated due to size, using fallback parsing');\n            biomeData = this.parseBiomeOutputText(biomeContent);\n          } else {\n            const biomeReport = JSON.parse(biomeContent);\n            biomeData = this.parseBiomeResults(biomeReport);\n          }\n        } catch (error) {\n          console.log('Failed to parse Biome results:', error.message);\n          // Try alternative text parsing as fallback\n          try {\n            const biomeContent = fs.readFileSync(biomeReportPath, 'utf8');\n            biomeData = this.parseBiomeOutputText(biomeContent);\n          } catch (fallbackError) {\n            console.log('Fallback Biome parsing also failed:', fallbackError.message);\n          }\n        }\n      }\n\n      // Parse TypeScript results\n      const tscErrors = this.parseTscResults(tscResult);\n\n      const totalErrors = eslintData.errors + biomeData.errors + tscErrors.count;\n      const totalWarnings = eslintData.warnings + biomeData.warnings;\n      const totalIssues = eslintData.total + biomeData.total + tscErrors.count;\n\n      return {\n        pillar: 'code-quality',\n        status: totalErrors === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: totalIssues,\n          passed: totalIssues - totalErrors - totalWarnings,\n          failed: totalErrors,\n          warnings: totalWarnings\n        },\n        details: [\n          { type: 'eslint', ...eslintData },\n          { type: 'biome', ...biomeData },\n          { type: 'typescript', ...tscErrors }\n        ],\n        reportPath: path.join(reportsDir, 'code-quality-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'code-quality',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async executeCommand(command: string, options: { timeout?: number; allowFailure?: boolean } = {}): Promise<string> {\n    const { timeout = 60000, allowFailure = false } = options;\n    \n    try {\n      const result = execSync(command, {\n        encoding: 'utf8',\n        timeout,\n        cwd: projectRoot,\n        maxBuffer: 1024 * 1024 * 10 // 10MB buffer\n      });\n      return result;\n    } catch (error) {\n      if (allowFailure) {\n        return error.stdout || error.stderr || '';\n      }\n      throw error;\n    }\n  }\n\n  private parsePlaywrightResults(output: string): { total: number; passed: number; failed: number; details?: any[] } {\n    try {\n      const result = JSON.parse(output);\n      return {\n        total: result.stats?.total || 0,\n        passed: result.stats?.passed || 0,\n        failed: result.stats?.failed || 0,\n        details: result.tests || []\n      };\n    } catch {\n      // Fallback parsing for non-JSON output\n      const failedMatch = output.match(/(\\d+) failed/);\n      const passedMatch = output.match(/(\\d+) passed/);\n      \n      const failed = failedMatch ? parseInt(failedMatch[1]) : 0;\n      const passed = passedMatch ? parseInt(passedMatch[1]) : 0;\n      \n      return {\n        total: failed + passed,\n        passed,\n        failed\n      };\n    }\n  }\n\n  private parseEslintResults(eslintReport: any[]): { total: number; errors: number; warnings: number; details: any[] } {\n    const stats = eslintReport.reduce((acc, file) => {\n      acc.total += file.messages.length;\n      acc.errors += file.errorCount;\n      acc.warnings += file.warningCount;\n      \n      // Add file details for serious issues\n      if (file.errorCount > 0 || file.warningCount > 5) {\n        acc.details.push({\n          filePath: file.filePath,\n          errors: file.errorCount,\n          warnings: file.warningCount,\n          messages: file.messages.slice(0, 5) // First 5 messages only\n        });\n      }\n      \n      return acc;\n    }, { total: 0, errors: 0, warnings: 0, details: [] });\n\n    return stats;\n  }\n\n  private parseBiomeResults(biomeReport: any): { total: number; errors: number; warnings: number } {\n    // Biome report structure may vary, adapt as needed\n    let total = 0;\n    let errors = 0;\n    let warnings = 0;\n\n    if (biomeReport.diagnostics) {\n      total = biomeReport.diagnostics.length;\n      errors = biomeReport.diagnostics.filter(d => d.severity === 'error').length;\n      warnings = biomeReport.diagnostics.filter(d => d.severity === 'warning').length;\n    }\n\n    return { total, errors, warnings };\n  }\n\n  private parseBiomeOutputText(biomeOutput: string): { total: number; errors: number; warnings: number } {\n    // Fallback text parsing for when JSON parsing fails\n    let total = 0;\n    let errors = 0;\n    let warnings = 0;\n\n    const lines = biomeOutput.split('\\n');\n    \n    // Look for summary patterns in Biome output\n    const summaryLine = lines.find(line => \n      line.includes('Found') || line.includes('issues') || line.includes('diagnostics')\n    );\n    \n    if (summaryLine) {\n      const numberMatches = summaryLine.match(/\\d+/g);\n      if (numberMatches && numberMatches.length > 0) {\n        total = parseInt(numberMatches[0]);\n      }\n    }\n\n    // Count error/warning patterns\n    errors = (biomeOutput.match(/error/gi) || []).length;\n    warnings = (biomeOutput.match(/warning/gi) || []).length;\n\n    return { total: Math.max(total, errors + warnings), errors, warnings };\n  }\n\n  private parseTscResults(tscOutput: string): { count: number; errors: string[] } {\n    if (!tscOutput) {\n      return { count: 0, errors: [] };\n    }\n\n    const lines = tscOutput.split('\\n').filter(line => line.includes('error TS'));\n    return {\n      count: lines.length,\n      errors: lines.slice(0, 10) // First 10 errors only\n    };\n  }\n\n  private generateFinalReport(): AuditSuiteResult {\n    const totalDuration = Date.now() - this.startTime;\n    const timestamp = new Date().toISOString();\n    \n    // Calculate overall status\n    const failedPillars = this.results.filter(r => r.status === 'failed').length;\n    const overallStatus = failedPillars === 0 ? 'passed' : (failedPillars < this.results.length ? 'partial' : 'failed');\n\n    // Generate HTML report\n    const reportPath = this.generateHtmlReport(timestamp, totalDuration, overallStatus);\n\n    return {\n      timestamp,\n      totalDuration,\n      results: this.results,\n      overallStatus,\n      reportPath\n    };\n  }\n\n  private generateHtmlReport(timestamp: string, duration: number, overallStatus: string): string {\n    const reportPath = path.join(reportsDir, `comprehensive-audit-${Date.now()}.html`);\n    \n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Comprehensive Audit Report - AIGlossaryPro</title>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }\n        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; padding: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { text-align: center; margin-bottom: 30px; }\n        .status { display: inline-block; padding: 8px 16px; border-radius: 4px; font-weight: bold; }\n        .status.passed { background: #d4edda; color: #155724; }\n        .status.failed { background: #f8d7da; color: #721c24; }\n        .status.partial { background: #fff3cd; color: #856404; }\n        .pillar { margin: 20px 0; padding: 20px; border-left: 4px solid #007bff; background: #f8f9fa; }\n        .pillar.failed { border-left-color: #dc3545; }\n        .pillar.passed { border-left-color: #28a745; }\n        .summary { display: flex; gap: 20px; margin: 10px 0; }\n        .metric { text-align: center; }\n        .metric-value { font-size: 24px; font-weight: bold; }\n        .metric-label { font-size: 12px; color: #666; }\n        .details { margin-top: 15px; }\n        .details summary { cursor: pointer; font-weight: bold; }\n        .details pre { background: #f1f1f1; padding: 10px; border-radius: 4px; overflow-x: auto; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🔍 Comprehensive Audit Report</h1>\n            <p><strong>AIGlossaryPro</strong> - ${timestamp}</p>\n            <div class=\"status ${overallStatus}\">${overallStatus.toUpperCase()}</div>\n            <p>Total Duration: ${(duration / 1000).toFixed(2)}s</p>\n        </div>\n\n        <div class=\"executive-summary\">\n            <h2>📊 Executive Summary</h2>\n            <div class=\"summary\">\n                ${this.results.map(result => `\n                    <div class=\"metric\">\n                        <div class=\"metric-value ${result.status === 'passed' ? 'text-success' : 'text-danger'}\">${result.summary.total}</div>\n                        <div class=\"metric-label\">${result.pillar}</div>\n                    </div>\n                `).join('')}\n            </div>\n        </div>\n\n        ${this.results.map(result => `\n            <div class=\"pillar ${result.status}\">\n                <h3>${this.getPillarTitle(result.pillar)} ${result.status === 'passed' ? '✅' : '❌'}</h3>\n                <div class=\"summary\">\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.total}</div>\n                        <div class=\"metric-label\">Total</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.passed}</div>\n                        <div class=\"metric-label\">Passed</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.failed}</div>\n                        <div class=\"metric-label\">Failed</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.warnings}</div>\n                        <div class=\"metric-label\">Warnings</div>\n                    </div>\n                </div>\n                <p><strong>Duration:</strong> ${(result.duration / 1000).toFixed(2)}s</p>\n                \n                <details class=\"details\">\n                    <summary>View Details</summary>\n                    <pre>${JSON.stringify(result.details, null, 2)}</pre>\n                </details>\n            </div>\n        `).join('')}\n\n        <div class=\"footer\">\n            <p><em>Generated by AIGlossaryPro Comprehensive Audit Suite</em></p>\n        </div>\n    </div>\n</body>\n</html>`;\n\n    fs.writeFileSync(reportPath, html);\n    return reportPath;\n  }\n\n  private getPillarTitle(pillar: string): string {\n    const titles = {\n      'visual': '🎨 Visual & Interaction Correctness',\n      'accessibility': '♿ Accessibility (WCAG 2.1 AA)',\n      'performance': '⚡ Performance Analysis',\n      'functional': '🧪 Functional Correctness',\n      'code-quality': '📋 Code Quality & Best Practices'\n    };\n    return titles[pillar] || pillar;\n  }\n}\n\n// CLI Interface\nasync function main() {\n  const args = process.argv.slice(2);\n  const pillar = args[0];\n\n  const suite = new ComprehensiveAuditSuite();\n\n  if (pillar && pillar !== 'all') {\n    console.log(`🚀 Running ${pillar} audit...`);\n    const result = await suite.runPillar(pillar);\n    console.log(`✨ ${pillar} audit complete!`);\n    console.log(`Status: ${result.status}`);\n    console.log(`Duration: ${(result.duration / 1000).toFixed(2)}s`);\n    console.log(`Summary: ${result.summary.passed}/${result.summary.total} passed`);\n  } else {\n    await suite.runAll();\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error);\n}\n\nexport { ComprehensiveAuditSuite };"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'urlnode:url;\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));}\n\nexport { ComprehensiveAuditSuite };","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":19}},{"diffOp":{"equal":{"range":[23,99]}}},{"diffOp":{"equal":{"range":[99,100]}}},{"diffOp":{"delete":{"range":[100,103]}}},{"diffOp":{"insert":{"range":[103,111]}}},{"diffOp":{"equal":{"range":[99,100]}}},{"diffOp":{"equal":{"range":[111,177]}}},{"equalLines":{"line_count":664}},{"diffOp":{"equal":{"range":[177,215]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/comprehensive-audit-suite.ts"},"span":[855,860],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * Comprehensive Audit Suite for AIGlossaryPro\n * \n * This script implements the 5-pillar audit strategy:\n * 1. Visual & Interaction Correctness (Component & Page Level)\n * 2. Accessibility (WCAG 2.1 Level AA)\n * 3. Performance (Lighthouse & React Scan)\n * 4. Functional Correctness (End-to-End Tests)\n * 5. Code Quality (ESLint, Biome)\n * \n * Usage:\n * - npm run audit:all                 # Run all audits\n * - npm run audit:visual             # Visual regression only\n * - npm run audit:accessibility      # Accessibility only\n * - npm run audit:performance        # Performance only\n * - npm run audit:functional         # Functional testing only\n * - npm run audit:code-quality       # Code quality only\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst projectRoot = path.resolve(__dirname, '..');\nconst reportsDir = path.join(projectRoot, 'reports', 'audit-suite');\n\n// Ensure reports directory exists\nif (!fs.existsSync(reportsDir)) {\n  fs.mkdirSync(reportsDir, { recursive: true });\n}\n\ninterface AuditResult {\n  pillar: string;\n  status: 'passed' | 'failed' | 'skipped';\n  duration: number;\n  summary: {\n    total: number;\n    passed: number;\n    failed: number;\n    warnings: number;\n  };\n  details: any[];\n  reportPath?: string;\n}\n\ninterface AuditSuiteResult {\n  timestamp: string;\n  totalDuration: number;\n  results: AuditResult[];\n  overallStatus: 'passed' | 'failed' | 'partial';\n  reportPath: string;\n}\n\nclass ComprehensiveAuditSuite {\n  private results: AuditResult[] = [];\n  private startTime: number = 0;\n\n  constructor() {\n    this.startTime = Date.now();\n  }\n\n  async runAll(): Promise<AuditSuiteResult> {\n    console.log('🚀 Starting Comprehensive Audit Suite...\\n');\n\n    const pillars = [\n      { name: 'visual', description: 'Visual & Interaction Correctness' },\n      { name: 'accessibility', description: 'Accessibility (WCAG 2.1 AA)' },\n      { name: 'performance', description: 'Performance Analysis' },\n      { name: 'functional', description: 'Functional Correctness' },\n      { name: 'code-quality', description: 'Code Quality & Best Practices' }\n    ];\n\n    for (const pillar of pillars) {\n      console.log(`\\n📊 Running ${pillar.description}...`);\n      const result = await this.runPillar(pillar.name);\n      this.results.push(result);\n    }\n\n    const finalResult = this.generateFinalReport();\n    console.log('\\n✨ Comprehensive Audit Suite Complete!');\n    console.log(`📄 Report available at: ${finalResult.reportPath}`);\n    \n    return finalResult;\n  }\n\n  async runPillar(pillarName: string): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      switch (pillarName) {\n        case 'visual':\n          return await this.runVisualAudit();\n        case 'accessibility':\n          return await this.runAccessibilityAudit();\n        case 'performance':\n          return await this.runPerformanceAudit();\n        case 'functional':\n          return await this.runFunctionalAudit();\n        case 'code-quality':\n          return await this.runCodeQualityAudit();\n        default:\n          throw new Error(`Unknown pillar: ${pillarName}`);\n      }\n    } catch (error) {\n      return {\n        pillar: pillarName,\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runVisualAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Component-level visual audit (Storybook)\n      console.log('  🔍 Component-level visual regression testing...');\n      const storybookResult = await this.executeCommand(\n        'npx playwright test --config=playwright.config.js --reporter=json',\n        { timeout: 300000 } // 5 minutes timeout\n      );\n\n      // Page-level visual audit\n      console.log('  🔍 Page-level visual regression testing...');\n      const pageResult = await this.executeCommand(\n        'npx playwright test --config=playwright.visual.config.ts --reporter=json',\n        { timeout: 300000 }\n      );\n\n      // Parse results\n      const componentResults = this.parsePlaywrightResults(storybookResult);\n      const pageResults = this.parsePlaywrightResults(pageResult);\n\n      return {\n        pillar: 'visual',\n        status: (componentResults.failed === 0 && pageResults.failed === 0) ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: componentResults.total + pageResults.total,\n          passed: componentResults.passed + pageResults.passed,\n          failed: componentResults.failed + pageResults.failed,\n          warnings: 0\n        },\n        details: [\n          { type: 'component', ...componentResults },\n          { type: 'page', ...pageResults }\n        ],\n        reportPath: path.join(reportsDir, 'visual-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'visual',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runAccessibilityAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  ♿ Running accessibility scan with axe-core...');\n      \n      // Run accessibility tests using Playwright with axe-core\n      const result = await this.executeCommand(\n        'npx playwright test tests/e2e/accessibility.spec.ts --reporter=json',\n        { timeout: 180000 }\n      );\n\n      const parsedResult = this.parsePlaywrightResults(result);\n      \n      return {\n        pillar: 'accessibility',\n        status: parsedResult.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: parsedResult.total,\n          passed: parsedResult.passed,\n          failed: parsedResult.failed,\n          warnings: 0\n        },\n        details: parsedResult.details || [],\n        reportPath: path.join(reportsDir, 'accessibility-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'accessibility',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runPerformanceAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  ⚡ Running performance analysis...');\n      \n      // Run React Scan for static analysis\n      console.log('    🔍 React Scan static analysis...');\n      const reactScanResult = await this.executeCommand(\n        'npx react-scan@latest --build --report --output-file=reports/audit-suite/react-scan-report.json',\n        { timeout: 120000, allowFailure: true }\n      );\n\n      // Run Lighthouse performance audit\n      console.log('    🔍 Lighthouse performance audit...');\n      const lighthouseResult = await this.executeCommand(\n        'npx playwright test tests/e2e/performance.spec.ts --reporter=json',\n        { timeout: 180000 }\n      );\n\n      const parsedResult = this.parsePlaywrightResults(lighthouseResult);\n      \n      return {\n        pillar: 'performance',\n        status: parsedResult.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: parsedResult.total,\n          passed: parsedResult.passed,\n          failed: parsedResult.failed,\n          warnings: 0\n        },\n        details: [\n          { type: 'lighthouse', ...parsedResult },\n          { type: 'react-scan', result: reactScanResult }\n        ],\n        reportPath: path.join(reportsDir, 'performance-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'performance',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runFunctionalAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  🧪 Running functional correctness tests...');\n      \n      // Run comprehensive functional tests\n      const e2eTests = [\n        'tests/e2e/authentication.spec.ts',\n        'tests/e2e/search-functionality.spec.ts',\n        'tests/e2e/navigation.spec.ts',\n        'tests/e2e/ai-features.spec.ts'\n      ];\n\n      const results = [];\n      for (const testFile of e2eTests) {\n        if (fs.existsSync(path.join(projectRoot, testFile))) {\n          const result = await this.executeCommand(\n            `npx playwright test ${testFile} --reporter=json`,\n            { timeout: 180000 }\n          );\n          results.push(this.parsePlaywrightResults(result));\n        }\n      }\n\n      const totalResults = results.reduce((acc, curr) => ({\n        total: acc.total + curr.total,\n        passed: acc.passed + curr.passed,\n        failed: acc.failed + curr.failed\n      }), { total: 0, passed: 0, failed: 0 });\n\n      return {\n        pillar: 'functional',\n        status: totalResults.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: totalResults.total,\n          passed: totalResults.passed,\n          failed: totalResults.failed,\n          warnings: 0\n        },\n        details: results,\n        reportPath: path.join(reportsDir, 'functional-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'functional',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runCodeQualityAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  📋 Running code quality analysis...');\n      \n      // Ensure reports directory exists\n      const eslintReportPath = path.join(reportsDir, 'eslint-report.json');\n      const biomeReportPath = path.join(reportsDir, 'biome-report.json');\n      \n      // Run ESLint\n      console.log('    🔍 ESLint analysis...');\n      const eslintResult = await this.executeCommand(\n        `npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ${eslintReportPath}`,\n        { allowFailure: true }\n      );\n\n      // Run Biome\n      console.log('    🔍 Biome analysis...');\n      const biomeResult = await this.executeCommand(\n        `npx biome check . --reporter json --diagnostic-level=info`,\n        { allowFailure: true }\n      );\n\n      // Write Biome results to file\n      if (biomeResult) {\n        try {\n          // Truncate very large outputs to prevent JSON parsing issues\n          const maxSize = 1024 * 1024; // 1MB limit\n          const truncatedResult = biomeResult.length > maxSize \n            ? biomeResult.substring(0, maxSize) + '...[truncated]'\n            : biomeResult;\n          fs.writeFileSync(biomeReportPath, truncatedResult);\n        } catch (error) {\n          console.log('Failed to write Biome results:', error.message);\n        }\n      }\n\n      // Run TypeScript type checking\n      console.log('    🔍 TypeScript type checking...');\n      const tscResult = await this.executeCommand(\n        'npx tsc --noEmit --skipLibCheck',\n        { allowFailure: true }\n      );\n\n      // Parse ESLint results\n      let eslintData = { total: 0, errors: 0, warnings: 0, details: [] };\n      \n      if (fs.existsSync(eslintReportPath)) {\n        try {\n          const eslintReport = JSON.parse(fs.readFileSync(eslintReportPath, 'utf8'));\n          eslintData = this.parseEslintResults(eslintReport);\n        } catch (error) {\n          console.log('Failed to parse ESLint results:', error.message);\n        }\n      }\n\n      // Parse Biome results\n      let biomeData = { total: 0, errors: 0, warnings: 0 };\n      if (fs.existsSync(biomeReportPath)) {\n        try {\n          const biomeContent = fs.readFileSync(biomeReportPath, 'utf8');\n          // Try to parse as JSON, but handle truncated content\n          if (biomeContent.includes('[truncated]')) {\n            console.log('Biome output was truncated due to size, using fallback parsing');\n            biomeData = this.parseBiomeOutputText(biomeContent);\n          } else {\n            const biomeReport = JSON.parse(biomeContent);\n            biomeData = this.parseBiomeResults(biomeReport);\n          }\n        } catch (error) {\n          console.log('Failed to parse Biome results:', error.message);\n          // Try alternative text parsing as fallback\n          try {\n            const biomeContent = fs.readFileSync(biomeReportPath, 'utf8');\n            biomeData = this.parseBiomeOutputText(biomeContent);\n          } catch (fallbackError) {\n            console.log('Fallback Biome parsing also failed:', fallbackError.message);\n          }\n        }\n      }\n\n      // Parse TypeScript results\n      const tscErrors = this.parseTscResults(tscResult);\n\n      const totalErrors = eslintData.errors + biomeData.errors + tscErrors.count;\n      const totalWarnings = eslintData.warnings + biomeData.warnings;\n      const totalIssues = eslintData.total + biomeData.total + tscErrors.count;\n\n      return {\n        pillar: 'code-quality',\n        status: totalErrors === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: totalIssues,\n          passed: totalIssues - totalErrors - totalWarnings,\n          failed: totalErrors,\n          warnings: totalWarnings\n        },\n        details: [\n          { type: 'eslint', ...eslintData },\n          { type: 'biome', ...biomeData },\n          { type: 'typescript', ...tscErrors }\n        ],\n        reportPath: path.join(reportsDir, 'code-quality-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'code-quality',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async executeCommand(command: string, options: { timeout?: number; allowFailure?: boolean } = {}): Promise<string> {\n    const { timeout = 60000, allowFailure = false } = options;\n    \n    try {\n      const result = execSync(command, {\n        encoding: 'utf8',\n        timeout,\n        cwd: projectRoot,\n        maxBuffer: 1024 * 1024 * 10 // 10MB buffer\n      });\n      return result;\n    } catch (error) {\n      if (allowFailure) {\n        return error.stdout || error.stderr || '';\n      }\n      throw error;\n    }\n  }\n\n  private parsePlaywrightResults(output: string): { total: number; passed: number; failed: number; details?: any[] } {\n    try {\n      const result = JSON.parse(output);\n      return {\n        total: result.stats?.total || 0,\n        passed: result.stats?.passed || 0,\n        failed: result.stats?.failed || 0,\n        details: result.tests || []\n      };\n    } catch {\n      // Fallback parsing for non-JSON output\n      const failedMatch = output.match(/(\\d+) failed/);\n      const passedMatch = output.match(/(\\d+) passed/);\n      \n      const failed = failedMatch ? parseInt(failedMatch[1]) : 0;\n      const passed = passedMatch ? parseInt(passedMatch[1]) : 0;\n      \n      return {\n        total: failed + passed,\n        passed,\n        failed\n      };\n    }\n  }\n\n  private parseEslintResults(eslintReport: any[]): { total: number; errors: number; warnings: number; details: any[] } {\n    const stats = eslintReport.reduce((acc, file) => {\n      acc.total += file.messages.length;\n      acc.errors += file.errorCount;\n      acc.warnings += file.warningCount;\n      \n      // Add file details for serious issues\n      if (file.errorCount > 0 || file.warningCount > 5) {\n        acc.details.push({\n          filePath: file.filePath,\n          errors: file.errorCount,\n          warnings: file.warningCount,\n          messages: file.messages.slice(0, 5) // First 5 messages only\n        });\n      }\n      \n      return acc;\n    }, { total: 0, errors: 0, warnings: 0, details: [] });\n\n    return stats;\n  }\n\n  private parseBiomeResults(biomeReport: any): { total: number; errors: number; warnings: number } {\n    // Biome report structure may vary, adapt as needed\n    let total = 0;\n    let errors = 0;\n    let warnings = 0;\n\n    if (biomeReport.diagnostics) {\n      total = biomeReport.diagnostics.length;\n      errors = biomeReport.diagnostics.filter(d => d.severity === 'error').length;\n      warnings = biomeReport.diagnostics.filter(d => d.severity === 'warning').length;\n    }\n\n    return { total, errors, warnings };\n  }\n\n  private parseBiomeOutputText(biomeOutput: string): { total: number; errors: number; warnings: number } {\n    // Fallback text parsing for when JSON parsing fails\n    let total = 0;\n    let errors = 0;\n    let warnings = 0;\n\n    const lines = biomeOutput.split('\\n');\n    \n    // Look for summary patterns in Biome output\n    const summaryLine = lines.find(line => \n      line.includes('Found') || line.includes('issues') || line.includes('diagnostics')\n    );\n    \n    if (summaryLine) {\n      const numberMatches = summaryLine.match(/\\d+/g);\n      if (numberMatches && numberMatches.length > 0) {\n        total = parseInt(numberMatches[0]);\n      }\n    }\n\n    // Count error/warning patterns\n    errors = (biomeOutput.match(/error/gi) || []).length;\n    warnings = (biomeOutput.match(/warning/gi) || []).length;\n\n    return { total: Math.max(total, errors + warnings), errors, warnings };\n  }\n\n  private parseTscResults(tscOutput: string): { count: number; errors: string[] } {\n    if (!tscOutput) {\n      return { count: 0, errors: [] };\n    }\n\n    const lines = tscOutput.split('\\n').filter(line => line.includes('error TS'));\n    return {\n      count: lines.length,\n      errors: lines.slice(0, 10) // First 10 errors only\n    };\n  }\n\n  private generateFinalReport(): AuditSuiteResult {\n    const totalDuration = Date.now() - this.startTime;\n    const timestamp = new Date().toISOString();\n    \n    // Calculate overall status\n    const failedPillars = this.results.filter(r => r.status === 'failed').length;\n    const overallStatus = failedPillars === 0 ? 'passed' : (failedPillars < this.results.length ? 'partial' : 'failed');\n\n    // Generate HTML report\n    const reportPath = this.generateHtmlReport(timestamp, totalDuration, overallStatus);\n\n    return {\n      timestamp,\n      totalDuration,\n      results: this.results,\n      overallStatus,\n      reportPath\n    };\n  }\n\n  private generateHtmlReport(timestamp: string, duration: number, overallStatus: string): string {\n    const reportPath = path.join(reportsDir, `comprehensive-audit-${Date.now()}.html`);\n    \n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Comprehensive Audit Report - AIGlossaryPro</title>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }\n        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; padding: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { text-align: center; margin-bottom: 30px; }\n        .status { display: inline-block; padding: 8px 16px; border-radius: 4px; font-weight: bold; }\n        .status.passed { background: #d4edda; color: #155724; }\n        .status.failed { background: #f8d7da; color: #721c24; }\n        .status.partial { background: #fff3cd; color: #856404; }\n        .pillar { margin: 20px 0; padding: 20px; border-left: 4px solid #007bff; background: #f8f9fa; }\n        .pillar.failed { border-left-color: #dc3545; }\n        .pillar.passed { border-left-color: #28a745; }\n        .summary { display: flex; gap: 20px; margin: 10px 0; }\n        .metric { text-align: center; }\n        .metric-value { font-size: 24px; font-weight: bold; }\n        .metric-label { font-size: 12px; color: #666; }\n        .details { margin-top: 15px; }\n        .details summary { cursor: pointer; font-weight: bold; }\n        .details pre { background: #f1f1f1; padding: 10px; border-radius: 4px; overflow-x: auto; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🔍 Comprehensive Audit Report</h1>\n            <p><strong>AIGlossaryPro</strong> - ${timestamp}</p>\n            <div class=\"status ${overallStatus}\">${overallStatus.toUpperCase()}</div>\n            <p>Total Duration: ${(duration / 1000).toFixed(2)}s</p>\n        </div>\n\n        <div class=\"executive-summary\">\n            <h2>📊 Executive Summary</h2>\n            <div class=\"summary\">\n                ${this.results.map(result => `\n                    <div class=\"metric\">\n                        <div class=\"metric-value ${result.status === 'passed' ? 'text-success' : 'text-danger'}\">${result.summary.total}</div>\n                        <div class=\"metric-label\">${result.pillar}</div>\n                    </div>\n                `).join('')}\n            </div>\n        </div>\n\n        ${this.results.map(result => `\n            <div class=\"pillar ${result.status}\">\n                <h3>${this.getPillarTitle(result.pillar)} ${result.status === 'passed' ? '✅' : '❌'}</h3>\n                <div class=\"summary\">\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.total}</div>\n                        <div class=\"metric-label\">Total</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.passed}</div>\n                        <div class=\"metric-label\">Passed</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.failed}</div>\n                        <div class=\"metric-label\">Failed</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.warnings}</div>\n                        <div class=\"metric-label\">Warnings</div>\n                    </div>\n                </div>\n                <p><strong>Duration:</strong> ${(result.duration / 1000).toFixed(2)}s</p>\n                \n                <details class=\"details\">\n                    <summary>View Details</summary>\n                    <pre>${JSON.stringify(result.details, null, 2)}</pre>\n                </details>\n            </div>\n        `).join('')}\n\n        <div class=\"footer\">\n            <p><em>Generated by AIGlossaryPro Comprehensive Audit Suite</em></p>\n        </div>\n    </div>\n</body>\n</html>`;\n\n    fs.writeFileSync(reportPath, html);\n    return reportPath;\n  }\n\n  private getPillarTitle(pillar: string): string {\n    const titles = {\n      'visual': '🎨 Visual & Interaction Correctness',\n      'accessibility': '♿ Accessibility (WCAG 2.1 AA)',\n      'performance': '⚡ Performance Analysis',\n      'functional': '🧪 Functional Correctness',\n      'code-quality': '📋 Code Quality & Best Practices'\n    };\n    return titles[pillar] || pillar;\n  }\n}\n\n// CLI Interface\nasync function main() {\n  const args = process.argv.slice(2);\n  const pillar = args[0];\n\n  const suite = new ComprehensiveAuditSuite();\n\n  if (pillar && pillar !== 'all') {\n    console.log(`🚀 Running ${pillar} audit...`);\n    const result = await suite.runPillar(pillar);\n    console.log(`✨ ${pillar} audit complete!`);\n    console.log(`Status: ${result.status}`);\n    console.log(`Duration: ${(result.duration / 1000).toFixed(2)}s`);\n    console.log(`Summary: ${result.summary.passed}/${result.summary.total} passed`);\n  } else {\n    await suite.runAll();\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error);\n}\n\nexport { ComprehensiveAuditSuite };"},"tags":["fixable"],"source":null},{"category":"lint/style/useTemplate","severity":"information","description":"Template literals are preferred over string concatenation.","message":[{"elements":["Emphasis"],"content":"Template"},{"elements":[],"content":" literals are preferred over "},{"elements":["Emphasis"],"content":"string concatenation."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Unsafe fix: Use a "},{"elements":["Emphasis"],"content":"template literal"},{"elements":[],"content":"."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**          const maxSize = 1024 * 1024; // 1MB limit\n          const truncatedResult = biomeResult.length > maxSize \n            ? `${biomeResult.substring(0, maxSize) + '}...[truncated]'\n            : biomeResult;\n          fs.writeFileSync(biomeReportPath, truncatedResult);}\n\nexport { ComprehensiveAuditSuite };","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":334}},{"diffOp":{"equal":{"range":[23,153]}}},{"diffOp":{"insert":{"range":[153,156]}}},{"diffOp":{"equal":{"range":[156,189]}}},{"diffOp":{"delete":{"range":[189,193]}}},{"diffOp":{"insert":{"range":[193,194]}}},{"diffOp":{"equal":{"range":[194,208]}}},{"diffOp":{"delete":{"range":[208,209]}}},{"diffOp":{"insert":{"range":[153,154]}}},{"diffOp":{"equal":{"range":[209,298]}}},{"equalLines":{"line_count":349}},{"diffOp":{"equal":{"range":[298,336]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/comprehensive-audit-suite.ts"},"span":[11074,11126],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * Comprehensive Audit Suite for AIGlossaryPro\n * \n * This script implements the 5-pillar audit strategy:\n * 1. Visual & Interaction Correctness (Component & Page Level)\n * 2. Accessibility (WCAG 2.1 Level AA)\n * 3. Performance (Lighthouse & React Scan)\n * 4. Functional Correctness (End-to-End Tests)\n * 5. Code Quality (ESLint, Biome)\n * \n * Usage:\n * - npm run audit:all                 # Run all audits\n * - npm run audit:visual             # Visual regression only\n * - npm run audit:accessibility      # Accessibility only\n * - npm run audit:performance        # Performance only\n * - npm run audit:functional         # Functional testing only\n * - npm run audit:code-quality       # Code quality only\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst projectRoot = path.resolve(__dirname, '..');\nconst reportsDir = path.join(projectRoot, 'reports', 'audit-suite');\n\n// Ensure reports directory exists\nif (!fs.existsSync(reportsDir)) {\n  fs.mkdirSync(reportsDir, { recursive: true });\n}\n\ninterface AuditResult {\n  pillar: string;\n  status: 'passed' | 'failed' | 'skipped';\n  duration: number;\n  summary: {\n    total: number;\n    passed: number;\n    failed: number;\n    warnings: number;\n  };\n  details: any[];\n  reportPath?: string;\n}\n\ninterface AuditSuiteResult {\n  timestamp: string;\n  totalDuration: number;\n  results: AuditResult[];\n  overallStatus: 'passed' | 'failed' | 'partial';\n  reportPath: string;\n}\n\nclass ComprehensiveAuditSuite {\n  private results: AuditResult[] = [];\n  private startTime: number = 0;\n\n  constructor() {\n    this.startTime = Date.now();\n  }\n\n  async runAll(): Promise<AuditSuiteResult> {\n    console.log('🚀 Starting Comprehensive Audit Suite...\\n');\n\n    const pillars = [\n      { name: 'visual', description: 'Visual & Interaction Correctness' },\n      { name: 'accessibility', description: 'Accessibility (WCAG 2.1 AA)' },\n      { name: 'performance', description: 'Performance Analysis' },\n      { name: 'functional', description: 'Functional Correctness' },\n      { name: 'code-quality', description: 'Code Quality & Best Practices' }\n    ];\n\n    for (const pillar of pillars) {\n      console.log(`\\n📊 Running ${pillar.description}...`);\n      const result = await this.runPillar(pillar.name);\n      this.results.push(result);\n    }\n\n    const finalResult = this.generateFinalReport();\n    console.log('\\n✨ Comprehensive Audit Suite Complete!');\n    console.log(`📄 Report available at: ${finalResult.reportPath}`);\n    \n    return finalResult;\n  }\n\n  async runPillar(pillarName: string): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      switch (pillarName) {\n        case 'visual':\n          return await this.runVisualAudit();\n        case 'accessibility':\n          return await this.runAccessibilityAudit();\n        case 'performance':\n          return await this.runPerformanceAudit();\n        case 'functional':\n          return await this.runFunctionalAudit();\n        case 'code-quality':\n          return await this.runCodeQualityAudit();\n        default:\n          throw new Error(`Unknown pillar: ${pillarName}`);\n      }\n    } catch (error) {\n      return {\n        pillar: pillarName,\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runVisualAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Component-level visual audit (Storybook)\n      console.log('  🔍 Component-level visual regression testing...');\n      const storybookResult = await this.executeCommand(\n        'npx playwright test --config=playwright.config.js --reporter=json',\n        { timeout: 300000 } // 5 minutes timeout\n      );\n\n      // Page-level visual audit\n      console.log('  🔍 Page-level visual regression testing...');\n      const pageResult = await this.executeCommand(\n        'npx playwright test --config=playwright.visual.config.ts --reporter=json',\n        { timeout: 300000 }\n      );\n\n      // Parse results\n      const componentResults = this.parsePlaywrightResults(storybookResult);\n      const pageResults = this.parsePlaywrightResults(pageResult);\n\n      return {\n        pillar: 'visual',\n        status: (componentResults.failed === 0 && pageResults.failed === 0) ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: componentResults.total + pageResults.total,\n          passed: componentResults.passed + pageResults.passed,\n          failed: componentResults.failed + pageResults.failed,\n          warnings: 0\n        },\n        details: [\n          { type: 'component', ...componentResults },\n          { type: 'page', ...pageResults }\n        ],\n        reportPath: path.join(reportsDir, 'visual-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'visual',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runAccessibilityAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  ♿ Running accessibility scan with axe-core...');\n      \n      // Run accessibility tests using Playwright with axe-core\n      const result = await this.executeCommand(\n        'npx playwright test tests/e2e/accessibility.spec.ts --reporter=json',\n        { timeout: 180000 }\n      );\n\n      const parsedResult = this.parsePlaywrightResults(result);\n      \n      return {\n        pillar: 'accessibility',\n        status: parsedResult.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: parsedResult.total,\n          passed: parsedResult.passed,\n          failed: parsedResult.failed,\n          warnings: 0\n        },\n        details: parsedResult.details || [],\n        reportPath: path.join(reportsDir, 'accessibility-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'accessibility',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runPerformanceAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  ⚡ Running performance analysis...');\n      \n      // Run React Scan for static analysis\n      console.log('    🔍 React Scan static analysis...');\n      const reactScanResult = await this.executeCommand(\n        'npx react-scan@latest --build --report --output-file=reports/audit-suite/react-scan-report.json',\n        { timeout: 120000, allowFailure: true }\n      );\n\n      // Run Lighthouse performance audit\n      console.log('    🔍 Lighthouse performance audit...');\n      const lighthouseResult = await this.executeCommand(\n        'npx playwright test tests/e2e/performance.spec.ts --reporter=json',\n        { timeout: 180000 }\n      );\n\n      const parsedResult = this.parsePlaywrightResults(lighthouseResult);\n      \n      return {\n        pillar: 'performance',\n        status: parsedResult.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: parsedResult.total,\n          passed: parsedResult.passed,\n          failed: parsedResult.failed,\n          warnings: 0\n        },\n        details: [\n          { type: 'lighthouse', ...parsedResult },\n          { type: 'react-scan', result: reactScanResult }\n        ],\n        reportPath: path.join(reportsDir, 'performance-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'performance',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runFunctionalAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  🧪 Running functional correctness tests...');\n      \n      // Run comprehensive functional tests\n      const e2eTests = [\n        'tests/e2e/authentication.spec.ts',\n        'tests/e2e/search-functionality.spec.ts',\n        'tests/e2e/navigation.spec.ts',\n        'tests/e2e/ai-features.spec.ts'\n      ];\n\n      const results = [];\n      for (const testFile of e2eTests) {\n        if (fs.existsSync(path.join(projectRoot, testFile))) {\n          const result = await this.executeCommand(\n            `npx playwright test ${testFile} --reporter=json`,\n            { timeout: 180000 }\n          );\n          results.push(this.parsePlaywrightResults(result));\n        }\n      }\n\n      const totalResults = results.reduce((acc, curr) => ({\n        total: acc.total + curr.total,\n        passed: acc.passed + curr.passed,\n        failed: acc.failed + curr.failed\n      }), { total: 0, passed: 0, failed: 0 });\n\n      return {\n        pillar: 'functional',\n        status: totalResults.failed === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: totalResults.total,\n          passed: totalResults.passed,\n          failed: totalResults.failed,\n          warnings: 0\n        },\n        details: results,\n        reportPath: path.join(reportsDir, 'functional-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'functional',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async runCodeQualityAudit(): Promise<AuditResult> {\n    const startTime = Date.now();\n    \n    try {\n      console.log('  📋 Running code quality analysis...');\n      \n      // Ensure reports directory exists\n      const eslintReportPath = path.join(reportsDir, 'eslint-report.json');\n      const biomeReportPath = path.join(reportsDir, 'biome-report.json');\n      \n      // Run ESLint\n      console.log('    🔍 ESLint analysis...');\n      const eslintResult = await this.executeCommand(\n        `npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ${eslintReportPath}`,\n        { allowFailure: true }\n      );\n\n      // Run Biome\n      console.log('    🔍 Biome analysis...');\n      const biomeResult = await this.executeCommand(\n        `npx biome check . --reporter json --diagnostic-level=info`,\n        { allowFailure: true }\n      );\n\n      // Write Biome results to file\n      if (biomeResult) {\n        try {\n          // Truncate very large outputs to prevent JSON parsing issues\n          const maxSize = 1024 * 1024; // 1MB limit\n          const truncatedResult = biomeResult.length > maxSize \n            ? biomeResult.substring(0, maxSize) + '...[truncated]'\n            : biomeResult;\n          fs.writeFileSync(biomeReportPath, truncatedResult);\n        } catch (error) {\n          console.log('Failed to write Biome results:', error.message);\n        }\n      }\n\n      // Run TypeScript type checking\n      console.log('    🔍 TypeScript type checking...');\n      const tscResult = await this.executeCommand(\n        'npx tsc --noEmit --skipLibCheck',\n        { allowFailure: true }\n      );\n\n      // Parse ESLint results\n      let eslintData = { total: 0, errors: 0, warnings: 0, details: [] };\n      \n      if (fs.existsSync(eslintReportPath)) {\n        try {\n          const eslintReport = JSON.parse(fs.readFileSync(eslintReportPath, 'utf8'));\n          eslintData = this.parseEslintResults(eslintReport);\n        } catch (error) {\n          console.log('Failed to parse ESLint results:', error.message);\n        }\n      }\n\n      // Parse Biome results\n      let biomeData = { total: 0, errors: 0, warnings: 0 };\n      if (fs.existsSync(biomeReportPath)) {\n        try {\n          const biomeContent = fs.readFileSync(biomeReportPath, 'utf8');\n          // Try to parse as JSON, but handle truncated content\n          if (biomeContent.includes('[truncated]')) {\n            console.log('Biome output was truncated due to size, using fallback parsing');\n            biomeData = this.parseBiomeOutputText(biomeContent);\n          } else {\n            const biomeReport = JSON.parse(biomeContent);\n            biomeData = this.parseBiomeResults(biomeReport);\n          }\n        } catch (error) {\n          console.log('Failed to parse Biome results:', error.message);\n          // Try alternative text parsing as fallback\n          try {\n            const biomeContent = fs.readFileSync(biomeReportPath, 'utf8');\n            biomeData = this.parseBiomeOutputText(biomeContent);\n          } catch (fallbackError) {\n            console.log('Fallback Biome parsing also failed:', fallbackError.message);\n          }\n        }\n      }\n\n      // Parse TypeScript results\n      const tscErrors = this.parseTscResults(tscResult);\n\n      const totalErrors = eslintData.errors + biomeData.errors + tscErrors.count;\n      const totalWarnings = eslintData.warnings + biomeData.warnings;\n      const totalIssues = eslintData.total + biomeData.total + tscErrors.count;\n\n      return {\n        pillar: 'code-quality',\n        status: totalErrors === 0 ? 'passed' : 'failed',\n        duration: Date.now() - startTime,\n        summary: {\n          total: totalIssues,\n          passed: totalIssues - totalErrors - totalWarnings,\n          failed: totalErrors,\n          warnings: totalWarnings\n        },\n        details: [\n          { type: 'eslint', ...eslintData },\n          { type: 'biome', ...biomeData },\n          { type: 'typescript', ...tscErrors }\n        ],\n        reportPath: path.join(reportsDir, 'code-quality-audit-report.html')\n      };\n    } catch (error) {\n      return {\n        pillar: 'code-quality',\n        status: 'failed',\n        duration: Date.now() - startTime,\n        summary: { total: 0, passed: 0, failed: 1, warnings: 0 },\n        details: [{ error: error.message }]\n      };\n    }\n  }\n\n  private async executeCommand(command: string, options: { timeout?: number; allowFailure?: boolean } = {}): Promise<string> {\n    const { timeout = 60000, allowFailure = false } = options;\n    \n    try {\n      const result = execSync(command, {\n        encoding: 'utf8',\n        timeout,\n        cwd: projectRoot,\n        maxBuffer: 1024 * 1024 * 10 // 10MB buffer\n      });\n      return result;\n    } catch (error) {\n      if (allowFailure) {\n        return error.stdout || error.stderr || '';\n      }\n      throw error;\n    }\n  }\n\n  private parsePlaywrightResults(output: string): { total: number; passed: number; failed: number; details?: any[] } {\n    try {\n      const result = JSON.parse(output);\n      return {\n        total: result.stats?.total || 0,\n        passed: result.stats?.passed || 0,\n        failed: result.stats?.failed || 0,\n        details: result.tests || []\n      };\n    } catch {\n      // Fallback parsing for non-JSON output\n      const failedMatch = output.match(/(\\d+) failed/);\n      const passedMatch = output.match(/(\\d+) passed/);\n      \n      const failed = failedMatch ? parseInt(failedMatch[1]) : 0;\n      const passed = passedMatch ? parseInt(passedMatch[1]) : 0;\n      \n      return {\n        total: failed + passed,\n        passed,\n        failed\n      };\n    }\n  }\n\n  private parseEslintResults(eslintReport: any[]): { total: number; errors: number; warnings: number; details: any[] } {\n    const stats = eslintReport.reduce((acc, file) => {\n      acc.total += file.messages.length;\n      acc.errors += file.errorCount;\n      acc.warnings += file.warningCount;\n      \n      // Add file details for serious issues\n      if (file.errorCount > 0 || file.warningCount > 5) {\n        acc.details.push({\n          filePath: file.filePath,\n          errors: file.errorCount,\n          warnings: file.warningCount,\n          messages: file.messages.slice(0, 5) // First 5 messages only\n        });\n      }\n      \n      return acc;\n    }, { total: 0, errors: 0, warnings: 0, details: [] });\n\n    return stats;\n  }\n\n  private parseBiomeResults(biomeReport: any): { total: number; errors: number; warnings: number } {\n    // Biome report structure may vary, adapt as needed\n    let total = 0;\n    let errors = 0;\n    let warnings = 0;\n\n    if (biomeReport.diagnostics) {\n      total = biomeReport.diagnostics.length;\n      errors = biomeReport.diagnostics.filter(d => d.severity === 'error').length;\n      warnings = biomeReport.diagnostics.filter(d => d.severity === 'warning').length;\n    }\n\n    return { total, errors, warnings };\n  }\n\n  private parseBiomeOutputText(biomeOutput: string): { total: number; errors: number; warnings: number } {\n    // Fallback text parsing for when JSON parsing fails\n    let total = 0;\n    let errors = 0;\n    let warnings = 0;\n\n    const lines = biomeOutput.split('\\n');\n    \n    // Look for summary patterns in Biome output\n    const summaryLine = lines.find(line => \n      line.includes('Found') || line.includes('issues') || line.includes('diagnostics')\n    );\n    \n    if (summaryLine) {\n      const numberMatches = summaryLine.match(/\\d+/g);\n      if (numberMatches && numberMatches.length > 0) {\n        total = parseInt(numberMatches[0]);\n      }\n    }\n\n    // Count error/warning patterns\n    errors = (biomeOutput.match(/error/gi) || []).length;\n    warnings = (biomeOutput.match(/warning/gi) || []).length;\n\n    return { total: Math.max(total, errors + warnings), errors, warnings };\n  }\n\n  private parseTscResults(tscOutput: string): { count: number; errors: string[] } {\n    if (!tscOutput) {\n      return { count: 0, errors: [] };\n    }\n\n    const lines = tscOutput.split('\\n').filter(line => line.includes('error TS'));\n    return {\n      count: lines.length,\n      errors: lines.slice(0, 10) // First 10 errors only\n    };\n  }\n\n  private generateFinalReport(): AuditSuiteResult {\n    const totalDuration = Date.now() - this.startTime;\n    const timestamp = new Date().toISOString();\n    \n    // Calculate overall status\n    const failedPillars = this.results.filter(r => r.status === 'failed').length;\n    const overallStatus = failedPillars === 0 ? 'passed' : (failedPillars < this.results.length ? 'partial' : 'failed');\n\n    // Generate HTML report\n    const reportPath = this.generateHtmlReport(timestamp, totalDuration, overallStatus);\n\n    return {\n      timestamp,\n      totalDuration,\n      results: this.results,\n      overallStatus,\n      reportPath\n    };\n  }\n\n  private generateHtmlReport(timestamp: string, duration: number, overallStatus: string): string {\n    const reportPath = path.join(reportsDir, `comprehensive-audit-${Date.now()}.html`);\n    \n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Comprehensive Audit Report - AIGlossaryPro</title>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }\n        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; padding: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { text-align: center; margin-bottom: 30px; }\n        .status { display: inline-block; padding: 8px 16px; border-radius: 4px; font-weight: bold; }\n        .status.passed { background: #d4edda; color: #155724; }\n        .status.failed { background: #f8d7da; color: #721c24; }\n        .status.partial { background: #fff3cd; color: #856404; }\n        .pillar { margin: 20px 0; padding: 20px; border-left: 4px solid #007bff; background: #f8f9fa; }\n        .pillar.failed { border-left-color: #dc3545; }\n        .pillar.passed { border-left-color: #28a745; }\n        .summary { display: flex; gap: 20px; margin: 10px 0; }\n        .metric { text-align: center; }\n        .metric-value { font-size: 24px; font-weight: bold; }\n        .metric-label { font-size: 12px; color: #666; }\n        .details { margin-top: 15px; }\n        .details summary { cursor: pointer; font-weight: bold; }\n        .details pre { background: #f1f1f1; padding: 10px; border-radius: 4px; overflow-x: auto; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🔍 Comprehensive Audit Report</h1>\n            <p><strong>AIGlossaryPro</strong> - ${timestamp}</p>\n            <div class=\"status ${overallStatus}\">${overallStatus.toUpperCase()}</div>\n            <p>Total Duration: ${(duration / 1000).toFixed(2)}s</p>\n        </div>\n\n        <div class=\"executive-summary\">\n            <h2>📊 Executive Summary</h2>\n            <div class=\"summary\">\n                ${this.results.map(result => `\n                    <div class=\"metric\">\n                        <div class=\"metric-value ${result.status === 'passed' ? 'text-success' : 'text-danger'}\">${result.summary.total}</div>\n                        <div class=\"metric-label\">${result.pillar}</div>\n                    </div>\n                `).join('')}\n            </div>\n        </div>\n\n        ${this.results.map(result => `\n            <div class=\"pillar ${result.status}\">\n                <h3>${this.getPillarTitle(result.pillar)} ${result.status === 'passed' ? '✅' : '❌'}</h3>\n                <div class=\"summary\">\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.total}</div>\n                        <div class=\"metric-label\">Total</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.passed}</div>\n                        <div class=\"metric-label\">Passed</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.failed}</div>\n                        <div class=\"metric-label\">Failed</div>\n                    </div>\n                    <div class=\"metric\">\n                        <div class=\"metric-value\">${result.summary.warnings}</div>\n                        <div class=\"metric-label\">Warnings</div>\n                    </div>\n                </div>\n                <p><strong>Duration:</strong> ${(result.duration / 1000).toFixed(2)}s</p>\n                \n                <details class=\"details\">\n                    <summary>View Details</summary>\n                    <pre>${JSON.stringify(result.details, null, 2)}</pre>\n                </details>\n            </div>\n        `).join('')}\n\n        <div class=\"footer\">\n            <p><em>Generated by AIGlossaryPro Comprehensive Audit Suite</em></p>\n        </div>\n    </div>\n</body>\n</html>`;\n\n    fs.writeFileSync(reportPath, html);\n    return reportPath;\n  }\n\n  private getPillarTitle(pillar: string): string {\n    const titles = {\n      'visual': '🎨 Visual & Interaction Correctness',\n      'accessibility': '♿ Accessibility (WCAG 2.1 AA)',\n      'performance': '⚡ Performance Analysis',\n      'functional': '🧪 Functional Correctness',\n      'code-quality': '📋 Code Quality & Best Practices'\n    };\n    return titles[pillar] || pillar;\n  }\n}\n\n// CLI Interface\nasync function main() {\n  const args = process.argv.slice(2);\n  const pillar = args[0];\n\n  const suite = new ComprehensiveAuditSuite();\n\n  if (pillar && pillar !== 'all') {\n    console.log(`🚀 Running ${pillar} audit...`);\n    const result = await suite.runPillar(pillar);\n    console.log(`✨ ${pillar} audit complete!`);\n    console.log(`Status: ${result.status}`);\n    console.log(`Duration: ${(result.duration / 1000).toFixed(2)}s`);\n    console.log(`Summary: ${result.summary.passed}/${result.summary.total} passed`);\n  } else {\n    await suite.runAll();\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error);\n}\n\nexport { ComprehensiveAuditSuite };"},"tags":["fixable"],"source":null},{"category":"lint/style/useTemplate","severity":"information","description":"Template literals are preferred over string concatenation.","message":[{"elements":["Emphasis"],"content":"Template"},{"elements":[],"content":" literals are preferred over "},{"elements":["Emphasis"],"content":"string concatenation."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Unsafe fix: Use a "},{"elements":["Emphasis"],"content":"template literal"},{"elements":[],"content":"."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';async function finalClearAll() {\n  console.log('🗑 FINAL CLEAR ALL - HANDLING FOREIGN KEY CONSTRAINTS');\n  console.log('`=' + ${'='.repeat(60)}`);\n\n  try {\nfinalClearAll().catch(console.error);\n","ops":[{"diffOp":{"equal":{"range":[0,54]}}},{"equalLines":{"line_count":2}},{"diffOp":{"equal":{"range":[54,178]}}},{"diffOp":{"delete":{"range":[178,179]}}},{"diffOp":{"insert":{"range":[179,180]}}},{"diffOp":{"equal":{"range":[180,181]}}},{"diffOp":{"delete":{"range":[181,185]}}},{"diffOp":{"insert":{"range":[185,187]}}},{"diffOp":{"equal":{"range":[187,201]}}},{"diffOp":{"insert":{"range":[201,203]}}},{"diffOp":{"equal":{"range":[203,214]}}},{"equalLines":{"line_count":102}},{"diffOp":{"equal":{"range":[214,253]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/final-clear-all.ts"},"span":[218,238],"sourceCode":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';\nimport { db } from '../server/db.js';\n\nasync function finalClearAll() {\n  console.log('🗑 FINAL CLEAR ALL - HANDLING FOREIGN KEY CONSTRAINTS');\n  console.log('=' + '='.repeat(60));\n\n  try {\n    // Clear in correct dependency order to avoid foreign key issues\n    const orderedClear = [\n      // First: Clear all tables that reference enhanced_terms\n      { table: 'term_sections', reason: 'References enhanced_terms' },\n      { table: 'interactive_elements', reason: 'References enhanced_terms' },\n      { table: 'term_relationships', reason: 'References enhanced_terms' },\n\n      // Then: Clear enhanced_terms\n      { table: 'enhanced_terms', reason: 'Main enhanced terms table' },\n\n      // Finally: Clear categories (if not referenced by enhanced_terms)\n      { table: 'categories', reason: 'Category definitions' },\n    ];\n\n    console.log('\\n🔄 Clearing tables in dependency order...\\n');\n\n    for (const { table, reason } of orderedClear) {\n      try {\n        // Check if table exists and get count\n        const countQuery = `SELECT COUNT(*) as count FROM ${table}`;\n        const countResult = await db.execute(sql.raw(countQuery));\n        const beforeCount = (countResult.rows[0] as any).count;\n\n        if (beforeCount > 0) {\n          // Clear the table\n          await db.execute(sql.raw(`DELETE FROM ${table}`));\n\n          // Verify cleared\n          const afterResult = await db.execute(sql.raw(countQuery));\n          const afterCount = (afterResult.rows[0] as any).count;\n\n          console.log(`✅ ${table}: ${beforeCount} → ${afterCount} records (${reason})`);\n        } else {\n          console.log(`✅ ${table}: Already empty (${reason})`);\n        }\n      } catch (error: any) {\n        console.log(`! ${table}: ${error.message.split('\\\\n')[0]}`);\n\n        // If table doesn't exist, that's fine\n        if (error.message.includes('does not exist')) {\n          console.log(`   → Table doesn't exist, skipping`);\n        }\n      }\n    }\n\n    // Final comprehensive verification\n    console.log('\\n📊 FINAL DATABASE STATE:');\n    console.log('-'.repeat(50));\n\n    const allTables = [\n      'terms',\n      'enhanced_terms',\n      'categories',\n      'term_sections',\n      'interactive_elements',\n      'term_relationships',\n      'users',\n    ];\n\n    let totalRecords = 0;\n    let emptyTables = 0;\n\n    for (const tableName of allTables) {\n      try {\n        const result = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM ${tableName}`));\n        const count = (result.rows[0] as any).count;\n        totalRecords += count;\n\n        let status = '';\n        if (count === 0) {\n          status = tableName === 'users' ? '! EMPTY (should preserve users)' : '✅ EMPTY';\n          emptyTables++;\n        } else if (tableName === 'users') {\n          status = '👥 PRESERVED (good)';\n        } else {\n          status = '❌ STILL HAS DATA';\n        }\n\n        console.log(`${tableName.padEnd(20)}: ${String(count).padStart(6)} records ${status}`);\n      } catch (error: any) {\n        console.log(`${tableName.padEnd(20)}: ERROR - ${error.message.split('\\\\n')[0]}`);\n      }\n    }\n\n    console.log('-'.repeat(50));\n    console.log(`Total records remaining: ${totalRecords}`);\n    console.log(`Empty tables: ${emptyTables}/${allTables.length}`);\n\n    if (totalRecords <= 8) {\n      // Only users should remain\n      console.log('\\n🎉 SUCCESS! Database successfully cleared for fresh start');\n      console.log('✅ Ready for 295-column hierarchical structure');\n    } else {\n      console.log('\\n! Some tables still contain data - may need manual intervention');\n    }\n\n    console.log('\\n📁 Original data backed up in: backups/pre-fresh-start-*');\n    console.log('🚀 Ready to receive your 295-column prompts!');\n  } catch (error) {\n    console.error('❌ Error in final clear:', error);\n  }\n}\n\nfinalClearAll().catch(console.error);\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useTemplate","severity":"information","description":"Template literals are preferred over string concatenation.","message":[{"elements":["Emphasis"],"content":"Template"},{"elements":[],"content":" literals are preferred over "},{"elements":["Emphasis"],"content":"string concatenation."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Unsafe fix: Use a "},{"elements":["Emphasis"],"content":"template literal"},{"elements":[],"content":"."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';async function comprehensiveDataStatus() {\n  console.log('🔍 COMPREHENSIVE DATABASE STATUS INVESTIGATION\\n');\n  console.log('`=' + ${'='.repeat(60)}`);\n\n  try {\ncomprehensiveDataStatus().catch(console.error);\n","ops":[{"diffOp":{"equal":{"range":[0,54]}}},{"equalLines":{"line_count":2}},{"diffOp":{"equal":{"range":[54,180]}}},{"diffOp":{"delete":{"range":[180,181]}}},{"diffOp":{"insert":{"range":[181,182]}}},{"diffOp":{"equal":{"range":[182,183]}}},{"diffOp":{"delete":{"range":[183,187]}}},{"diffOp":{"insert":{"range":[187,189]}}},{"diffOp":{"equal":{"range":[189,203]}}},{"diffOp":{"insert":{"range":[203,205]}}},{"diffOp":{"equal":{"range":[205,216]}}},{"equalLines":{"line_count":229}},{"diffOp":{"equal":{"range":[216,265]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/final-data-status.ts"},"span":[220,240],"sourceCode":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';\nimport { db } from '../server/db.js';\n\nasync function comprehensiveDataStatus() {\n  console.log('🔍 COMPREHENSIVE DATABASE STATUS INVESTIGATION\\n');\n  console.log('=' + '='.repeat(60));\n\n  try {\n    // 1. Table counts and basic stats\n    console.log('\\n📊 DATABASE OVERVIEW:');\n    console.log('-'.repeat(40));\n\n    const overview = await db.execute(sql`\n      SELECT \n        (SELECT COUNT(*) FROM terms) as terms_count,\n        (SELECT COUNT(*) FROM enhanced_terms) as enhanced_terms_count,\n        (SELECT COUNT(*) FROM categories) as categories_count,\n        (SELECT COUNT(*) FROM term_sections) as term_sections_count,\n        (SELECT COUNT(*) FROM users) as users_count,\n        (SELECT COUNT(*) FROM term_views) as term_views_count\n    `);\n\n    const stats = overview.rows[0] as any;\n    console.log(`✅ Terms: ${stats.terms_count.toLocaleString()}`);\n    console.log(`⭐ Enhanced Terms: ${stats.enhanced_terms_count.toLocaleString()}`);\n    console.log(`📂 Categories: ${stats.categories_count.toLocaleString()}`);\n    console.log(`📝 Term Sections: ${stats.term_sections_count.toLocaleString()}`);\n    console.log(`👥 Users: ${stats.users_count.toLocaleString()}`);\n    console.log(`👁 Term Views: ${stats.term_views_count.toLocaleString()}`);\n\n    // 2. Data quality check for terms\n    console.log('\\n📋 TERMS DATA QUALITY:');\n    console.log('-'.repeat(40));\n\n    const termsQuality = await db.execute(sql`\n      SELECT \n        COUNT(*) as total_terms,\n        COUNT(CASE WHEN definition IS NULL OR definition = '' THEN 1 END) as missing_definitions,\n        COUNT(CASE WHEN short_definition IS NULL OR short_definition = '' THEN 1 END) as missing_short_definitions,\n        COUNT(CASE WHEN category_id IS NULL THEN 1 END) as missing_categories,\n        AVG(LENGTH(definition)) as avg_definition_length\n      FROM terms\n    `);\n\n    const tq = termsQuality.rows[0] as any;\n    const completeness = (\n      ((tq.total_terms - tq.missing_definitions) / tq.total_terms) *\n      100\n    ).toFixed(1);\n\n    console.log(`Total Terms: ${tq.total_terms.toLocaleString()}`);\n    console.log(\n      `Missing Definitions: ${tq.missing_definitions} (${((tq.missing_definitions / tq.total_terms) * 100).toFixed(1)}%)`\n    );\n    console.log(`Missing Short Definitions: ${tq.missing_short_definitions}`);\n    console.log(`Missing Categories: ${tq.missing_categories}`);\n    console.log(`Average Definition Length: ${Math.round(tq.avg_definition_length)} characters`);\n    console.log(`Definition Completeness: ${completeness}%`);\n\n    // 3. Enhanced terms quality check\n    console.log('\\n⭐ ENHANCED TERMS DATA QUALITY:');\n    console.log('-'.repeat(40));\n\n    const enhancedQuality = await db.execute(sql`\n      SELECT \n        COUNT(*) as total_enhanced,\n        COUNT(CASE WHEN has_code_examples = true THEN 1 END) as with_code_examples,\n        COUNT(CASE WHEN has_interactive_elements = true THEN 1 END) as with_interactive,\n        COUNT(CASE WHEN has_case_studies = true THEN 1 END) as with_case_studies,\n        COUNT(CASE WHEN has_implementation = true THEN 1 END) as with_implementation,\n        COUNT(CASE WHEN main_categories IS NOT NULL AND array_length(main_categories, 1) > 0 THEN 1 END) as with_categories\n      FROM enhanced_terms\n    `);\n\n    const eq = enhancedQuality.rows[0] as any;\n\n    console.log(`Total Enhanced Terms: ${eq.total_enhanced.toLocaleString()}`);\n    console.log(\n      `With Code Examples: ${eq.with_code_examples} (${((eq.with_code_examples / eq.total_enhanced) * 100).toFixed(1)}%)`\n    );\n    console.log(\n      `With Interactive Elements: ${eq.with_interactive} (${((eq.with_interactive / eq.total_enhanced) * 100).toFixed(1)}%)`\n    );\n    console.log(\n      `With Case Studies: ${eq.with_case_studies} (${((eq.with_case_studies / eq.total_enhanced) * 100).toFixed(1)}%)`\n    );\n    console.log(\n      `With Implementation: ${eq.with_implementation} (${((eq.with_implementation / eq.total_enhanced) * 100).toFixed(1)}%)`\n    );\n    console.log(\n      `With Categories: ${eq.with_categories} (${((eq.with_categories / eq.total_enhanced) * 100).toFixed(1)}%)`\n    );\n\n    // 4. Sample searchable content\n    console.log('\\n🔍 SEARCH FUNCTIONALITY TEST:');\n    console.log('-'.repeat(40));\n\n    const searchTests = [\n      'machine learning',\n      'neural network',\n      'deep learning',\n      'artificial intelligence',\n      'algorithm',\n    ];\n\n    for (const searchTerm of searchTests) {\n      const searchResults = await db.execute(sql`\n        SELECT COUNT(*) as match_count\n        FROM enhanced_terms \n        WHERE LOWER(name) LIKE ${`%${searchTerm.toLowerCase()}%`}\n           OR LOWER(full_definition) LIKE ${`%${searchTerm.toLowerCase()}%`}\n           OR LOWER(search_text) LIKE ${`%${searchTerm.toLowerCase()}%`}\n      `);\n\n      const count = (searchResults.rows[0] as any).match_count;\n      const status = count > 0 ? '✅' : '❌';\n      console.log(`${status} \"${searchTerm}\": ${count} matches`);\n    }\n\n    // 5. Sample content for verification\n    console.log('\\n📝 SAMPLE CONTENT:');\n    console.log('-'.repeat(40));\n\n    const sampleContent = await db.execute(sql`\n      SELECT et.name, et.short_definition, et.main_categories[1] as primary_category,\n             CASE WHEN et.has_code_examples THEN '✅' ELSE '❌' END as code_examples,\n             CASE WHEN et.has_interactive_elements THEN '✅' ELSE '❌' END as interactive\n      FROM enhanced_terms et \n      WHERE et.full_definition IS NOT NULL \n      ORDER BY et.view_count DESC NULLS LAST\n      LIMIT 5\n    `);\n\n    sampleContent.rows.forEach((term: any, i) => {\n      console.log(`${i + 1}. ${term.name} (${term.primary_category || 'Uncategorized'})`);\n      console.log(`   ${term.short_definition?.substring(0, 80)}...`);\n      console.log(`   Code: ${term.code_examples} | Interactive: ${term.interactive}`);\n    });\n\n    // 6. Categories breakdown\n    console.log('\\n📂 CATEGORIES BREAKDOWN:');\n    console.log('-'.repeat(40));\n\n    const topCategories = await db.execute(sql`\n      SELECT c.name, COUNT(t.id) as term_count\n      FROM categories c\n      LEFT JOIN terms t ON c.id = t.category_id\n      GROUP BY c.id, c.name\n      ORDER BY term_count DESC\n      LIMIT 10\n    `);\n\n    topCategories.rows.forEach((cat: any, i) => {\n      console.log(`${i + 1}. ${cat.name}: ${cat.term_count} terms`);\n    });\n\n    // 7. API readiness check\n    console.log('\\n🚀 API READINESS ASSESSMENT:');\n    console.log('-'.repeat(40));\n\n    // Check if we have enough data for each major endpoint\n    const apiReadiness = await db.execute(sql`\n      SELECT \n        (SELECT COUNT(*) FROM enhanced_terms WHERE full_definition IS NOT NULL) as searchable_terms,\n        (SELECT COUNT(DISTINCT c.name) FROM categories c \n         JOIN terms t ON c.id = t.category_id) as active_categories,\n        (SELECT COUNT(*) FROM term_sections) as term_sections,\n        (SELECT COUNT(*) FROM enhanced_terms WHERE has_code_examples = true) as terms_with_examples\n    `);\n\n    const api = apiReadiness.rows[0] as any;\n\n    console.log(\n      `Searchable Terms: ${api.searchable_terms.toLocaleString()} ${api.searchable_terms > 1000 ? '✅' : '!'}`\n    );\n    console.log(\n      `Active Categories: ${api.active_categories} ${api.active_categories > 10 ? '✅' : '!'}`\n    );\n    console.log(`Term Sections: ${api.term_sections} ${api.term_sections > 0 ? '✅' : '!'}`);\n    console.log(\n      `Terms with Examples: ${api.terms_with_examples} ${api.terms_with_examples > 100 ? '✅' : '!'}`\n    );\n\n    // 8. Potential issues identification\n    console.log('\\n! POTENTIAL ISSUES:');\n    console.log('-'.repeat(40));\n\n    const issues: string[] = [];\n\n    if (tq.missing_definitions > 0) {\n      issues.push(`${tq.missing_definitions} terms missing definitions`);\n    }\n\n    if (eq.with_code_examples / eq.total_enhanced < 0.1) {\n      issues.push(\n        `Low code examples coverage: ${((eq.with_code_examples / eq.total_enhanced) * 100).toFixed(1)}%`\n      );\n    }\n\n    if (api.active_categories < 20) {\n      issues.push(`Limited category diversity: ${api.active_categories} active categories`);\n    }\n\n    if (issues.length === 0) {\n      console.log('✅ No critical issues detected');\n    } else {\n      issues.forEach((issue, i) => {\n        console.log(`${i + 1}. ! ${issue}`);\n      });\n    }\n\n    // 9. Production readiness summary\n    console.log('\\n🎯 PRODUCTION READINESS SUMMARY:');\n    console.log('=' + '='.repeat(40));\n\n    const readinessScore = [\n      stats.terms_count > 5000 ? 25 : 0, // Sufficient content\n      completeness > 95 ? 25 : 0, // High quality\n      api.searchable_terms > 1000 ? 25 : 0, // Search functionality\n      issues.length === 0 ? 25 : 0, // No critical issues\n    ].reduce((a, b) => a + b, 0);\n\n    console.log(`📊 Readiness Score: ${readinessScore}/100`);\n\n    if (readinessScore >= 75) {\n      console.log('🟢 READY FOR PRODUCTION - Database is well-populated and functional');\n    } else if (readinessScore >= 50) {\n      console.log('🟡 PARTIALLY READY - Some optimization needed before production');\n    } else {\n      console.log('🔴 NOT READY - Significant issues need to be addressed');\n    }\n\n    console.log('\\n✅ Comprehensive database investigation completed');\n  } catch (error) {\n    console.error('❌ Database investigation failed:', error);\n  }\n}\n\ncomprehensiveDataStatus().catch(console.error);\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useTemplate","severity":"information","description":"Template literals are preferred over string concatenation.","message":[{"elements":["Emphasis"],"content":"Template"},{"elements":[],"content":" literals are preferred over "},{"elements":["Emphasis"],"content":"string concatenation."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Unsafe fix: Use a "},{"elements":["Emphasis"],"content":"template literal"},{"elements":[],"content":"."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';    // 9. Production readiness summary\n    console.log('\\n🎯 PRODUCTION READINESS SUMMARY:');\n    console.log('`=' + ${'='.repeat(40)}`);\n\n    const readinessScore = [\ncomprehensiveDataStatus().catch(console.error);\n","ops":[{"diffOp":{"equal":{"range":[0,54]}}},{"equalLines":{"line_count":210}},{"diffOp":{"equal":{"range":[54,166]}}},{"diffOp":{"delete":{"range":[166,167]}}},{"diffOp":{"insert":{"range":[167,168]}}},{"diffOp":{"equal":{"range":[168,169]}}},{"diffOp":{"delete":{"range":[169,173]}}},{"diffOp":{"insert":{"range":[173,175]}}},{"diffOp":{"equal":{"range":[175,189]}}},{"diffOp":{"insert":{"range":[189,191]}}},{"diffOp":{"equal":{"range":[191,223]}}},{"equalLines":{"line_count":21}},{"diffOp":{"equal":{"range":[223,272]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/final-data-status.ts"},"span":[8530,8550],"sourceCode":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';\nimport { db } from '../server/db.js';\n\nasync function comprehensiveDataStatus() {\n  console.log('🔍 COMPREHENSIVE DATABASE STATUS INVESTIGATION\\n');\n  console.log('=' + '='.repeat(60));\n\n  try {\n    // 1. Table counts and basic stats\n    console.log('\\n📊 DATABASE OVERVIEW:');\n    console.log('-'.repeat(40));\n\n    const overview = await db.execute(sql`\n      SELECT \n        (SELECT COUNT(*) FROM terms) as terms_count,\n        (SELECT COUNT(*) FROM enhanced_terms) as enhanced_terms_count,\n        (SELECT COUNT(*) FROM categories) as categories_count,\n        (SELECT COUNT(*) FROM term_sections) as term_sections_count,\n        (SELECT COUNT(*) FROM users) as users_count,\n        (SELECT COUNT(*) FROM term_views) as term_views_count\n    `);\n\n    const stats = overview.rows[0] as any;\n    console.log(`✅ Terms: ${stats.terms_count.toLocaleString()}`);\n    console.log(`⭐ Enhanced Terms: ${stats.enhanced_terms_count.toLocaleString()}`);\n    console.log(`📂 Categories: ${stats.categories_count.toLocaleString()}`);\n    console.log(`📝 Term Sections: ${stats.term_sections_count.toLocaleString()}`);\n    console.log(`👥 Users: ${stats.users_count.toLocaleString()}`);\n    console.log(`👁 Term Views: ${stats.term_views_count.toLocaleString()}`);\n\n    // 2. Data quality check for terms\n    console.log('\\n📋 TERMS DATA QUALITY:');\n    console.log('-'.repeat(40));\n\n    const termsQuality = await db.execute(sql`\n      SELECT \n        COUNT(*) as total_terms,\n        COUNT(CASE WHEN definition IS NULL OR definition = '' THEN 1 END) as missing_definitions,\n        COUNT(CASE WHEN short_definition IS NULL OR short_definition = '' THEN 1 END) as missing_short_definitions,\n        COUNT(CASE WHEN category_id IS NULL THEN 1 END) as missing_categories,\n        AVG(LENGTH(definition)) as avg_definition_length\n      FROM terms\n    `);\n\n    const tq = termsQuality.rows[0] as any;\n    const completeness = (\n      ((tq.total_terms - tq.missing_definitions) / tq.total_terms) *\n      100\n    ).toFixed(1);\n\n    console.log(`Total Terms: ${tq.total_terms.toLocaleString()}`);\n    console.log(\n      `Missing Definitions: ${tq.missing_definitions} (${((tq.missing_definitions / tq.total_terms) * 100).toFixed(1)}%)`\n    );\n    console.log(`Missing Short Definitions: ${tq.missing_short_definitions}`);\n    console.log(`Missing Categories: ${tq.missing_categories}`);\n    console.log(`Average Definition Length: ${Math.round(tq.avg_definition_length)} characters`);\n    console.log(`Definition Completeness: ${completeness}%`);\n\n    // 3. Enhanced terms quality check\n    console.log('\\n⭐ ENHANCED TERMS DATA QUALITY:');\n    console.log('-'.repeat(40));\n\n    const enhancedQuality = await db.execute(sql`\n      SELECT \n        COUNT(*) as total_enhanced,\n        COUNT(CASE WHEN has_code_examples = true THEN 1 END) as with_code_examples,\n        COUNT(CASE WHEN has_interactive_elements = true THEN 1 END) as with_interactive,\n        COUNT(CASE WHEN has_case_studies = true THEN 1 END) as with_case_studies,\n        COUNT(CASE WHEN has_implementation = true THEN 1 END) as with_implementation,\n        COUNT(CASE WHEN main_categories IS NOT NULL AND array_length(main_categories, 1) > 0 THEN 1 END) as with_categories\n      FROM enhanced_terms\n    `);\n\n    const eq = enhancedQuality.rows[0] as any;\n\n    console.log(`Total Enhanced Terms: ${eq.total_enhanced.toLocaleString()}`);\n    console.log(\n      `With Code Examples: ${eq.with_code_examples} (${((eq.with_code_examples / eq.total_enhanced) * 100).toFixed(1)}%)`\n    );\n    console.log(\n      `With Interactive Elements: ${eq.with_interactive} (${((eq.with_interactive / eq.total_enhanced) * 100).toFixed(1)}%)`\n    );\n    console.log(\n      `With Case Studies: ${eq.with_case_studies} (${((eq.with_case_studies / eq.total_enhanced) * 100).toFixed(1)}%)`\n    );\n    console.log(\n      `With Implementation: ${eq.with_implementation} (${((eq.with_implementation / eq.total_enhanced) * 100).toFixed(1)}%)`\n    );\n    console.log(\n      `With Categories: ${eq.with_categories} (${((eq.with_categories / eq.total_enhanced) * 100).toFixed(1)}%)`\n    );\n\n    // 4. Sample searchable content\n    console.log('\\n🔍 SEARCH FUNCTIONALITY TEST:');\n    console.log('-'.repeat(40));\n\n    const searchTests = [\n      'machine learning',\n      'neural network',\n      'deep learning',\n      'artificial intelligence',\n      'algorithm',\n    ];\n\n    for (const searchTerm of searchTests) {\n      const searchResults = await db.execute(sql`\n        SELECT COUNT(*) as match_count\n        FROM enhanced_terms \n        WHERE LOWER(name) LIKE ${`%${searchTerm.toLowerCase()}%`}\n           OR LOWER(full_definition) LIKE ${`%${searchTerm.toLowerCase()}%`}\n           OR LOWER(search_text) LIKE ${`%${searchTerm.toLowerCase()}%`}\n      `);\n\n      const count = (searchResults.rows[0] as any).match_count;\n      const status = count > 0 ? '✅' : '❌';\n      console.log(`${status} \"${searchTerm}\": ${count} matches`);\n    }\n\n    // 5. Sample content for verification\n    console.log('\\n📝 SAMPLE CONTENT:');\n    console.log('-'.repeat(40));\n\n    const sampleContent = await db.execute(sql`\n      SELECT et.name, et.short_definition, et.main_categories[1] as primary_category,\n             CASE WHEN et.has_code_examples THEN '✅' ELSE '❌' END as code_examples,\n             CASE WHEN et.has_interactive_elements THEN '✅' ELSE '❌' END as interactive\n      FROM enhanced_terms et \n      WHERE et.full_definition IS NOT NULL \n      ORDER BY et.view_count DESC NULLS LAST\n      LIMIT 5\n    `);\n\n    sampleContent.rows.forEach((term: any, i) => {\n      console.log(`${i + 1}. ${term.name} (${term.primary_category || 'Uncategorized'})`);\n      console.log(`   ${term.short_definition?.substring(0, 80)}...`);\n      console.log(`   Code: ${term.code_examples} | Interactive: ${term.interactive}`);\n    });\n\n    // 6. Categories breakdown\n    console.log('\\n📂 CATEGORIES BREAKDOWN:');\n    console.log('-'.repeat(40));\n\n    const topCategories = await db.execute(sql`\n      SELECT c.name, COUNT(t.id) as term_count\n      FROM categories c\n      LEFT JOIN terms t ON c.id = t.category_id\n      GROUP BY c.id, c.name\n      ORDER BY term_count DESC\n      LIMIT 10\n    `);\n\n    topCategories.rows.forEach((cat: any, i) => {\n      console.log(`${i + 1}. ${cat.name}: ${cat.term_count} terms`);\n    });\n\n    // 7. API readiness check\n    console.log('\\n🚀 API READINESS ASSESSMENT:');\n    console.log('-'.repeat(40));\n\n    // Check if we have enough data for each major endpoint\n    const apiReadiness = await db.execute(sql`\n      SELECT \n        (SELECT COUNT(*) FROM enhanced_terms WHERE full_definition IS NOT NULL) as searchable_terms,\n        (SELECT COUNT(DISTINCT c.name) FROM categories c \n         JOIN terms t ON c.id = t.category_id) as active_categories,\n        (SELECT COUNT(*) FROM term_sections) as term_sections,\n        (SELECT COUNT(*) FROM enhanced_terms WHERE has_code_examples = true) as terms_with_examples\n    `);\n\n    const api = apiReadiness.rows[0] as any;\n\n    console.log(\n      `Searchable Terms: ${api.searchable_terms.toLocaleString()} ${api.searchable_terms > 1000 ? '✅' : '!'}`\n    );\n    console.log(\n      `Active Categories: ${api.active_categories} ${api.active_categories > 10 ? '✅' : '!'}`\n    );\n    console.log(`Term Sections: ${api.term_sections} ${api.term_sections > 0 ? '✅' : '!'}`);\n    console.log(\n      `Terms with Examples: ${api.terms_with_examples} ${api.terms_with_examples > 100 ? '✅' : '!'}`\n    );\n\n    // 8. Potential issues identification\n    console.log('\\n! POTENTIAL ISSUES:');\n    console.log('-'.repeat(40));\n\n    const issues: string[] = [];\n\n    if (tq.missing_definitions > 0) {\n      issues.push(`${tq.missing_definitions} terms missing definitions`);\n    }\n\n    if (eq.with_code_examples / eq.total_enhanced < 0.1) {\n      issues.push(\n        `Low code examples coverage: ${((eq.with_code_examples / eq.total_enhanced) * 100).toFixed(1)}%`\n      );\n    }\n\n    if (api.active_categories < 20) {\n      issues.push(`Limited category diversity: ${api.active_categories} active categories`);\n    }\n\n    if (issues.length === 0) {\n      console.log('✅ No critical issues detected');\n    } else {\n      issues.forEach((issue, i) => {\n        console.log(`${i + 1}. ! ${issue}`);\n      });\n    }\n\n    // 9. Production readiness summary\n    console.log('\\n🎯 PRODUCTION READINESS SUMMARY:');\n    console.log('=' + '='.repeat(40));\n\n    const readinessScore = [\n      stats.terms_count > 5000 ? 25 : 0, // Sufficient content\n      completeness > 95 ? 25 : 0, // High quality\n      api.searchable_terms > 1000 ? 25 : 0, // Search functionality\n      issues.length === 0 ? 25 : 0, // No critical issues\n    ].reduce((a, b) => a + b, 0);\n\n    console.log(`📊 Readiness Score: ${readinessScore}/100`);\n\n    if (readinessScore >= 75) {\n      console.log('🟢 READY FOR PRODUCTION - Database is well-populated and functional');\n    } else if (readinessScore >= 50) {\n      console.log('🟡 PARTIALLY READY - Some optimization needed before production');\n    } else {\n      console.log('🔴 NOT READY - Significant issues need to be addressed');\n    }\n\n    console.log('\\n✅ Comprehensive database investigation completed');\n  } catch (error) {\n    console.error('❌ Database investigation failed:', error);\n  }\n}\n\ncomprehensiveDataStatus().catch(console.error);\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env node\n\nimport fs from 'fsnode:fs;\nimport path from 'path';\n}\n\nconsole.log('\\n🎉 Finished fixing useEffect dependencies!');","ops":[{"diffOp":{"equal":{"range":[0,36]}}},{"diffOp":{"equal":{"range":[36,37]}}},{"diffOp":{"delete":{"range":[37,39]}}},{"diffOp":{"insert":{"range":[39,46]}}},{"diffOp":{"equal":{"range":[36,37]}}},{"diffOp":{"equal":{"range":[46,73]}}},{"equalLines":{"line_count":38}},{"diffOp":{"equal":{"range":[73,138]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/fix-useeffect-deps.js"},"span":[36,40],"sourceCode":"#!/usr/bin/env node\n\nimport fs from 'fs';\nimport path from 'path';\n\nconst files = [\n  'client/src/pages/CodeExamples.tsx',\n  'client/src/pages/LearningPathDetail.tsx',\n  'client/src/pages/LearningPaths.tsx',\n];\n\nconst fixes = [\n  {\n    file: 'client/src/pages/CodeExamples.tsx',\n    search: /}, \\[fetchCodeExamples\\]\\);/g,\n    replace: '    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, []);'\n  },\n  {\n    file: 'client/src/pages/LearningPathDetail.tsx',\n    search: /}, \\[.*fetchLearningPath.*\\]\\);/g,\n    replace: '    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, [id]);'\n  },\n  {\n    file: 'client/src/pages/LearningPaths.tsx',\n    search: /}, \\[.*fetchLearningPaths.*fetchUserProgress.*\\]\\);/g,\n    replace: '    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, []);'\n  }\n];\n\nfor (const fix of fixes) {\n  try {\n    const filePath = path.join(process.cwd(), fix.file);\n    if (fs.existsSync(filePath)) {\n      let content = fs.readFileSync(filePath, 'utf8');\n      content = content.replace(fix.search, fix.replace);\n      fs.writeFileSync(filePath, content);\n      console.log(`✅ Fixed ${fix.file}`);\n    } else {\n      console.log(`!  File not found: ${fix.file}`);\n    }\n  } catch (error) {\n    console.error(`❌ Error fixing ${fix.file}:`, error.message);\n  }\n}\n\nconsole.log('\\n🎉 Finished fixing useEffect dependencies!');"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env node\n\nimport fs from 'fs';\nimport path from 'pathnode:path;\n\nconst files = [}\n\nconsole.log('\\n🎉 Finished fixing useEffect dependencies!');","ops":[{"diffOp":{"equal":{"range":[0,59]}}},{"diffOp":{"equal":{"range":[59,60]}}},{"diffOp":{"delete":{"range":[60,64]}}},{"diffOp":{"insert":{"range":[64,73]}}},{"diffOp":{"equal":{"range":[59,60]}}},{"diffOp":{"equal":{"range":[73,91]}}},{"equalLines":{"line_count":37}},{"diffOp":{"equal":{"range":[91,156]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/fix-useeffect-deps.js"},"span":[59,65],"sourceCode":"#!/usr/bin/env node\n\nimport fs from 'fs';\nimport path from 'path';\n\nconst files = [\n  'client/src/pages/CodeExamples.tsx',\n  'client/src/pages/LearningPathDetail.tsx',\n  'client/src/pages/LearningPaths.tsx',\n];\n\nconst fixes = [\n  {\n    file: 'client/src/pages/CodeExamples.tsx',\n    search: /}, \\[fetchCodeExamples\\]\\);/g,\n    replace: '    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, []);'\n  },\n  {\n    file: 'client/src/pages/LearningPathDetail.tsx',\n    search: /}, \\[.*fetchLearningPath.*\\]\\);/g,\n    replace: '    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, [id]);'\n  },\n  {\n    file: 'client/src/pages/LearningPaths.tsx',\n    search: /}, \\[.*fetchLearningPaths.*fetchUserProgress.*\\]\\);/g,\n    replace: '    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, []);'\n  }\n];\n\nfor (const fix of fixes) {\n  try {\n    const filePath = path.join(process.cwd(), fix.file);\n    if (fs.existsSync(filePath)) {\n      let content = fs.readFileSync(filePath, 'utf8');\n      content = content.replace(fix.search, fix.replace);\n      fs.writeFileSync(filePath, content);\n      console.log(`✅ Fixed ${fix.file}`);\n    } else {\n      console.log(`!  File not found: ${fix.file}`);\n    }\n  } catch (error) {\n    console.error(`❌ Error fixing ${fix.file}:`, error.message);\n  }\n}\n\nconsole.log('\\n🎉 Finished fixing useEffect dependencies!');"},"tags":["fixable"],"source":null},{"category":"lint/style/useTemplate","severity":"information","description":"Template literals are preferred over string concatenation.","message":[{"elements":["Emphasis"],"content":"Template"},{"elements":[],"content":" literals are preferred over "},{"elements":["Emphasis"],"content":"string concatenation."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Unsafe fix: Use a "},{"elements":["Emphasis"],"content":"template literal"},{"elements":[],"content":"."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';async function forceClearAll() {\n  console.log('🗑 FORCE CLEARING ALL DATA (including enhanced_terms and categories)');\n  console.log('`=' + ${'='.repeat(60)}`);\n\n  try {\nforceClearAll().catch(console.error);\n","ops":[{"diffOp":{"equal":{"range":[0,54]}}},{"equalLines":{"line_count":2}},{"diffOp":{"equal":{"range":[54,193]}}},{"diffOp":{"delete":{"range":[193,194]}}},{"diffOp":{"insert":{"range":[194,195]}}},{"diffOp":{"equal":{"range":[195,196]}}},{"diffOp":{"delete":{"range":[196,200]}}},{"diffOp":{"insert":{"range":[200,202]}}},{"diffOp":{"equal":{"range":[202,216]}}},{"diffOp":{"insert":{"range":[216,218]}}},{"diffOp":{"equal":{"range":[218,229]}}},{"equalLines":{"line_count":76}},{"diffOp":{"equal":{"range":[229,268]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/force-clear-all.ts"},"span":[233,253],"sourceCode":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';\nimport { db } from '../server/db.js';\n\nasync function forceClearAll() {\n  console.log('🗑 FORCE CLEARING ALL DATA (including enhanced_terms and categories)');\n  console.log('=' + '='.repeat(60));\n\n  try {\n    // Disable foreign key constraints temporarily\n    console.log('🔓 Disabling foreign key constraints...');\n    await db.execute(sql.raw(`SET session_replication_role = replica;`));\n\n    // Clear all content tables completely\n    const tablesToClear = ['enhanced_terms', 'categories'];\n\n    console.log('\\n🔄 Force clearing remaining tables...\\n');\n\n    for (const tableName of tablesToClear) {\n      try {\n        // Get count before clearing\n        const countResult = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM ${tableName}`));\n        const beforeCount = (countResult.rows[0] as any).count;\n\n        // Force delete everything\n        await db.execute(sql.raw(`TRUNCATE TABLE ${tableName} CASCADE`));\n\n        // Verify cleared\n        const afterResult = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM ${tableName}`));\n        const afterCount = (afterResult.rows[0] as any).count;\n\n        console.log(`✅ ${tableName}: ${beforeCount} → ${afterCount} records (TRUNCATED)`);\n      } catch (error: any) {\n        console.log(`! ${tableName}: ${error.message}`);\n\n        // Try alternative method\n        try {\n          await db.execute(sql.raw(`DELETE FROM ${tableName}`));\n          console.log(`✅ ${tableName}: Cleared with DELETE`);\n        } catch (error2: any) {\n          console.log(`❌ ${tableName}: Could not clear - ${error2.message}`);\n        }\n      }\n    }\n\n    // Re-enable foreign key constraints\n    console.log('\\n🔒 Re-enabling foreign key constraints...');\n    await db.execute(sql.raw(`SET session_replication_role = DEFAULT;`));\n\n    // Final verification\n    console.log('\\n📊 FINAL DATABASE STATE:');\n    console.log('-'.repeat(40));\n\n    const checkTables = ['terms', 'enhanced_terms', 'categories', 'term_sections', 'users'];\n\n    for (const tableName of checkTables) {\n      try {\n        const result = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM ${tableName}`));\n        const count = (result.rows[0] as any).count;\n\n        let status = '';\n        if (count === 0 && tableName !== 'users') {\n          status = '✅ EMPTY';\n        } else if (tableName === 'users' && count > 0) {\n          status = '👥 PRESERVED';\n        } else if (count === 0 && tableName === 'users') {\n          status = '! EMPTY (users cleared too)';\n        } else {\n          status = '! NOT EMPTY';\n        }\n\n        console.log(`${tableName}: ${count} records ${status}`);\n      } catch (error: any) {\n        console.log(`${tableName}: ERROR - ${error.message}`);\n      }\n    }\n\n    console.log('\\n🎯 FORCE CLEAR COMPLETE');\n    console.log('✅ Database ready for fresh 295-column structure');\n    console.log('📁 All data backed up in: backups/pre-fresh-start-*');\n    console.log('🚀 Ready to receive 295-column prompts!');\n  } catch (error) {\n    console.error('❌ Error force clearing database:', error);\n  }\n}\n\nforceClearAll().catch(console.error);\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"/**\n * Simple Lighthouse Performance Test\n * Quick test for core performance metrics\n */\n\nimport { spawn } from 'child_processnode:child_process;\nimport { createWriteStream, existsSync, mkdirSync } from 'fs';\nimport path from 'path';// Start the test\ncheckServer();\n","ops":[{"diffOp":{"equal":{"range":[0,112]}}},{"diffOp":{"equal":{"range":[112,113]}}},{"diffOp":{"delete":{"range":[113,126]}}},{"diffOp":{"insert":{"range":[126,144]}}},{"diffOp":{"equal":{"range":[112,113]}}},{"diffOp":{"equal":{"range":[144,233]}}},{"equalLines":{"line_count":81}},{"diffOp":{"equal":{"range":[233,266]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/lighthouse-test.js"},"span":[112,127],"sourceCode":"/**\n * Simple Lighthouse Performance Test\n * Quick test for core performance metrics\n */\n\nimport { spawn } from 'child_process';\nimport { createWriteStream, existsSync, mkdirSync } from 'fs';\nimport path from 'path';\n\n// Ensure reports directory exists\nconst reportsDir = path.join(process.cwd(), 'performance-reports');\nif (!existsSync(reportsDir)) {\n  mkdirSync(reportsDir, { recursive: true });\n}\n\n// Run Lighthouse with basic configuration\nconst runLighthouse = () => {\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n  const reportPath = path.join(reportsDir, `lighthouse-${timestamp}.html`);\n\n  console.log('🔍 Running Lighthouse performance audit...');\n  console.log(`📊 Report will be saved to: ${reportPath}`);\n\n  const lighthouse = spawn(\n    'npx',\n    [\n      'lighthouse',\n      'http://localhost:5173',\n      '--output=html',\n      `--output-path=${reportPath}`,\n      '--chrome-flags=--headless --no-sandbox --disable-gpu',\n      '--throttling-method=provided',\n      '--only-categories=performance,accessibility,best-practices,seo',\n      '--disable-device-emulation',\n      '--quiet',\n    ],\n    {\n      stdio: 'inherit',\n      shell: true,\n    }\n  );\n\n  lighthouse.on('close', (code) => {\n    if (code === 0) {\n      console.log('✅ Lighthouse audit completed successfully!');\n      console.log(`📊 View report: file://${reportPath}`);\n\n      // Basic performance metrics summary\n      console.log('\\n🚀 Performance Summary:');\n      console.log('- Report generated with Core Web Vitals');\n      console.log('- Includes Performance, Accessibility, Best Practices, SEO');\n      console.log('- Desktop optimization focus');\n      console.log('\\n💡 Optimization tips:');\n      console.log('- Check for unused JavaScript and CSS');\n      console.log('- Optimize images for modern formats');\n      console.log('- Minimize render-blocking resources');\n      console.log('- Ensure good Core Web Vitals scores');\n    } else {\n      console.error('❌ Lighthouse audit failed with code:', code);\n      console.log('💡 Try running: npm run dev first, then run this script');\n    }\n  });\n\n  lighthouse.on('error', (error) => {\n    console.error('❌ Error running Lighthouse:', error.message);\n    console.log('💡 Make sure lighthouse is installed: npm install -g lighthouse');\n  });\n};\n\n// Check if development server is running\nconst checkServer = () => {\n  console.log('🔍 Checking if development server is running...');\n\n  const check = spawn('curl', ['-s', 'http://localhost:5173'], {\n    stdio: 'pipe',\n  });\n\n  check.on('close', (code) => {\n    if (code === 0) {\n      console.log('✅ Development server is running');\n      runLighthouse();\n    } else {\n      console.log('❌ Development server not running');\n      console.log('💡 Please run: npm run dev');\n      console.log('💡 Then run this script again');\n    }\n  });\n};\n\n// Start the test\ncheckServer();\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"/**\n * Simple Lighthouse Performance Test\n * Quick test for core performance metrics\nimport { spawn } from 'child_process';\nimport { createWriteStream, existsSync, mkdirSync } from 'fsnode:fs;\nimport path from 'path';\n// Start the test\ncheckServer();\n","ops":[{"diffOp":{"equal":{"range":[0,84]}}},{"equalLines":{"line_count":1}},{"diffOp":{"equal":{"range":[84,181]}}},{"diffOp":{"equal":{"range":[181,182]}}},{"diffOp":{"delete":{"range":[182,184]}}},{"diffOp":{"insert":{"range":[184,191]}}},{"diffOp":{"equal":{"range":[181,182]}}},{"diffOp":{"equal":{"range":[191,218]}}},{"equalLines":{"line_count":80}},{"diffOp":{"equal":{"range":[218,251]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/lighthouse-test.js"},"span":[186,190],"sourceCode":"/**\n * Simple Lighthouse Performance Test\n * Quick test for core performance metrics\n */\n\nimport { spawn } from 'child_process';\nimport { createWriteStream, existsSync, mkdirSync } from 'fs';\nimport path from 'path';\n\n// Ensure reports directory exists\nconst reportsDir = path.join(process.cwd(), 'performance-reports');\nif (!existsSync(reportsDir)) {\n  mkdirSync(reportsDir, { recursive: true });\n}\n\n// Run Lighthouse with basic configuration\nconst runLighthouse = () => {\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n  const reportPath = path.join(reportsDir, `lighthouse-${timestamp}.html`);\n\n  console.log('🔍 Running Lighthouse performance audit...');\n  console.log(`📊 Report will be saved to: ${reportPath}`);\n\n  const lighthouse = spawn(\n    'npx',\n    [\n      'lighthouse',\n      'http://localhost:5173',\n      '--output=html',\n      `--output-path=${reportPath}`,\n      '--chrome-flags=--headless --no-sandbox --disable-gpu',\n      '--throttling-method=provided',\n      '--only-categories=performance,accessibility,best-practices,seo',\n      '--disable-device-emulation',\n      '--quiet',\n    ],\n    {\n      stdio: 'inherit',\n      shell: true,\n    }\n  );\n\n  lighthouse.on('close', (code) => {\n    if (code === 0) {\n      console.log('✅ Lighthouse audit completed successfully!');\n      console.log(`📊 View report: file://${reportPath}`);\n\n      // Basic performance metrics summary\n      console.log('\\n🚀 Performance Summary:');\n      console.log('- Report generated with Core Web Vitals');\n      console.log('- Includes Performance, Accessibility, Best Practices, SEO');\n      console.log('- Desktop optimization focus');\n      console.log('\\n💡 Optimization tips:');\n      console.log('- Check for unused JavaScript and CSS');\n      console.log('- Optimize images for modern formats');\n      console.log('- Minimize render-blocking resources');\n      console.log('- Ensure good Core Web Vitals scores');\n    } else {\n      console.error('❌ Lighthouse audit failed with code:', code);\n      console.log('💡 Try running: npm run dev first, then run this script');\n    }\n  });\n\n  lighthouse.on('error', (error) => {\n    console.error('❌ Error running Lighthouse:', error.message);\n    console.log('💡 Make sure lighthouse is installed: npm install -g lighthouse');\n  });\n};\n\n// Check if development server is running\nconst checkServer = () => {\n  console.log('🔍 Checking if development server is running...');\n\n  const check = spawn('curl', ['-s', 'http://localhost:5173'], {\n    stdio: 'pipe',\n  });\n\n  check.on('close', (code) => {\n    if (code === 0) {\n      console.log('✅ Development server is running');\n      runLighthouse();\n    } else {\n      console.log('❌ Development server not running');\n      console.log('💡 Please run: npm run dev');\n      console.log('💡 Then run this script again');\n    }\n  });\n};\n\n// Start the test\ncheckServer();\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"/**\n * Simple Lighthouse Performance Test\n * Quick test for core performance metricsimport { spawn } from 'child_process';\nimport { createWriteStream, existsSync, mkdirSync } from 'fs';\nimport path from 'pathnode:path;\n\n// Ensure reports directory exists// Start the test\ncheckServer();\n","ops":[{"diffOp":{"equal":{"range":[0,84]}}},{"equalLines":{"line_count":2}},{"diffOp":{"equal":{"range":[84,203]}}},{"diffOp":{"equal":{"range":[203,204]}}},{"diffOp":{"delete":{"range":[204,208]}}},{"diffOp":{"insert":{"range":[208,217]}}},{"diffOp":{"equal":{"range":[203,204]}}},{"diffOp":{"equal":{"range":[217,254]}}},{"equalLines":{"line_count":79}},{"diffOp":{"equal":{"range":[254,287]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/lighthouse-test.js"},"span":[209,215],"sourceCode":"/**\n * Simple Lighthouse Performance Test\n * Quick test for core performance metrics\n */\n\nimport { spawn } from 'child_process';\nimport { createWriteStream, existsSync, mkdirSync } from 'fs';\nimport path from 'path';\n\n// Ensure reports directory exists\nconst reportsDir = path.join(process.cwd(), 'performance-reports');\nif (!existsSync(reportsDir)) {\n  mkdirSync(reportsDir, { recursive: true });\n}\n\n// Run Lighthouse with basic configuration\nconst runLighthouse = () => {\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n  const reportPath = path.join(reportsDir, `lighthouse-${timestamp}.html`);\n\n  console.log('🔍 Running Lighthouse performance audit...');\n  console.log(`📊 Report will be saved to: ${reportPath}`);\n\n  const lighthouse = spawn(\n    'npx',\n    [\n      'lighthouse',\n      'http://localhost:5173',\n      '--output=html',\n      `--output-path=${reportPath}`,\n      '--chrome-flags=--headless --no-sandbox --disable-gpu',\n      '--throttling-method=provided',\n      '--only-categories=performance,accessibility,best-practices,seo',\n      '--disable-device-emulation',\n      '--quiet',\n    ],\n    {\n      stdio: 'inherit',\n      shell: true,\n    }\n  );\n\n  lighthouse.on('close', (code) => {\n    if (code === 0) {\n      console.log('✅ Lighthouse audit completed successfully!');\n      console.log(`📊 View report: file://${reportPath}`);\n\n      // Basic performance metrics summary\n      console.log('\\n🚀 Performance Summary:');\n      console.log('- Report generated with Core Web Vitals');\n      console.log('- Includes Performance, Accessibility, Best Practices, SEO');\n      console.log('- Desktop optimization focus');\n      console.log('\\n💡 Optimization tips:');\n      console.log('- Check for unused JavaScript and CSS');\n      console.log('- Optimize images for modern formats');\n      console.log('- Minimize render-blocking resources');\n      console.log('- Ensure good Core Web Vitals scores');\n    } else {\n      console.error('❌ Lighthouse audit failed with code:', code);\n      console.log('💡 Try running: npm run dev first, then run this script');\n    }\n  });\n\n  lighthouse.on('error', (error) => {\n    console.error('❌ Error running Lighthouse:', error.message);\n    console.log('💡 Make sure lighthouse is installed: npm install -g lighthouse');\n  });\n};\n\n// Check if development server is running\nconst checkServer = () => {\n  console.log('🔍 Checking if development server is running...');\n\n  const check = spawn('curl', ['-s', 'http://localhost:5173'], {\n    stdio: 'pipe',\n  });\n\n  check.on('close', (code) => {\n    if (code === 0) {\n      console.log('✅ Development server is running');\n      runLighthouse();\n    } else {\n      console.log('❌ Development server not running');\n      console.log('💡 Please run: npm run dev');\n      console.log('💡 Then run this script again');\n    }\n  });\n};\n\n// Start the test\ncheckServer();\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"import { exec } from 'child_processnode:child_process;\nimport path from 'path';\nimport { fileURLToPath } from 'url';  }\n});\n","ops":[{"diffOp":{"equal":{"range":[0,21]}}},{"diffOp":{"equal":{"range":[21,22]}}},{"diffOp":{"delete":{"range":[22,35]}}},{"diffOp":{"insert":{"range":[35,53]}}},{"diffOp":{"equal":{"range":[21,22]}}},{"diffOp":{"equal":{"range":[53,116]}}},{"equalLines":{"line_count":25}},{"diffOp":{"equal":{"range":[116,124]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/run-playwright-test.ts"},"span":[21,36],"sourceCode":"import { exec } from 'child_process';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst testFile = path.resolve(__dirname, '../tests/visual/visual-audit-storybook.ts');\nconst configPath = path.resolve(__dirname, './playwright.visual.config.ts');\n\nconst command = `npx playwright test ${testFile} --config=${configPath}`;\n\nconsole.log(`Running Playwright command: ${command}`);\n\nconst child = exec(command, { cwd: path.resolve(__dirname, '..') });\n\nchild.stdout.on('data', (data) => {\n  process.stdout.write(data);\n});\n\nchild.stderr.on('data', (data) => {\n  process.stderr.write(data);\n});\n\nchild.on('close', (code) => {\n  if (code !== 0) {\n    console.error(`Playwright process exited with code ${code}`);\n    process.exit(code);\n  }\n});\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"import { exec } from 'child_process';\nimport path from 'pathnode:path;\nimport { fileURLToPath } from 'url';\n  }\n});\n","ops":[{"diffOp":{"equal":{"range":[0,55]}}},{"diffOp":{"equal":{"range":[55,56]}}},{"diffOp":{"delete":{"range":[56,60]}}},{"diffOp":{"insert":{"range":[60,69]}}},{"diffOp":{"equal":{"range":[55,56]}}},{"diffOp":{"equal":{"range":[69,108]}}},{"equalLines":{"line_count":24}},{"diffOp":{"equal":{"range":[108,116]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/run-playwright-test.ts"},"span":[55,61],"sourceCode":"import { exec } from 'child_process';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst testFile = path.resolve(__dirname, '../tests/visual/visual-audit-storybook.ts');\nconst configPath = path.resolve(__dirname, './playwright.visual.config.ts');\n\nconst command = `npx playwright test ${testFile} --config=${configPath}`;\n\nconsole.log(`Running Playwright command: ${command}`);\n\nconst child = exec(command, { cwd: path.resolve(__dirname, '..') });\n\nchild.stdout.on('data', (data) => {\n  process.stdout.write(data);\n});\n\nchild.stderr.on('data', (data) => {\n  process.stderr.write(data);\n});\n\nchild.on('close', (code) => {\n  if (code !== 0) {\n    console.error(`Playwright process exited with code ${code}`);\n    process.exit(code);\n  }\n});\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"import { exec } from 'child_process';\nimport path from 'path';\nimport { fileURLToPath } from 'urlnode:url;\n\nconst __filename = fileURLToPath(import.meta.url);  }\n});\n","ops":[{"diffOp":{"equal":{"range":[0,93]}}},{"diffOp":{"equal":{"range":[93,94]}}},{"diffOp":{"delete":{"range":[94,97]}}},{"diffOp":{"insert":{"range":[97,105]}}},{"diffOp":{"equal":{"range":[93,94]}}},{"diffOp":{"equal":{"range":[105,158]}}},{"equalLines":{"line_count":23}},{"diffOp":{"equal":{"range":[158,166]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/run-playwright-test.ts"},"span":[93,98],"sourceCode":"import { exec } from 'child_process';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst testFile = path.resolve(__dirname, '../tests/visual/visual-audit-storybook.ts');\nconst configPath = path.resolve(__dirname, './playwright.visual.config.ts');\n\nconst command = `npx playwright test ${testFile} --config=${configPath}`;\n\nconsole.log(`Running Playwright command: ${command}`);\n\nconst child = exec(command, { cwd: path.resolve(__dirname, '..') });\n\nchild.stdout.on('data', (data) => {\n  process.stdout.write(data);\n});\n\nchild.stderr.on('data', (data) => {\n  process.stderr.write(data);\n});\n\nchild.on('close', (code) => {\n  if (code !== 0) {\n    console.error(`Playwright process exited with code ${code}`);\n    process.exit(code);\n  }\n});\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useTemplate","severity":"information","description":"Template literals are preferred over string concatenation.","message":[{"elements":["Emphasis"],"content":"Template"},{"elements":[],"content":" literals are preferred over "},{"elements":["Emphasis"],"content":"string concatenation."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Unsafe fix: Use a "},{"elements":["Emphasis"],"content":"template literal"},{"elements":[],"content":"."}]]},{"diff":{"dictionary":"/**\n * Simple Visual Audit - Tests Basic Functionality\n */\n  // Print Summary\n  console.log('`\\\\n' + ${'='.repeat(50)}`);\n  console.log('📊 AUDIT SUMMARY');\n  console.log('='.repeat(50));// Run the audit\nsimpleAudit().catch(console.error);\n","ops":[{"diffOp":{"equal":{"range":[0,58]}}},{"equalLines":{"line_count":147}},{"diffOp":{"equal":{"range":[58,92]}}},{"diffOp":{"delete":{"range":[92,93]}}},{"diffOp":{"insert":{"range":[93,94]}}},{"diffOp":{"equal":{"range":[94,97]}}},{"diffOp":{"delete":{"range":[97,101]}}},{"diffOp":{"insert":{"range":[101,103]}}},{"diffOp":{"equal":{"range":[103,117]}}},{"diffOp":{"insert":{"range":[117,119]}}},{"diffOp":{"equal":{"range":[119,189]}}},{"equalLines":{"line_count":37}},{"diffOp":{"equal":{"range":[189,242]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/simple-audit.js"},"span":[6091,6113],"sourceCode":"/**\n * Simple Visual Audit - Tests Basic Functionality\n */\n\nimport { chromium } from 'playwright';\n\nasync function simpleAudit() {\n  console.log('🚀 Starting Simple Visual Audit...');\n\n  const browser = await chromium.launch({ headless: false });\n  const page = await browser.newPage({\n    viewport: { width: 1280, height: 720 },\n  });\n\n  const results = [];\n  const errors = [];\n\n  // Track console errors\n  page.on('console', (msg) => {\n    if (\n      msg.type() === 'error' &&\n      !msg.text().includes('401') &&\n      !msg.text().includes('Failed to load resource')\n    ) {\n      errors.push({ type: 'console', message: msg.text() });\n    }\n  });\n\n  try {\n    // 1. Test Landing Page\n    console.log('\\\\n📱 Testing Landing Page...');\n    await page.goto('http://localhost:5173');\n    await page.waitForTimeout(3000); // Give it time to load\n\n    const heroVisible = await page.locator('h1:has-text(\"Master AI\")').isVisible();\n    results.push({ test: 'Landing Page - Hero Section', passed: heroVisible });\n    console.log(`   ✅ Hero section: ${heroVisible ? 'PASS' : 'FAIL'}`);\n\n    const ctaButton = await page.locator('text=Start for Free').isVisible();\n    results.push({ test: 'Landing Page - CTA Button', passed: ctaButton });\n    console.log(`   ✅ CTA button: ${ctaButton ? 'PASS' : 'FAIL'}`);\n\n    // 2. Test Login Page Access\n    console.log('\\\\n🔐 Testing Login Page...');\n    if (ctaButton) {\n      await page.click('text=Start for Free');\n      await page.waitForTimeout(2000);\n    } else {\n      await page.goto('http://localhost:5173/login');\n      await page.waitForTimeout(2000);\n    }\n\n    const loginFormVisible = await page.locator('text=Welcome to AI/ML Glossary').isVisible();\n    results.push({ test: 'Login Page - Form Visible', passed: loginFormVisible });\n    console.log(`   ✅ Login form: ${loginFormVisible ? 'PASS' : 'FAIL'}`);\n\n    const testUsersTab = await page.locator('[value=\"test\"]').isVisible();\n    results.push({ test: 'Login Page - Test Users Tab', passed: testUsersTab });\n    console.log(`   ✅ Test users tab: ${testUsersTab ? 'PASS' : 'FAIL'}`);\n\n    // 3. Test Responsive Design\n    console.log('\\\\n📱 Testing Responsive Design...');\n\n    // Test mobile viewport\n    await page.setViewportSize({ width: 375, height: 667 });\n    await page.waitForTimeout(1000);\n\n    await page.goto('http://localhost:5173');\n    await page.waitForTimeout(2000);\n\n    const mobileMenuButton = await page.locator('[aria-label*=\"navigation menu\"]').isVisible();\n    results.push({ test: 'Mobile - Menu Button Visible', passed: mobileMenuButton });\n    console.log(`   ✅ Mobile menu button: ${mobileMenuButton ? 'PASS' : 'FAIL'}`);\n\n    // Test tablet viewport\n    await page.setViewportSize({ width: 768, height: 1024 });\n    await page.waitForTimeout(1000);\n    await page.reload();\n    await page.waitForTimeout(2000);\n\n    const tabletLayout = await page.locator('h1:has-text(\"Master AI\")').isVisible();\n    results.push({ test: 'Tablet - Layout Visible', passed: tabletLayout });\n    console.log(`   ✅ Tablet layout: ${tabletLayout ? 'PASS' : 'FAIL'}`);\n\n    // 4. Test SearchBar Component (if present)\n    console.log('\\\\n🔍 Testing Search Functionality...');\n    await page.setViewportSize({ width: 1280, height: 720 });\n    await page.goto('http://localhost:5173/login');\n    await page.waitForTimeout(2000);\n\n    // Check if search is available anywhere\n    const searchInput = await page.locator('input[placeholder*=\"Search\"]').isVisible();\n    results.push({ test: 'Search - Input Visible', passed: searchInput });\n    console.log(`   ✅ Search input: ${searchInput ? 'PASS' : 'FAIL'}`);\n\n    // 5. Test Theme Toggle\n    console.log('\\\\n🎨 Testing Theme Toggle...');\n    const themeToggle = await page.locator('button[aria-label*=\"Switch to\"]').isVisible();\n    results.push({ test: 'Theme - Toggle Button Visible', passed: themeToggle });\n    console.log(`   ✅ Theme toggle: ${themeToggle ? 'PASS' : 'FAIL'}`);\n\n    if (themeToggle) {\n      await page.click('button[aria-label*=\"Switch to\"]');\n      await page.waitForTimeout(500);\n      const darkModeActive = (await page.locator('html[class*=\"dark\"]').count()) > 0;\n      results.push({ test: 'Theme - Dark Mode Toggle', passed: darkModeActive });\n      console.log(`   ✅ Dark mode toggle: ${darkModeActive ? 'PASS' : 'FAIL'}`);\n    }\n\n    // 6. Test Firebase Login (if working)\n    console.log('\\\\n👤 Testing Firebase Authentication...');\n    await page.goto('http://localhost:5173/login');\n    await page.waitForTimeout(2000);\n\n    if (await page.locator('[value=\"test\"]').isVisible()) {\n      try {\n        await page.click('[value=\"test\"]');\n        await page.waitForTimeout(500);\n\n        const testUserButtons = await page.locator('button:has-text(\"Use This Account\")').count();\n        results.push({ test: 'Auth - Test Users Available', passed: testUserButtons > 0 });\n        console.log(\n          `   ✅ Test users available: ${testUserButtons > 0 ? 'PASS' : 'FAIL'} (${testUserButtons} users)`\n        );\n\n        if (testUserButtons > 0) {\n          // Try to login with first test user\n          await page.click('button:has-text(\"Use This Account\")');\n          await page.waitForTimeout(500);\n\n          await page.click('[value=\"login\"]');\n          await page.waitForTimeout(500);\n\n          // Check if login button is enabled\n          const loginButton = page.locator('button[type=\"submit\"]:has-text(\"Sign In\")');\n          const isEnabled = await loginButton.isEnabled();\n          results.push({ test: 'Auth - Login Button Ready', passed: isEnabled });\n          console.log(`   ✅ Login button ready: ${isEnabled ? 'PASS' : 'FAIL'}`);\n        }\n      } catch (authError) {\n        errors.push({ type: 'auth', message: authError.message });\n        console.log(`   ❌ Auth test failed: ${authError.message}`);\n      }\n    }\n  } catch (error) {\n    errors.push({ type: 'critical', message: error.message });\n    console.error('❌ Critical error:', error.message);\n  } finally {\n    await browser.close();\n  }\n\n  // Print Summary\n  console.log('\\\\n' + '='.repeat(50));\n  console.log('📊 AUDIT SUMMARY');\n  console.log('='.repeat(50));\n\n  const passed = results.filter((r) => r.passed).length;\n  const failed = results.filter((r) => !r.passed).length;\n\n  console.log(`✅ Passed: ${passed}`);\n  console.log(`❌ Failed: ${failed}`);\n  console.log(`🚨 Errors: ${errors.length}`);\n  console.log(`📊 Success Rate: ${Math.round((passed / results.length) * 100)}%`);\n\n  console.log('\\\\n📋 DETAILED RESULTS:');\n  results.forEach((result) => {\n    const status = result.passed ? '✅' : '❌';\n    console.log(`   ${status} ${result.test}`);\n  });\n\n  if (errors.length > 0) {\n    console.log('\\\\n🚨 ERRORS:');\n    errors.forEach((error) => {\n      console.log(`   ❌ ${error.type}: ${error.message}`);\n    });\n  }\n\n  console.log('\\\\n🎉 Audit completed!');\n\n  // Recommendations\n  console.log('\\\\n💡 RECOMMENDATIONS:');\n  if (failed > 0) {\n    console.log('   - Fix failed test items above');\n  }\n  if (errors.length > 0) {\n    console.log('   - Address console errors and critical issues');\n  }\n  if (passed === results.length && errors.length === 0) {\n    console.log('   - 🎉 Everything looks great! Ready for full testing.');\n  }\n}\n\n// Run the audit\nsimpleAudit().catch(console.error);\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useTemplate","severity":"information","description":"Template literals are preferred over string concatenation.","message":[{"elements":["Emphasis"],"content":"Template"},{"elements":[],"content":" literals are preferred over "},{"elements":["Emphasis"],"content":"string concatenation."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Unsafe fix: Use a "},{"elements":["Emphasis"],"content":"template literal"},{"elements":[],"content":"."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';async function simpleClearAll() {\n  console.log('🗑 CLEARING ALL DATA WITH SIMPLE APPROACH');\n  console.log('`=' + ${'='.repeat(50)}`);\n\n  try {\nsimpleClearAll().catch(console.error);\n","ops":[{"diffOp":{"equal":{"range":[0,54]}}},{"equalLines":{"line_count":2}},{"diffOp":{"equal":{"range":[54,167]}}},{"diffOp":{"delete":{"range":[167,168]}}},{"diffOp":{"insert":{"range":[168,169]}}},{"diffOp":{"equal":{"range":[169,170]}}},{"diffOp":{"delete":{"range":[170,174]}}},{"diffOp":{"insert":{"range":[174,176]}}},{"diffOp":{"equal":{"range":[176,190]}}},{"diffOp":{"insert":{"range":[190,192]}}},{"diffOp":{"equal":{"range":[192,203]}}},{"equalLines":{"line_count":71}},{"diffOp":{"equal":{"range":[203,243]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/simple-clear-all.ts"},"span":[207,227],"sourceCode":"#!/usr/bin/env tsx\n\nimport { sql } from 'drizzle-orm';\nimport { db } from '../server/db.js';\n\nasync function simpleClearAll() {\n  console.log('🗑 CLEARING ALL DATA WITH SIMPLE APPROACH');\n  console.log('=' + '='.repeat(50));\n\n  try {\n    console.log('\\n🔄 Clearing remaining tables...\\n');\n\n    // Since we have foreign key constraints, let's clear data from each table individually\n    // and handle errors gracefully\n\n    // First, clear enhanced_terms table\n    try {\n      const beforeCount = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM enhanced_terms`));\n      const count1 = (beforeCount.rows[0] as any).count;\n\n      await db.execute(sql.raw(`DELETE FROM enhanced_terms`));\n\n      const afterCount = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM enhanced_terms`));\n      const count2 = (afterCount.rows[0] as any).count;\n\n      console.log(`✅ enhanced_terms: ${count1} → ${count2} records`);\n    } catch (error: any) {\n      console.log(`! enhanced_terms: ${error.message}`);\n    }\n\n    // Then clear categories\n    try {\n      const beforeCount = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM categories`));\n      const count1 = (beforeCount.rows[0] as any).count;\n\n      await db.execute(sql.raw(`DELETE FROM categories`));\n\n      const afterCount = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM categories`));\n      const count2 = (afterCount.rows[0] as any).count;\n\n      console.log(`✅ categories: ${count1} → ${count2} records`);\n    } catch (error: any) {\n      console.log(`! categories: ${error.message}`);\n    }\n\n    // Final verification\n    console.log('\\n📊 FINAL DATABASE STATE:');\n    console.log('-'.repeat(40));\n\n    const checkTables = ['terms', 'enhanced_terms', 'categories', 'term_sections', 'users'];\n\n    for (const tableName of checkTables) {\n      try {\n        const result = await db.execute(sql.raw(`SELECT COUNT(*) as count FROM ${tableName}`));\n        const count = (result.rows[0] as any).count;\n\n        let status = '';\n        if (count === 0 && tableName !== 'users') {\n          status = '✅ EMPTY';\n        } else if (tableName === 'users' && count > 0) {\n          status = '👥 PRESERVED';\n        } else if (count === 0 && tableName === 'users') {\n          status = '! EMPTY (users cleared too)';\n        } else {\n          status = '❌ STILL HAS DATA';\n        }\n\n        console.log(`${tableName}: ${count} records ${status}`);\n      } catch (error: any) {\n        console.log(`${tableName}: ERROR - ${error.message}`);\n      }\n    }\n\n    console.log('\\n🎯 CLEAR COMPLETE');\n    console.log('✅ Database cleared as much as possible');\n    console.log('📁 All data backed up in: backups/pre-fresh-start-*');\n    console.log('🚀 Ready to receive 295-column prompts!');\n  } catch (error) {\n    console.error('❌ Error clearing database:', error);\n  }\n}\n\nsimpleClearAll().catch(console.error);\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**import chalk from 'chalk';\nimport { chromium } from 'playwright';\nimport fs from 'fsnode:fs;\nimport path from 'path';\n\nconst tester = new SimplifiedAuthTester();\ntester.run().catch(console.error);","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":4}},{"diffOp":{"equal":{"range":[23,104]}}},{"diffOp":{"equal":{"range":[104,105]}}},{"diffOp":{"delete":{"range":[105,107]}}},{"diffOp":{"insert":{"range":[107,114]}}},{"diffOp":{"equal":{"range":[104,105]}}},{"diffOp":{"equal":{"range":[114,141]}}},{"equalLines":{"line_count":285}},{"diffOp":{"equal":{"range":[141,219]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/simplified-auth-test.ts"},"span":[197,201],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * Simplified Authentication Test\n * Tests the actual login flow with proper selectors\n */\n\nimport chalk from 'chalk';\nimport { chromium } from 'playwright';\nimport fs from 'fs';\nimport path from 'path';\n\ninterface AuthTestResult {\n  testName: string;\n  userType: string;\n  status: 'PASS' | 'FAIL' | 'WARNING';\n  message: string;\n  screenshot?: string;\n}\n\nclass SimplifiedAuthTester {\n  private browser: any;\n  private results: AuthTestResult[] = [];\n  private screenshotDir: string;\n\n  constructor() {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    this.screenshotDir = path.join(process.cwd(), 'auth-test-results', timestamp);\n    fs.mkdirSync(this.screenshotDir, { recursive: true });\n  }\n\n  async init() {\n    this.browser = await chromium.launch({\n      headless: false,\n      devtools: true,\n      slowMo: 1000,\n    });\n  }\n\n  async takeScreenshot(page: any, name: string, userType: string = 'guest'): Promise<string> {\n    const filename = `${userType}-${name}-${Date.now()}.png`;\n    const filepath = path.join(this.screenshotDir, filename);\n    await page.screenshot({ path: filepath, fullPage: true });\n    return filename;\n  }\n\n  addResult(result: AuthTestResult) {\n    this.results.push(result);\n    const color = result.status === 'PASS' ? 'green' : result.status === 'FAIL' ? 'red' : 'yellow';\n    console.log(chalk[color](`${result.status}: ${result.testName} (${result.userType}) - ${result.message}`));\n  }\n\n  async testCookieConsent() {\n    const page = await this.browser.newPage();\n    console.log(chalk.blue('🍪 Testing Cookie Consent...'));\n    \n    try {\n      await page.goto('http://localhost:5173');\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(2000);\n      \n      const screenshot = await this.takeScreenshot(page, 'homepage');\n      \n      // Check for cookie consent elements\n      const cookieElements = await page.locator('[class*=\"cookie\"], [id*=\"cookie\"], [data-testid*=\"cookie\"]').count();\n      \n      this.addResult({\n        testName: 'Cookie Consent Check',\n        userType: 'guest',\n        status: cookieElements > 0 ? 'PASS' : 'WARNING',\n        message: cookieElements > 0 ? `Found ${cookieElements} cookie-related elements` : 'No cookie consent found - may be disabled',\n        screenshot\n      });\n      \n    } catch (error) {\n      this.addResult({\n        testName: 'Cookie Consent Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  async testAuthentication() {\n    const page = await this.browser.newPage();\n    console.log(chalk.blue('🔐 Testing Authentication...'));\n    \n    try {\n      // Navigate to login\n      await page.goto('http://localhost:5173/login');\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      let screenshot = await this.takeScreenshot(page, 'login-page-initial');\n      \n      // Check login page elements\n      const tabs = await page.locator('[role=\"tab\"]').count();\n      const testUsersTab = await page.locator('[role=\"tab\"]:has-text(\"Test Users\")').isVisible();\n      const signInTab = await page.locator('[role=\"tab\"]:has-text(\"Sign In\")').isVisible();\n      \n      this.addResult({\n        testName: 'Login Page Structure',\n        userType: 'guest',\n        status: tabs >= 2 ? 'PASS' : 'WARNING',\n        message: `Found ${tabs} tabs, Test Users: ${testUsersTab ? '✓' : '✗'}, Sign In: ${signInTab ? '✓' : '✗'}`,\n        screenshot\n      });\n      \n      // Test using Test Users tab\n      if (testUsersTab) {\n        await page.click('[role=\"tab\"]:has-text(\"Test Users\")');\n        await page.waitForTimeout(2000);\n        \n        screenshot = await this.takeScreenshot(page, 'test-users-tab');\n        \n        // Check for Use This Account buttons\n        const useAccountButtons = await page.locator('button:has-text(\"Use This Account\")').count();\n        \n        this.addResult({\n          testName: 'Test Users Tab',\n          userType: 'guest',\n          status: useAccountButtons > 0 ? 'PASS' : 'FAIL',\n          message: `Found ${useAccountButtons} \"Use This Account\" buttons`,\n          screenshot\n        });\n        \n        if (useAccountButtons > 0) {\n          // Click first button (regular user)\n          await page.click('button:has-text(\"Use This Account\")');\n          await page.waitForTimeout(2000);\n          \n          screenshot = await this.takeScreenshot(page, 'after-use-account-click');\n          \n          // Check if we need to switch to Sign In tab\n          if (signInTab) {\n            await page.click('[role=\"tab\"]:has-text(\"Sign In\")');\n            await page.waitForTimeout(2000);\n          }\n          \n          screenshot = await this.takeScreenshot(page, 'sign-in-tab');\n          \n          // Check if form is populated\n          const emailValue = await page.inputValue('input[type=\"email\"]').catch(() => '');\n          const passwordValue = await page.inputValue('input[type=\"password\"]').catch(() => '');\n          \n          this.addResult({\n            testName: 'Form Auto-Population',\n            userType: 'free',\n            status: (emailValue.includes('test@') && passwordValue.length > 0) ? 'PASS' : 'WARNING',\n            message: `Email: ${emailValue || 'empty'}, Password: ${passwordValue ? 'filled' : 'empty'}`,\n            screenshot\n          });\n          \n          // Test actual login\n          if (emailValue && passwordValue) {\n            const submitButton = await page.locator('button[type=\"submit\"]').first();\n            if (await submitButton.isVisible()) {\n              console.log(chalk.cyan('📍 Attempting login...'));\n              await submitButton.click();\n              await page.waitForTimeout(5000);\n              \n              screenshot = await this.takeScreenshot(page, 'after-login-attempt');\n              \n              const currentUrl = page.url();\n              const loginSuccess = currentUrl.includes('/dashboard') || currentUrl.includes('/admin');\n              \n              this.addResult({\n                testName: 'Login Flow',\n                userType: 'free',\n                status: loginSuccess ? 'PASS' : 'FAIL',\n                message: `URL after login: ${currentUrl}`,\n                screenshot\n              });\n              \n              if (loginSuccess) {\n                // Test dashboard elements\n                await page.waitForTimeout(3000);\n                screenshot = await this.takeScreenshot(page, 'dashboard-view');\n                \n                const dashboardElements = await page.locator('h1, h2, .dashboard, [data-testid*=\"dashboard\"]').count();\n                \n                this.addResult({\n                  testName: 'Dashboard Access',\n                  userType: 'free',\n                  status: dashboardElements > 0 ? 'PASS' : 'WARNING',\n                  message: `Found ${dashboardElements} dashboard elements`,\n                  screenshot\n                });\n              }\n            }\n          }\n        }\n      }\n      \n    } catch (error) {\n      this.addResult({\n        testName: 'Authentication Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  async testResponsiveDesign() {\n    console.log(chalk.blue('📱 Testing Responsive Design...'));\n    \n    const viewports = [\n      { name: 'mobile', width: 375, height: 812 },\n      { name: 'tablet', width: 768, height: 1024 },\n      { name: 'desktop', width: 1920, height: 1080 }\n    ];\n    \n    for (const viewport of viewports) {\n      const page = await this.browser.newPage();\n      await page.setViewportSize(viewport);\n      \n      try {\n        await page.goto('http://localhost:5173');\n        await page.waitForLoadState('domcontentloaded');\n        await page.waitForTimeout(2000);\n        \n        const screenshot = await this.takeScreenshot(page, `responsive-${viewport.name}`);\n        \n        // Check for navigation elements\n        const nav = await page.locator('nav, .navigation, header').isVisible();\n        const menu = await page.locator('button[aria-label*=\"menu\"], .hamburger, .menu-toggle').isVisible();\n        \n        this.addResult({\n          testName: `Responsive ${viewport.name}`,\n          userType: 'guest',\n          status: nav || menu ? 'PASS' : 'WARNING',\n          message: `Navigation: ${nav ? '✓' : '✗'}, Menu: ${menu ? '✓' : '✗'}`,\n          screenshot\n        });\n        \n      } catch (error) {\n        this.addResult({\n          testName: `Responsive ${viewport.name}`,\n          userType: 'guest',\n          status: 'FAIL',\n          message: `Error: ${error}`\n        });\n      } finally {\n        await page.close();\n      }\n    }\n  }\n\n  async generateReport() {\n    console.log(chalk.yellow('📝 Generating report...'));\n    \n    const summary = {\n      totalTests: this.results.length,\n      passed: this.results.filter(r => r.status === 'PASS').length,\n      failed: this.results.filter(r => r.status === 'FAIL').length,\n      warnings: this.results.filter(r => r.status === 'WARNING').length,\n    };\n    \n    const report = {\n      timestamp: new Date().toISOString(),\n      summary,\n      passRate: Math.round((summary.passed / summary.totalTests) * 100),\n      results: this.results\n    };\n    \n    const reportPath = path.join(this.screenshotDir, 'auth-test-report.json');\n    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n    \n    console.log(chalk.green('✅ Report generated!'));\n    console.log(chalk.blue(`📁 Results: ${this.screenshotDir}`));\n    console.log(chalk.blue(`📊 Summary: ${summary.passed} passed, ${summary.failed} failed, ${summary.warnings} warnings`));\n    \n    return report;\n  }\n\n  async run() {\n    try {\n      await this.init();\n      await this.testCookieConsent();\n      await this.testAuthentication();\n      await this.testResponsiveDesign();\n      await this.generateReport();\n    } catch (error) {\n      console.error(chalk.red('❌ Test failed:'), error);\n    } finally {\n      if (this.browser) {\n        await this.browser.close();\n      }\n    }\n  }\n}\n\nconst tester = new SimplifiedAuthTester();\ntester.run().catch(console.error);"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**import { chromium } from 'playwright';\nimport fs from 'fs';\nimport path from 'pathnode:path;\n\ninterface AuthTestResult {\nconst tester = new SimplifiedAuthTester();\ntester.run().catch(console.error);","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":5}},{"diffOp":{"equal":{"range":[23,100]}}},{"diffOp":{"equal":{"range":[100,101]}}},{"diffOp":{"delete":{"range":[101,105]}}},{"diffOp":{"insert":{"range":[105,114]}}},{"diffOp":{"equal":{"range":[100,101]}}},{"diffOp":{"equal":{"range":[114,143]}}},{"equalLines":{"line_count":284}},{"diffOp":{"equal":{"range":[143,221]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/simplified-auth-test.ts"},"span":[220,226],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * Simplified Authentication Test\n * Tests the actual login flow with proper selectors\n */\n\nimport chalk from 'chalk';\nimport { chromium } from 'playwright';\nimport fs from 'fs';\nimport path from 'path';\n\ninterface AuthTestResult {\n  testName: string;\n  userType: string;\n  status: 'PASS' | 'FAIL' | 'WARNING';\n  message: string;\n  screenshot?: string;\n}\n\nclass SimplifiedAuthTester {\n  private browser: any;\n  private results: AuthTestResult[] = [];\n  private screenshotDir: string;\n\n  constructor() {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    this.screenshotDir = path.join(process.cwd(), 'auth-test-results', timestamp);\n    fs.mkdirSync(this.screenshotDir, { recursive: true });\n  }\n\n  async init() {\n    this.browser = await chromium.launch({\n      headless: false,\n      devtools: true,\n      slowMo: 1000,\n    });\n  }\n\n  async takeScreenshot(page: any, name: string, userType: string = 'guest'): Promise<string> {\n    const filename = `${userType}-${name}-${Date.now()}.png`;\n    const filepath = path.join(this.screenshotDir, filename);\n    await page.screenshot({ path: filepath, fullPage: true });\n    return filename;\n  }\n\n  addResult(result: AuthTestResult) {\n    this.results.push(result);\n    const color = result.status === 'PASS' ? 'green' : result.status === 'FAIL' ? 'red' : 'yellow';\n    console.log(chalk[color](`${result.status}: ${result.testName} (${result.userType}) - ${result.message}`));\n  }\n\n  async testCookieConsent() {\n    const page = await this.browser.newPage();\n    console.log(chalk.blue('🍪 Testing Cookie Consent...'));\n    \n    try {\n      await page.goto('http://localhost:5173');\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(2000);\n      \n      const screenshot = await this.takeScreenshot(page, 'homepage');\n      \n      // Check for cookie consent elements\n      const cookieElements = await page.locator('[class*=\"cookie\"], [id*=\"cookie\"], [data-testid*=\"cookie\"]').count();\n      \n      this.addResult({\n        testName: 'Cookie Consent Check',\n        userType: 'guest',\n        status: cookieElements > 0 ? 'PASS' : 'WARNING',\n        message: cookieElements > 0 ? `Found ${cookieElements} cookie-related elements` : 'No cookie consent found - may be disabled',\n        screenshot\n      });\n      \n    } catch (error) {\n      this.addResult({\n        testName: 'Cookie Consent Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  async testAuthentication() {\n    const page = await this.browser.newPage();\n    console.log(chalk.blue('🔐 Testing Authentication...'));\n    \n    try {\n      // Navigate to login\n      await page.goto('http://localhost:5173/login');\n      await page.waitForLoadState('domcontentloaded');\n      await page.waitForTimeout(3000);\n      \n      let screenshot = await this.takeScreenshot(page, 'login-page-initial');\n      \n      // Check login page elements\n      const tabs = await page.locator('[role=\"tab\"]').count();\n      const testUsersTab = await page.locator('[role=\"tab\"]:has-text(\"Test Users\")').isVisible();\n      const signInTab = await page.locator('[role=\"tab\"]:has-text(\"Sign In\")').isVisible();\n      \n      this.addResult({\n        testName: 'Login Page Structure',\n        userType: 'guest',\n        status: tabs >= 2 ? 'PASS' : 'WARNING',\n        message: `Found ${tabs} tabs, Test Users: ${testUsersTab ? '✓' : '✗'}, Sign In: ${signInTab ? '✓' : '✗'}`,\n        screenshot\n      });\n      \n      // Test using Test Users tab\n      if (testUsersTab) {\n        await page.click('[role=\"tab\"]:has-text(\"Test Users\")');\n        await page.waitForTimeout(2000);\n        \n        screenshot = await this.takeScreenshot(page, 'test-users-tab');\n        \n        // Check for Use This Account buttons\n        const useAccountButtons = await page.locator('button:has-text(\"Use This Account\")').count();\n        \n        this.addResult({\n          testName: 'Test Users Tab',\n          userType: 'guest',\n          status: useAccountButtons > 0 ? 'PASS' : 'FAIL',\n          message: `Found ${useAccountButtons} \"Use This Account\" buttons`,\n          screenshot\n        });\n        \n        if (useAccountButtons > 0) {\n          // Click first button (regular user)\n          await page.click('button:has-text(\"Use This Account\")');\n          await page.waitForTimeout(2000);\n          \n          screenshot = await this.takeScreenshot(page, 'after-use-account-click');\n          \n          // Check if we need to switch to Sign In tab\n          if (signInTab) {\n            await page.click('[role=\"tab\"]:has-text(\"Sign In\")');\n            await page.waitForTimeout(2000);\n          }\n          \n          screenshot = await this.takeScreenshot(page, 'sign-in-tab');\n          \n          // Check if form is populated\n          const emailValue = await page.inputValue('input[type=\"email\"]').catch(() => '');\n          const passwordValue = await page.inputValue('input[type=\"password\"]').catch(() => '');\n          \n          this.addResult({\n            testName: 'Form Auto-Population',\n            userType: 'free',\n            status: (emailValue.includes('test@') && passwordValue.length > 0) ? 'PASS' : 'WARNING',\n            message: `Email: ${emailValue || 'empty'}, Password: ${passwordValue ? 'filled' : 'empty'}`,\n            screenshot\n          });\n          \n          // Test actual login\n          if (emailValue && passwordValue) {\n            const submitButton = await page.locator('button[type=\"submit\"]').first();\n            if (await submitButton.isVisible()) {\n              console.log(chalk.cyan('📍 Attempting login...'));\n              await submitButton.click();\n              await page.waitForTimeout(5000);\n              \n              screenshot = await this.takeScreenshot(page, 'after-login-attempt');\n              \n              const currentUrl = page.url();\n              const loginSuccess = currentUrl.includes('/dashboard') || currentUrl.includes('/admin');\n              \n              this.addResult({\n                testName: 'Login Flow',\n                userType: 'free',\n                status: loginSuccess ? 'PASS' : 'FAIL',\n                message: `URL after login: ${currentUrl}`,\n                screenshot\n              });\n              \n              if (loginSuccess) {\n                // Test dashboard elements\n                await page.waitForTimeout(3000);\n                screenshot = await this.takeScreenshot(page, 'dashboard-view');\n                \n                const dashboardElements = await page.locator('h1, h2, .dashboard, [data-testid*=\"dashboard\"]').count();\n                \n                this.addResult({\n                  testName: 'Dashboard Access',\n                  userType: 'free',\n                  status: dashboardElements > 0 ? 'PASS' : 'WARNING',\n                  message: `Found ${dashboardElements} dashboard elements`,\n                  screenshot\n                });\n              }\n            }\n          }\n        }\n      }\n      \n    } catch (error) {\n      this.addResult({\n        testName: 'Authentication Test',\n        userType: 'guest',\n        status: 'FAIL',\n        message: `Error: ${error}`\n      });\n    } finally {\n      await page.close();\n    }\n  }\n\n  async testResponsiveDesign() {\n    console.log(chalk.blue('📱 Testing Responsive Design...'));\n    \n    const viewports = [\n      { name: 'mobile', width: 375, height: 812 },\n      { name: 'tablet', width: 768, height: 1024 },\n      { name: 'desktop', width: 1920, height: 1080 }\n    ];\n    \n    for (const viewport of viewports) {\n      const page = await this.browser.newPage();\n      await page.setViewportSize(viewport);\n      \n      try {\n        await page.goto('http://localhost:5173');\n        await page.waitForLoadState('domcontentloaded');\n        await page.waitForTimeout(2000);\n        \n        const screenshot = await this.takeScreenshot(page, `responsive-${viewport.name}`);\n        \n        // Check for navigation elements\n        const nav = await page.locator('nav, .navigation, header').isVisible();\n        const menu = await page.locator('button[aria-label*=\"menu\"], .hamburger, .menu-toggle').isVisible();\n        \n        this.addResult({\n          testName: `Responsive ${viewport.name}`,\n          userType: 'guest',\n          status: nav || menu ? 'PASS' : 'WARNING',\n          message: `Navigation: ${nav ? '✓' : '✗'}, Menu: ${menu ? '✓' : '✗'}`,\n          screenshot\n        });\n        \n      } catch (error) {\n        this.addResult({\n          testName: `Responsive ${viewport.name}`,\n          userType: 'guest',\n          status: 'FAIL',\n          message: `Error: ${error}`\n        });\n      } finally {\n        await page.close();\n      }\n    }\n  }\n\n  async generateReport() {\n    console.log(chalk.yellow('📝 Generating report...'));\n    \n    const summary = {\n      totalTests: this.results.length,\n      passed: this.results.filter(r => r.status === 'PASS').length,\n      failed: this.results.filter(r => r.status === 'FAIL').length,\n      warnings: this.results.filter(r => r.status === 'WARNING').length,\n    };\n    \n    const report = {\n      timestamp: new Date().toISOString(),\n      summary,\n      passRate: Math.round((summary.passed / summary.totalTests) * 100),\n      results: this.results\n    };\n    \n    const reportPath = path.join(this.screenshotDir, 'auth-test-report.json');\n    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n    \n    console.log(chalk.green('✅ Report generated!'));\n    console.log(chalk.blue(`📁 Results: ${this.screenshotDir}`));\n    console.log(chalk.blue(`📊 Summary: ${summary.passed} passed, ${summary.failed} failed, ${summary.warnings} warnings`));\n    \n    return report;\n  }\n\n  async run() {\n    try {\n      await this.init();\n      await this.testCookieConsent();\n      await this.testAuthentication();\n      await this.testResponsiveDesign();\n      await this.generateReport();\n    } catch (error) {\n      console.error(chalk.red('❌ Test failed:'), error);\n    } finally {\n      if (this.browser) {\n        await this.browser.close();\n      }\n    }\n  }\n}\n\nconst tester = new SimplifiedAuthTester();\ntester.run().catch(console.error);"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**\nimport chalk from 'chalk';\nimport { exec } from 'child_processnode:child_process;\nimport { promisify } from 'util';\n}\n\nexport { testAPIFixes, testImplementationCompleteness };","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":3}},{"diffOp":{"equal":{"range":[23,72]}}},{"diffOp":{"equal":{"range":[72,73]}}},{"diffOp":{"delete":{"range":[73,86]}}},{"diffOp":{"insert":{"range":[86,104]}}},{"diffOp":{"equal":{"range":[72,73]}}},{"diffOp":{"equal":{"range":[104,140]}}},{"equalLines":{"line_count":122}},{"diffOp":{"equal":{"range":[140,199]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/test-api-fixes.ts"},"span":[180,195],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * Test API Fixes Script\n * Validates that the authentication and enhanced terms API fixes are working\n */\n\nimport chalk from 'chalk';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nasync function testAPIFixes() {\n  console.log(chalk.blue('🔧 Testing API Fixes...'));\n  \n  const endpoints = [\n    { path: '/api/health', name: 'Health Check', expected: 200 },\n    { path: '/api/auth/check', name: 'Auth Check (Fixed)', expected: 200 },\n    { path: '/api/enhanced/terms', name: 'Enhanced Terms (Fixed)', expected: 200 },\n    { path: '/api/categories', name: 'Categories', expected: 200 },\n    { path: '/api/terms', name: 'Terms', expected: 200 },\n  ];\n\n  const results = [];\n  \n  for (const endpoint of endpoints) {\n    try {\n      const { stdout } = await execAsync(`curl -s -w \"%{http_code}\" -o /dev/null http://localhost:3001${endpoint.path}`);\n      const statusCode = parseInt(stdout.trim());\n      \n      const status = statusCode === endpoint.expected ? 'PASS' : 'FAIL';\n      const color = status === 'PASS' ? 'green' : 'red';\n      \n      console.log(chalk[color](`${status}: ${endpoint.name} - HTTP ${statusCode}`));\n      \n      results.push({\n        endpoint: endpoint.path,\n        name: endpoint.name,\n        expected: endpoint.expected,\n        actual: statusCode,\n        status,\n        fixed: endpoint.name.includes('Fixed')\n      });\n      \n    } catch (error) {\n      console.log(chalk.red(`FAIL: ${endpoint.name} - Connection Error`));\n      results.push({\n        endpoint: endpoint.path,\n        name: endpoint.name,\n        expected: endpoint.expected,\n        actual: 0,\n        status: 'FAIL',\n        error: 'Connection Error',\n        fixed: endpoint.name.includes('Fixed')\n      });\n    }\n  }\n  \n  // Generate summary\n  const passed = results.filter(r => r.status === 'PASS').length;\n  const failed = results.filter(r => r.status === 'FAIL').length;\n  const fixedEndpoints = results.filter(r => r.fixed);\n  const fixesWorking = fixedEndpoints.filter(r => r.status === 'PASS').length;\n  \n  console.log(chalk.yellow('\\n📊 API Fix Test Summary:'));\n  console.log(chalk.gray(`Total endpoints: ${results.length}`));\n  console.log(chalk.green(`Passed: ${passed}`));\n  console.log(chalk.red(`Failed: ${failed}`));\n  console.log(chalk.blue(`Fixed endpoints tested: ${fixedEndpoints.length}`));\n  console.log(chalk.blue(`Fixed endpoints working: ${fixesWorking}/${fixedEndpoints.length}`));\n  \n  if (failed > 0) {\n    console.log(chalk.yellow('\\n! Some endpoints are not working. This may be because:'));\n    console.log(chalk.gray('  - Server needs to be restarted to pick up new routes'));\n    console.log(chalk.gray('  - Database is not initialized'));\n    console.log(chalk.gray('  - Environment variables are not set correctly'));\n    console.log(chalk.blue('\\n💡 After server restart, re-run the comprehensive audit to verify fixes.'));\n  }\n  \n  return {\n    total: results.length,\n    passed,\n    failed,\n    fixesImplemented: fixedEndpoints.length,\n    fixesWorking\n  };\n}\n\n// Test implementation completeness\nasync function testImplementationCompleteness() {\n  console.log(chalk.blue('\\n🔍 Testing Implementation Completeness...'));\n  \n  const requiredFiles = [\n    'server/routes/firebaseAuth.ts',\n    'server/enhancedRoutes.ts',\n    'AUDIT_FINDINGS_AND_FIXES.md'\n  ];\n  \n  for (const file of requiredFiles) {\n    try {\n      const { stdout } = await execAsync(`grep -l \"auth/check\" ${file} 2>/dev/null || echo \"not found\"`);\n      if (file.includes('firebaseAuth') && !stdout.includes('not found')) {\n        console.log(chalk.green(`✅ Auth check endpoint implemented in ${file}`));\n      } else if (file.includes('enhanced') && !stdout.includes('not found')) {\n        console.log(chalk.green(`✅ Enhanced terms endpoint implemented in ${file}`));\n      } else if (file.includes('AUDIT')) {\n        console.log(chalk.green(`✅ Documentation created: ${file}`));\n      }\n    } catch (error) {\n      console.log(chalk.red(`❌ Issue with ${file}`));\n    }\n  }\n}\n\nasync function main() {\n  console.log(chalk.blue('🚀 API Fixes Validation Script\\n'));\n  \n  await testImplementationCompleteness();\n  const results = await testAPIFixes();\n  \n  console.log(chalk.green('\\n✅ API fixes validation complete!'));\n  console.log(chalk.blue('📋 Next steps:'));\n  console.log(chalk.gray('  1. Restart the server to pick up new routes'));\n  console.log(chalk.gray('  2. Run comprehensive audit again to verify improvements'));\n  console.log(chalk.gray('  3. Fix remaining issues based on audit results'));\n  \n  return results;\n}\n\n// Run if this is the main module\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error);\n}\n\nexport { testAPIFixes, testImplementationCompleteness };"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"#!/usr/bin/env tsx\n\n/**import chalk from 'chalk';\nimport { exec } from 'child_process';\nimport { promisify } from 'utilnode:util;\n\nconst execAsync = promisify(exec);}\n\nexport { testAPIFixes, testImplementationCompleteness };","ops":[{"diffOp":{"equal":{"range":[0,23]}}},{"equalLines":{"line_count":4}},{"diffOp":{"equal":{"range":[23,114]}}},{"diffOp":{"equal":{"range":[114,115]}}},{"diffOp":{"delete":{"range":[115,119]}}},{"diffOp":{"insert":{"range":[119,128]}}},{"diffOp":{"equal":{"range":[114,115]}}},{"diffOp":{"equal":{"range":[128,165]}}},{"equalLines":{"line_count":121}},{"diffOp":{"equal":{"range":[165,224]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/test-api-fixes.ts"},"span":[223,229],"sourceCode":"#!/usr/bin/env tsx\n\n/**\n * Test API Fixes Script\n * Validates that the authentication and enhanced terms API fixes are working\n */\n\nimport chalk from 'chalk';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nasync function testAPIFixes() {\n  console.log(chalk.blue('🔧 Testing API Fixes...'));\n  \n  const endpoints = [\n    { path: '/api/health', name: 'Health Check', expected: 200 },\n    { path: '/api/auth/check', name: 'Auth Check (Fixed)', expected: 200 },\n    { path: '/api/enhanced/terms', name: 'Enhanced Terms (Fixed)', expected: 200 },\n    { path: '/api/categories', name: 'Categories', expected: 200 },\n    { path: '/api/terms', name: 'Terms', expected: 200 },\n  ];\n\n  const results = [];\n  \n  for (const endpoint of endpoints) {\n    try {\n      const { stdout } = await execAsync(`curl -s -w \"%{http_code}\" -o /dev/null http://localhost:3001${endpoint.path}`);\n      const statusCode = parseInt(stdout.trim());\n      \n      const status = statusCode === endpoint.expected ? 'PASS' : 'FAIL';\n      const color = status === 'PASS' ? 'green' : 'red';\n      \n      console.log(chalk[color](`${status}: ${endpoint.name} - HTTP ${statusCode}`));\n      \n      results.push({\n        endpoint: endpoint.path,\n        name: endpoint.name,\n        expected: endpoint.expected,\n        actual: statusCode,\n        status,\n        fixed: endpoint.name.includes('Fixed')\n      });\n      \n    } catch (error) {\n      console.log(chalk.red(`FAIL: ${endpoint.name} - Connection Error`));\n      results.push({\n        endpoint: endpoint.path,\n        name: endpoint.name,\n        expected: endpoint.expected,\n        actual: 0,\n        status: 'FAIL',\n        error: 'Connection Error',\n        fixed: endpoint.name.includes('Fixed')\n      });\n    }\n  }\n  \n  // Generate summary\n  const passed = results.filter(r => r.status === 'PASS').length;\n  const failed = results.filter(r => r.status === 'FAIL').length;\n  const fixedEndpoints = results.filter(r => r.fixed);\n  const fixesWorking = fixedEndpoints.filter(r => r.status === 'PASS').length;\n  \n  console.log(chalk.yellow('\\n📊 API Fix Test Summary:'));\n  console.log(chalk.gray(`Total endpoints: ${results.length}`));\n  console.log(chalk.green(`Passed: ${passed}`));\n  console.log(chalk.red(`Failed: ${failed}`));\n  console.log(chalk.blue(`Fixed endpoints tested: ${fixedEndpoints.length}`));\n  console.log(chalk.blue(`Fixed endpoints working: ${fixesWorking}/${fixedEndpoints.length}`));\n  \n  if (failed > 0) {\n    console.log(chalk.yellow('\\n! Some endpoints are not working. This may be because:'));\n    console.log(chalk.gray('  - Server needs to be restarted to pick up new routes'));\n    console.log(chalk.gray('  - Database is not initialized'));\n    console.log(chalk.gray('  - Environment variables are not set correctly'));\n    console.log(chalk.blue('\\n💡 After server restart, re-run the comprehensive audit to verify fixes.'));\n  }\n  \n  return {\n    total: results.length,\n    passed,\n    failed,\n    fixesImplemented: fixedEndpoints.length,\n    fixesWorking\n  };\n}\n\n// Test implementation completeness\nasync function testImplementationCompleteness() {\n  console.log(chalk.blue('\\n🔍 Testing Implementation Completeness...'));\n  \n  const requiredFiles = [\n    'server/routes/firebaseAuth.ts',\n    'server/enhancedRoutes.ts',\n    'AUDIT_FINDINGS_AND_FIXES.md'\n  ];\n  \n  for (const file of requiredFiles) {\n    try {\n      const { stdout } = await execAsync(`grep -l \"auth/check\" ${file} 2>/dev/null || echo \"not found\"`);\n      if (file.includes('firebaseAuth') && !stdout.includes('not found')) {\n        console.log(chalk.green(`✅ Auth check endpoint implemented in ${file}`));\n      } else if (file.includes('enhanced') && !stdout.includes('not found')) {\n        console.log(chalk.green(`✅ Enhanced terms endpoint implemented in ${file}`));\n      } else if (file.includes('AUDIT')) {\n        console.log(chalk.green(`✅ Documentation created: ${file}`));\n      }\n    } catch (error) {\n      console.log(chalk.red(`❌ Issue with ${file}`));\n    }\n  }\n}\n\nasync function main() {\n  console.log(chalk.blue('🚀 API Fixes Validation Script\\n'));\n  \n  await testImplementationCompleteness();\n  const results = await testAPIFixes();\n  \n  console.log(chalk.green('\\n✅ API fixes validation complete!'));\n  console.log(chalk.blue('📋 Next steps:'));\n  console.log(chalk.gray('  1. Restart the server to pick up new routes'));\n  console.log(chalk.gray('  2. Run comprehensive audit again to verify improvements'));\n  console.log(chalk.gray('  3. Fix remaining issues based on audit results'));\n  \n  return results;\n}\n\n// Run if this is the main module\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error);\n}\n\nexport { testAPIFixes, testImplementationCompleteness };"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"/**\n * Comprehensive Visual Audit Script for AI Glossary Pro\n *\nconst { chromium, firefox, webkit } = require('playwright');\nconst fs = require('fsnode:fs);\nconst path = require('path');\n\nmodule.exports = { VisualAuditor };\n","ops":[{"diffOp":{"equal":{"range":[0,63]}}},{"equalLines":{"line_count":7}},{"diffOp":{"equal":{"range":[63,144]}}},{"diffOp":{"equal":{"range":[144,145]}}},{"diffOp":{"delete":{"range":[145,147]}}},{"diffOp":{"insert":{"range":[147,154]}}},{"diffOp":{"equal":{"range":[144,145]}}},{"diffOp":{"equal":{"range":[154,187]}}},{"equalLines":{"line_count":661}},{"diffOp":{"equal":{"range":[187,224]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/visual-audit.js"},"span":[441,445],"sourceCode":"/**\n * Comprehensive Visual Audit Script for AI Glossary Pro\n *\n * This script uses Playwright to:\n * 1. Test authentication flow with Firebase test users\n * 2. Navigate through all major components\n * 3. Take screenshots at different breakpoints\n * 4. Test button interactions, scrolling, and responsive design\n * 5. Generate a comprehensive audit report\n */\n\nconst { chromium, firefox, webkit } = require('playwright');\nconst fs = require('fs');\nconst path = require('path');\n\n// Configuration\nconst BASE_URL = 'http://localhost:5173';\nconst AUDIT_DIR = path.join(__dirname, '../audit-results');\nconst SCREENSHOTS_DIR = path.join(AUDIT_DIR, 'screenshots');\n\n// Test users from Firebase\nconst TEST_USERS = [\n  {\n    email: 'test@aimlglossary.com',\n    password: 'testpass123',\n    type: 'regular',\n    name: 'Regular User',\n  },\n  {\n    email: 'premium@aimlglossary.com',\n    password: 'premiumpass123',\n    type: 'premium',\n    name: 'Premium User',\n  },\n  {\n    email: 'admin@aimlglossary.com',\n    password: 'adminpass123',\n    type: 'admin',\n    name: 'Admin User',\n  },\n];\n\n// Viewport sizes to test\nconst VIEWPORTS = [\n  { name: 'mobile', width: 375, height: 667 },\n  { name: 'tablet', width: 768, height: 1024 },\n  { name: 'laptop', width: 1366, height: 768 },\n  { name: 'desktop', width: 1920, height: 1080 },\n];\n\n// Routes to test\nconst ROUTES = [\n  { path: '/', name: 'landing-page', auth: false },\n  { path: '/login', name: 'login-page', auth: false },\n  { path: '/app', name: 'app-home', auth: true },\n  { path: '/dashboard', name: 'dashboard', auth: true },\n  { path: '/categories', name: 'categories', auth: true },\n  { path: '/settings', name: 'settings', auth: true },\n  { path: '/profile', name: 'profile', auth: true },\n  { path: '/admin', name: 'admin', auth: 'admin' },\n];\n\nclass VisualAuditor {\n  constructor() {\n    this.results = [];\n    this.errors = [];\n    this.screenshots = [];\n    this.currentUser = null;\n  }\n\n  async init() {\n    // Create audit directories\n    if (!fs.existsSync(AUDIT_DIR)) {\n      fs.mkdirSync(AUDIT_DIR, { recursive: true });\n    }\n    if (!fs.existsSync(SCREENSHOTS_DIR)) {\n      fs.mkdirSync(SCREENSHOTS_DIR, { recursive: true });\n    }\n\n    console.log('🚀 Starting comprehensive visual audit...');\n    console.log(`📁 Results will be saved to: ${AUDIT_DIR}`);\n  }\n\n  async runFullAudit() {\n    await this.init();\n\n    // Test with Chromium (most common browser)\n    const browser = await chromium.launch({ headless: false });\n\n    try {\n      // Test each viewport size\n      for (const viewport of VIEWPORTS) {\n        console.log(`\\\\n📱 Testing ${viewport.name} (${viewport.width}x${viewport.height})`);\n\n        const context = await browser.newContext({\n          viewport: { width: viewport.width, height: viewport.height },\n          userAgent: this.getUserAgent(viewport.name),\n        });\n\n        const page = await context.newPage();\n\n        // Enable console logging\n        page.on('console', (msg) => {\n          if (msg.type() === 'error') {\n            this.errors.push({\n              viewport: viewport.name,\n              type: 'console-error',\n              message: msg.text(),\n              url: page.url(),\n            });\n          }\n        });\n\n        // Test unauthenticated flows\n        await this.testUnauthenticatedFlow(page, viewport);\n\n        // Test authenticated flows with each user type\n        for (const user of TEST_USERS) {\n          await this.testAuthenticatedFlow(page, viewport, user);\n        }\n\n        await context.close();\n      }\n    } catch (error) {\n      console.error('❌ Audit failed:', error);\n      this.errors.push({\n        type: 'critical-error',\n        message: error.message,\n        stack: error.stack,\n      });\n    } finally {\n      await browser.close();\n    }\n\n    await this.generateReport();\n  }\n\n  async testUnauthenticatedFlow(page, viewport) {\n    console.log(`  🔓 Testing unauthenticated flow...`);\n\n    try {\n      // Test landing page\n      await page.goto(BASE_URL);\n      await page.waitForLoadState('networkidle');\n      await this.takeScreenshot(page, 'landing-page', viewport);\n\n      // Test responsive header on landing page\n      await this.testHeaderResponsiveness(page, viewport, false);\n\n      // Test hero section interactions\n      await this.testHeroSection(page, viewport);\n\n      // Test scroll behavior\n      await this.testScrollBehavior(page, viewport);\n\n      // Test login page\n      await page.goto(`${BASE_URL}/login`);\n      await page.waitForLoadState('networkidle');\n      await this.takeScreenshot(page, 'login-page', viewport);\n\n      // Test login form interactions\n      await this.testLoginForm(page, viewport);\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        flow: 'unauthenticated',\n        error: error.message,\n      });\n    }\n  }\n\n  async testAuthenticatedFlow(page, viewport, user) {\n    console.log(`  👤 Testing ${user.name} flow...`);\n\n    try {\n      // Login with test user\n      await this.loginUser(page, user);\n\n      // Test all authenticated routes\n      for (const route of ROUTES) {\n        if (\n          !route.auth ||\n          route.auth === true ||\n          (route.auth === 'admin' && user.type === 'admin')\n        ) {\n          await page.goto(`${BASE_URL}${route.path}`);\n          await page.waitForLoadState('networkidle');\n          await this.takeScreenshot(page, `${route.name}-${user.type}`, viewport);\n\n          // Test header responsiveness on authenticated pages\n          if (route.path !== '/') {\n            await this.testHeaderResponsiveness(page, viewport, true);\n          }\n\n          // Test specific page interactions\n          await this.testPageInteractions(page, route, viewport, user);\n        }\n      }\n\n      // Test logout flow\n      await this.testLogout(page, viewport);\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        user: user.name,\n        flow: 'authenticated',\n        error: error.message,\n      });\n    }\n  }\n\n  async loginUser(page, user) {\n    await page.goto(`${BASE_URL}/login`);\n    await page.waitForLoadState('networkidle');\n\n    // Use test user tab if available\n    if (await page.locator('[value=\"test\"]').isVisible()) {\n      await page.click('[value=\"test\"]');\n\n      // Find the correct test user button\n      const userButtons = await page.locator('button:has-text(\"Use This Account\")').all();\n      for (const button of userButtons) {\n        const text = await button.textContent();\n        if (text && text.includes('Use This Account')) {\n          const container = await button.locator('..').locator('..');\n          const emailText = await container.textContent();\n          if (emailText && emailText.includes(user.email)) {\n            await button.click();\n            break;\n          }\n        }\n      }\n    } else {\n      // Manual login\n      await page.fill('#email', user.email);\n      await page.fill('#password', user.password);\n    }\n\n    // Switch to login tab and submit\n    await page.click('[value=\"login\"]');\n    await page.click('button[type=\"submit\"]:has-text(\"Sign In\")');\n\n    // Wait for redirect\n    await page.waitForLoadState('networkidle');\n    this.currentUser = user;\n  }\n\n  async testLogout(page, viewport) {\n    try {\n      // Test logout functionality\n      if (viewport.width >= 1024) {\n        // Desktop: use dropdown\n        await page.click('[aria-label*=\"User menu\"]');\n        await page.click('text=Sign out');\n      } else {\n        // Mobile: use hamburger menu\n        await page.click('[aria-label*=\"navigation menu\"]');\n        await page.click('text=Sign Out');\n      }\n\n      await page.waitForLoadState('networkidle');\n      await this.takeScreenshot(page, 'after-logout', viewport);\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        test: 'logout',\n        error: error.message,\n      });\n    }\n  }\n\n  async testHeaderResponsiveness(page, viewport, authenticated) {\n    try {\n      const header = page.locator('header');\n      await header.scrollIntoViewIfNeeded();\n\n      // Test theme toggle visibility\n      const themeToggle = page.locator('button[aria-label*=\"Switch to\"]');\n      const isThemeToggleVisible = await themeToggle.isVisible();\n\n      this.results.push({\n        viewport: viewport.name,\n        test: 'header-theme-toggle',\n        expected: viewport.width >= 768, // md breakpoint\n        actual: isThemeToggleVisible,\n        passed: viewport.width >= 768 === isThemeToggleVisible,\n      });\n\n      // Test surprise me button visibility\n      const surpriseButton = page.locator('text=Surprise');\n      const isSurpriseVisible = await surpriseButton.isVisible();\n\n      this.results.push({\n        viewport: viewport.name,\n        test: 'header-surprise-button',\n        expected: viewport.width >= 768, // md breakpoint\n        actual: isSurpriseVisible,\n        passed: viewport.width >= 768 === isSurpriseVisible,\n      });\n\n      // Test mobile menu\n      if (viewport.width < 1024) {\n        // lg breakpoint\n        const mobileMenuButton = page.locator('[aria-label*=\"navigation menu\"]');\n        await mobileMenuButton.click();\n        await page.waitForTimeout(500);\n        await this.takeScreenshot(\n          page,\n          `mobile-menu-${authenticated ? 'auth' : 'unauth'}`,\n          viewport\n        );\n\n        // Close mobile menu\n        await page.press('body', 'Escape');\n      }\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        test: 'header-responsiveness',\n        error: error.message,\n      });\n    }\n  }\n\n  async testHeroSection(page, viewport) {\n    try {\n      const heroSection = page.locator('section:has(h1:has-text(\"Master AI\"))');\n      if (await heroSection.isVisible()) {\n        // Test CTA button\n        const ctaButton = page.locator('text=Start for Free');\n        await ctaButton.scrollIntoViewIfNeeded();\n        await this.takeScreenshot(page, 'hero-section', viewport);\n\n        // Test button interaction\n        await ctaButton.hover();\n        await page.waitForTimeout(300);\n        await this.takeScreenshot(page, 'hero-cta-hover', viewport);\n      }\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        test: 'hero-section',\n        error: error.message,\n      });\n    }\n  }\n\n  async testScrollBehavior(page, viewport) {\n    try {\n      // Test scroll through different sections\n      const sections = [\n        'section:has(h1:has-text(\"Master AI\"))',\n        'section:has(h2:has-text(\"Why Choose\"))',\n        'section:has(h2:has-text(\"Pricing\"))',\n      ];\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = page.locator(sections[i]);\n        if (await section.isVisible()) {\n          await section.scrollIntoViewIfNeeded();\n          await page.waitForTimeout(500);\n          await this.takeScreenshot(page, `scroll-section-${i}`, viewport);\n        }\n      }\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        test: 'scroll-behavior',\n        error: error.message,\n      });\n    }\n  }\n\n  async testLoginForm(page, viewport) {\n    try {\n      // Test form tabs\n      await page.click('[value=\"register\"]');\n      await page.waitForTimeout(300);\n      await this.takeScreenshot(page, 'register-tab', viewport);\n\n      await page.click('[value=\"login\"]');\n      await page.waitForTimeout(300);\n\n      // Test password visibility toggle\n      await page.fill('#password', 'testpassword');\n      const passwordToggle = page.locator('[aria-label*=\"password\"]');\n      await passwordToggle.click();\n      await page.waitForTimeout(300);\n      await this.takeScreenshot(page, 'password-visible', viewport);\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        test: 'login-form',\n        error: error.message,\n      });\n    }\n  }\n\n  async testPageInteractions(page, route, viewport, user) {\n    try {\n      // Test search functionality if present\n      const searchInput = page.locator('input[placeholder*=\"Search\"]');\n      if (await searchInput.isVisible()) {\n        await searchInput.fill('neural network');\n        await page.waitForTimeout(1000);\n        await this.takeScreenshot(page, `${route.name}-search`, viewport);\n        await searchInput.clear();\n      }\n\n      // Test navigation elements\n      const navLinks = page.locator('nav a');\n      const linkCount = await navLinks.count();\n\n      this.results.push({\n        viewport: viewport.name,\n        route: route.name,\n        user: user.type,\n        test: 'navigation-links',\n        count: linkCount,\n      });\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        route: route.name,\n        test: 'page-interactions',\n        error: error.message,\n      });\n    }\n  }\n\n  async takeScreenshot(page, name, viewport) {\n    const filename = `${viewport.name}-${name}-${Date.now()}.png`;\n    const filepath = path.join(SCREENSHOTS_DIR, filename);\n\n    await page.screenshot({\n      path: filepath,\n      fullPage: true,\n      quality: 80,\n    });\n\n    this.screenshots.push({\n      name,\n      viewport: viewport.name,\n      filename,\n      filepath,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  getUserAgent(viewportName) {\n    const userAgents = {\n      mobile:\n        'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n      tablet:\n        'Mozilla/5.0 (iPad; CPU OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n      laptop:\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n      desktop:\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n    };\n    return userAgents[viewportName] || userAgents.desktop;\n  }\n\n  async generateReport() {\n    const timestamp = new Date().toISOString();\n\n    const report = {\n      audit: {\n        timestamp,\n        version: '1.0.0',\n        baseUrl: BASE_URL,\n      },\n      summary: {\n        totalTests: this.results.length,\n        passed: this.results.filter((r) => r.passed !== false).length,\n        failed: this.results.filter((r) => r.passed === false).length,\n        errors: this.errors.length,\n        screenshots: this.screenshots.length,\n      },\n      results: this.results,\n      errors: this.errors,\n      screenshots: this.screenshots,\n      recommendations: this.generateRecommendations(),\n    };\n\n    // Save JSON report\n    const reportPath = path.join(AUDIT_DIR, `audit-report-${Date.now()}.json`);\n    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n\n    // Generate HTML report\n    await this.generateHTMLReport(report);\n\n    console.log('\\\\n✅ Audit completed!');\n    console.log(\n      `📊 Results: ${report.summary.passed} passed, ${report.summary.failed} failed, ${report.summary.errors} errors`\n    );\n    console.log(`📷 Screenshots: ${report.summary.screenshots} taken`);\n    console.log(`📄 Report saved to: ${reportPath}`);\n  }\n\n  generateRecommendations() {\n    const recommendations = [];\n\n    // Analyze responsive design issues\n    const responsiveIssues = this.results.filter((r) => r.test.includes('header') && !r.passed);\n    if (responsiveIssues.length > 0) {\n      recommendations.push({\n        category: 'Responsive Design',\n        priority: 'high',\n        issue: 'Header elements not responding correctly to viewport changes',\n        solution: 'Review Tailwind breakpoints and ensure proper responsive utilities',\n      });\n    }\n\n    // Analyze error patterns\n    const authErrors = this.errors.filter((e) => e.flow === 'authenticated');\n    if (authErrors.length > 0) {\n      recommendations.push({\n        category: 'Authentication',\n        priority: 'critical',\n        issue: 'Authentication flow errors detected',\n        solution: 'Review Firebase authentication implementation and error handling',\n      });\n    }\n\n    // Performance recommendations\n    if (this.errors.some((e) => e.type === 'console-error')) {\n      recommendations.push({\n        category: 'Performance',\n        priority: 'medium',\n        issue: 'Console errors detected during testing',\n        solution: 'Review and fix JavaScript errors in browser console',\n      });\n    }\n\n    return recommendations;\n  }\n\n  async generateHTMLReport(report) {\n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Glossary Pro - Visual Audit Report</title>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }\n        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { border-bottom: 2px solid #e2e8f0; padding-bottom: 20px; margin-bottom: 30px; }\n        .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }\n        .metric { background: #f8fafc; padding: 20px; border-radius: 6px; text-align: center; }\n        .metric h3 { margin: 0 0 10px 0; color: #334155; }\n        .metric .value { font-size: 2em; font-weight: bold; color: #0f172a; }\n        .passed { color: #16a34a; }\n        .failed { color: #dc2626; }\n        .section { margin: 30px 0; }\n        .section h2 { color: #1e293b; border-bottom: 1px solid #e2e8f0; padding-bottom: 10px; }\n        .error { background: #fef2f2; border: 1px solid #fecaca; padding: 15px; border-radius: 6px; margin: 10px 0; }\n        .recommendation { background: #eff6ff; border: 1px solid #bfdbfe; padding: 15px; border-radius: 6px; margin: 10px 0; }\n        .screenshots { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; }\n        .screenshot { border: 1px solid #e2e8f0; border-radius: 6px; overflow: hidden; }\n        .screenshot img { width: 100%; height: auto; display: block; }\n        .screenshot-info { padding: 10px; background: #f8fafc; font-size: 0.9em; color: #64748b; }\n        .priority-critical { border-left: 4px solid #dc2626; }\n        .priority-high { border-left: 4px solid #ea580c; }\n        .priority-medium { border-left: 4px solid #ca8a04; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🚀 AI Glossary Pro - Visual Audit Report</h1>\n            <p><strong>Generated:</strong> ${report.audit.timestamp}</p>\n            <p><strong>Base URL:</strong> ${report.audit.baseUrl}</p>\n        </div>\n\n        <div class=\"summary\">\n            <div class=\"metric\">\n                <h3>Total Tests</h3>\n                <div class=\"value\">${report.summary.totalTests}</div>\n            </div>\n            <div class=\"metric\">\n                <h3>Passed</h3>\n                <div class=\"value passed\">${report.summary.passed}</div>\n            </div>\n            <div class=\"metric\">\n                <h3>Failed</h3>\n                <div class=\"value failed\">${report.summary.failed}</div>\n            </div>\n            <div class=\"metric\">\n                <h3>Errors</h3>\n                <div class=\"value\">${report.summary.errors}</div>\n            </div>\n            <div class=\"metric\">\n                <h3>Screenshots</h3>\n                <div class=\"value\">${report.summary.screenshots}</div>\n            </div>\n        </div>\n\n        <div class=\"section\">\n            <h2>🎯 Recommendations</h2>\n            ${report.recommendations\n              .map(\n                (rec) => `\n                <div class=\"recommendation priority-${rec.priority}\">\n                    <h4>${rec.category} (${rec.priority.toUpperCase()})</h4>\n                    <p><strong>Issue:</strong> ${rec.issue}</p>\n                    <p><strong>Solution:</strong> ${rec.solution}</p>\n                </div>\n            `\n              )\n              .join('')}\n        </div>\n\n        ${\n          report.errors.length > 0\n            ? `\n        <div class=\"section\">\n            <h2>❌ Errors</h2>\n            ${report.errors\n              .map(\n                (error) => `\n                <div class=\"error\">\n                    <strong>${error.type || 'Error'}:</strong> ${error.message}\n                    ${error.viewport ? `<br><small>Viewport: ${error.viewport}</small>` : ''}\n                </div>\n            `\n              )\n              .join('')}\n        </div>\n        `\n            : ''\n        }\n\n        <div class=\"section\">\n            <h2>📷 Screenshots</h2>\n            <div class=\"screenshots\">\n                ${report.screenshots\n                  .map(\n                    (screenshot) => `\n                    <div class=\"screenshot\">\n                        <img src=\"screenshots/${screenshot.filename}\" alt=\"${screenshot.name}\">\n                        <div class=\"screenshot-info\">\n                            <strong>${screenshot.name}</strong><br>\n                            ${screenshot.viewport} • ${new Date(screenshot.timestamp).toLocaleTimeString()}\n                        </div>\n                    </div>\n                `\n                  )\n                  .join('')}\n            </div>\n        </div>\n    </div>\n</body>\n</html>`;\n\n    const htmlPath = path.join(AUDIT_DIR, 'audit-report.html');\n    fs.writeFileSync(htmlPath, html);\n    console.log(`📄 HTML report saved to: ${htmlPath}`);\n  }\n}\n\n// Run the audit\nasync function main() {\n  console.log('🔍 AI Glossary Pro - Comprehensive Visual Audit');\n  console.log('===============================================\\\\n');\n\n  const auditor = new VisualAuditor();\n  await auditor.runFullAudit();\n}\n\n// Handle script execution\nif (require.main === module) {\n  main().catch(console.error);\n}\n\nmodule.exports = { VisualAuditor };\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"/**\n * Comprehensive Visual Audit Script for AI Glossary Pro\n *const { chromium, firefox, webkit } = require('playwright');\nconst fs = require('fs');\nconst path = require('pathnode:path);\n\n// Configuration\nmodule.exports = { VisualAuditor };\n","ops":[{"diffOp":{"equal":{"range":[0,63]}}},{"equalLines":{"line_count":8}},{"diffOp":{"equal":{"range":[63,171]}}},{"diffOp":{"equal":{"range":[171,172]}}},{"diffOp":{"delete":{"range":[172,176]}}},{"diffOp":{"insert":{"range":[176,185]}}},{"diffOp":{"equal":{"range":[171,172]}}},{"diffOp":{"equal":{"range":[185,205]}}},{"equalLines":{"line_count":660}},{"diffOp":{"equal":{"range":[205,242]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"scripts/visual-audit.js"},"span":[469,475],"sourceCode":"/**\n * Comprehensive Visual Audit Script for AI Glossary Pro\n *\n * This script uses Playwright to:\n * 1. Test authentication flow with Firebase test users\n * 2. Navigate through all major components\n * 3. Take screenshots at different breakpoints\n * 4. Test button interactions, scrolling, and responsive design\n * 5. Generate a comprehensive audit report\n */\n\nconst { chromium, firefox, webkit } = require('playwright');\nconst fs = require('fs');\nconst path = require('path');\n\n// Configuration\nconst BASE_URL = 'http://localhost:5173';\nconst AUDIT_DIR = path.join(__dirname, '../audit-results');\nconst SCREENSHOTS_DIR = path.join(AUDIT_DIR, 'screenshots');\n\n// Test users from Firebase\nconst TEST_USERS = [\n  {\n    email: 'test@aimlglossary.com',\n    password: 'testpass123',\n    type: 'regular',\n    name: 'Regular User',\n  },\n  {\n    email: 'premium@aimlglossary.com',\n    password: 'premiumpass123',\n    type: 'premium',\n    name: 'Premium User',\n  },\n  {\n    email: 'admin@aimlglossary.com',\n    password: 'adminpass123',\n    type: 'admin',\n    name: 'Admin User',\n  },\n];\n\n// Viewport sizes to test\nconst VIEWPORTS = [\n  { name: 'mobile', width: 375, height: 667 },\n  { name: 'tablet', width: 768, height: 1024 },\n  { name: 'laptop', width: 1366, height: 768 },\n  { name: 'desktop', width: 1920, height: 1080 },\n];\n\n// Routes to test\nconst ROUTES = [\n  { path: '/', name: 'landing-page', auth: false },\n  { path: '/login', name: 'login-page', auth: false },\n  { path: '/app', name: 'app-home', auth: true },\n  { path: '/dashboard', name: 'dashboard', auth: true },\n  { path: '/categories', name: 'categories', auth: true },\n  { path: '/settings', name: 'settings', auth: true },\n  { path: '/profile', name: 'profile', auth: true },\n  { path: '/admin', name: 'admin', auth: 'admin' },\n];\n\nclass VisualAuditor {\n  constructor() {\n    this.results = [];\n    this.errors = [];\n    this.screenshots = [];\n    this.currentUser = null;\n  }\n\n  async init() {\n    // Create audit directories\n    if (!fs.existsSync(AUDIT_DIR)) {\n      fs.mkdirSync(AUDIT_DIR, { recursive: true });\n    }\n    if (!fs.existsSync(SCREENSHOTS_DIR)) {\n      fs.mkdirSync(SCREENSHOTS_DIR, { recursive: true });\n    }\n\n    console.log('🚀 Starting comprehensive visual audit...');\n    console.log(`📁 Results will be saved to: ${AUDIT_DIR}`);\n  }\n\n  async runFullAudit() {\n    await this.init();\n\n    // Test with Chromium (most common browser)\n    const browser = await chromium.launch({ headless: false });\n\n    try {\n      // Test each viewport size\n      for (const viewport of VIEWPORTS) {\n        console.log(`\\\\n📱 Testing ${viewport.name} (${viewport.width}x${viewport.height})`);\n\n        const context = await browser.newContext({\n          viewport: { width: viewport.width, height: viewport.height },\n          userAgent: this.getUserAgent(viewport.name),\n        });\n\n        const page = await context.newPage();\n\n        // Enable console logging\n        page.on('console', (msg) => {\n          if (msg.type() === 'error') {\n            this.errors.push({\n              viewport: viewport.name,\n              type: 'console-error',\n              message: msg.text(),\n              url: page.url(),\n            });\n          }\n        });\n\n        // Test unauthenticated flows\n        await this.testUnauthenticatedFlow(page, viewport);\n\n        // Test authenticated flows with each user type\n        for (const user of TEST_USERS) {\n          await this.testAuthenticatedFlow(page, viewport, user);\n        }\n\n        await context.close();\n      }\n    } catch (error) {\n      console.error('❌ Audit failed:', error);\n      this.errors.push({\n        type: 'critical-error',\n        message: error.message,\n        stack: error.stack,\n      });\n    } finally {\n      await browser.close();\n    }\n\n    await this.generateReport();\n  }\n\n  async testUnauthenticatedFlow(page, viewport) {\n    console.log(`  🔓 Testing unauthenticated flow...`);\n\n    try {\n      // Test landing page\n      await page.goto(BASE_URL);\n      await page.waitForLoadState('networkidle');\n      await this.takeScreenshot(page, 'landing-page', viewport);\n\n      // Test responsive header on landing page\n      await this.testHeaderResponsiveness(page, viewport, false);\n\n      // Test hero section interactions\n      await this.testHeroSection(page, viewport);\n\n      // Test scroll behavior\n      await this.testScrollBehavior(page, viewport);\n\n      // Test login page\n      await page.goto(`${BASE_URL}/login`);\n      await page.waitForLoadState('networkidle');\n      await this.takeScreenshot(page, 'login-page', viewport);\n\n      // Test login form interactions\n      await this.testLoginForm(page, viewport);\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        flow: 'unauthenticated',\n        error: error.message,\n      });\n    }\n  }\n\n  async testAuthenticatedFlow(page, viewport, user) {\n    console.log(`  👤 Testing ${user.name} flow...`);\n\n    try {\n      // Login with test user\n      await this.loginUser(page, user);\n\n      // Test all authenticated routes\n      for (const route of ROUTES) {\n        if (\n          !route.auth ||\n          route.auth === true ||\n          (route.auth === 'admin' && user.type === 'admin')\n        ) {\n          await page.goto(`${BASE_URL}${route.path}`);\n          await page.waitForLoadState('networkidle');\n          await this.takeScreenshot(page, `${route.name}-${user.type}`, viewport);\n\n          // Test header responsiveness on authenticated pages\n          if (route.path !== '/') {\n            await this.testHeaderResponsiveness(page, viewport, true);\n          }\n\n          // Test specific page interactions\n          await this.testPageInteractions(page, route, viewport, user);\n        }\n      }\n\n      // Test logout flow\n      await this.testLogout(page, viewport);\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        user: user.name,\n        flow: 'authenticated',\n        error: error.message,\n      });\n    }\n  }\n\n  async loginUser(page, user) {\n    await page.goto(`${BASE_URL}/login`);\n    await page.waitForLoadState('networkidle');\n\n    // Use test user tab if available\n    if (await page.locator('[value=\"test\"]').isVisible()) {\n      await page.click('[value=\"test\"]');\n\n      // Find the correct test user button\n      const userButtons = await page.locator('button:has-text(\"Use This Account\")').all();\n      for (const button of userButtons) {\n        const text = await button.textContent();\n        if (text && text.includes('Use This Account')) {\n          const container = await button.locator('..').locator('..');\n          const emailText = await container.textContent();\n          if (emailText && emailText.includes(user.email)) {\n            await button.click();\n            break;\n          }\n        }\n      }\n    } else {\n      // Manual login\n      await page.fill('#email', user.email);\n      await page.fill('#password', user.password);\n    }\n\n    // Switch to login tab and submit\n    await page.click('[value=\"login\"]');\n    await page.click('button[type=\"submit\"]:has-text(\"Sign In\")');\n\n    // Wait for redirect\n    await page.waitForLoadState('networkidle');\n    this.currentUser = user;\n  }\n\n  async testLogout(page, viewport) {\n    try {\n      // Test logout functionality\n      if (viewport.width >= 1024) {\n        // Desktop: use dropdown\n        await page.click('[aria-label*=\"User menu\"]');\n        await page.click('text=Sign out');\n      } else {\n        // Mobile: use hamburger menu\n        await page.click('[aria-label*=\"navigation menu\"]');\n        await page.click('text=Sign Out');\n      }\n\n      await page.waitForLoadState('networkidle');\n      await this.takeScreenshot(page, 'after-logout', viewport);\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        test: 'logout',\n        error: error.message,\n      });\n    }\n  }\n\n  async testHeaderResponsiveness(page, viewport, authenticated) {\n    try {\n      const header = page.locator('header');\n      await header.scrollIntoViewIfNeeded();\n\n      // Test theme toggle visibility\n      const themeToggle = page.locator('button[aria-label*=\"Switch to\"]');\n      const isThemeToggleVisible = await themeToggle.isVisible();\n\n      this.results.push({\n        viewport: viewport.name,\n        test: 'header-theme-toggle',\n        expected: viewport.width >= 768, // md breakpoint\n        actual: isThemeToggleVisible,\n        passed: viewport.width >= 768 === isThemeToggleVisible,\n      });\n\n      // Test surprise me button visibility\n      const surpriseButton = page.locator('text=Surprise');\n      const isSurpriseVisible = await surpriseButton.isVisible();\n\n      this.results.push({\n        viewport: viewport.name,\n        test: 'header-surprise-button',\n        expected: viewport.width >= 768, // md breakpoint\n        actual: isSurpriseVisible,\n        passed: viewport.width >= 768 === isSurpriseVisible,\n      });\n\n      // Test mobile menu\n      if (viewport.width < 1024) {\n        // lg breakpoint\n        const mobileMenuButton = page.locator('[aria-label*=\"navigation menu\"]');\n        await mobileMenuButton.click();\n        await page.waitForTimeout(500);\n        await this.takeScreenshot(\n          page,\n          `mobile-menu-${authenticated ? 'auth' : 'unauth'}`,\n          viewport\n        );\n\n        // Close mobile menu\n        await page.press('body', 'Escape');\n      }\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        test: 'header-responsiveness',\n        error: error.message,\n      });\n    }\n  }\n\n  async testHeroSection(page, viewport) {\n    try {\n      const heroSection = page.locator('section:has(h1:has-text(\"Master AI\"))');\n      if (await heroSection.isVisible()) {\n        // Test CTA button\n        const ctaButton = page.locator('text=Start for Free');\n        await ctaButton.scrollIntoViewIfNeeded();\n        await this.takeScreenshot(page, 'hero-section', viewport);\n\n        // Test button interaction\n        await ctaButton.hover();\n        await page.waitForTimeout(300);\n        await this.takeScreenshot(page, 'hero-cta-hover', viewport);\n      }\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        test: 'hero-section',\n        error: error.message,\n      });\n    }\n  }\n\n  async testScrollBehavior(page, viewport) {\n    try {\n      // Test scroll through different sections\n      const sections = [\n        'section:has(h1:has-text(\"Master AI\"))',\n        'section:has(h2:has-text(\"Why Choose\"))',\n        'section:has(h2:has-text(\"Pricing\"))',\n      ];\n\n      for (let i = 0; i < sections.length; i++) {\n        const section = page.locator(sections[i]);\n        if (await section.isVisible()) {\n          await section.scrollIntoViewIfNeeded();\n          await page.waitForTimeout(500);\n          await this.takeScreenshot(page, `scroll-section-${i}`, viewport);\n        }\n      }\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        test: 'scroll-behavior',\n        error: error.message,\n      });\n    }\n  }\n\n  async testLoginForm(page, viewport) {\n    try {\n      // Test form tabs\n      await page.click('[value=\"register\"]');\n      await page.waitForTimeout(300);\n      await this.takeScreenshot(page, 'register-tab', viewport);\n\n      await page.click('[value=\"login\"]');\n      await page.waitForTimeout(300);\n\n      // Test password visibility toggle\n      await page.fill('#password', 'testpassword');\n      const passwordToggle = page.locator('[aria-label*=\"password\"]');\n      await passwordToggle.click();\n      await page.waitForTimeout(300);\n      await this.takeScreenshot(page, 'password-visible', viewport);\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        test: 'login-form',\n        error: error.message,\n      });\n    }\n  }\n\n  async testPageInteractions(page, route, viewport, user) {\n    try {\n      // Test search functionality if present\n      const searchInput = page.locator('input[placeholder*=\"Search\"]');\n      if (await searchInput.isVisible()) {\n        await searchInput.fill('neural network');\n        await page.waitForTimeout(1000);\n        await this.takeScreenshot(page, `${route.name}-search`, viewport);\n        await searchInput.clear();\n      }\n\n      // Test navigation elements\n      const navLinks = page.locator('nav a');\n      const linkCount = await navLinks.count();\n\n      this.results.push({\n        viewport: viewport.name,\n        route: route.name,\n        user: user.type,\n        test: 'navigation-links',\n        count: linkCount,\n      });\n    } catch (error) {\n      this.errors.push({\n        viewport: viewport.name,\n        route: route.name,\n        test: 'page-interactions',\n        error: error.message,\n      });\n    }\n  }\n\n  async takeScreenshot(page, name, viewport) {\n    const filename = `${viewport.name}-${name}-${Date.now()}.png`;\n    const filepath = path.join(SCREENSHOTS_DIR, filename);\n\n    await page.screenshot({\n      path: filepath,\n      fullPage: true,\n      quality: 80,\n    });\n\n    this.screenshots.push({\n      name,\n      viewport: viewport.name,\n      filename,\n      filepath,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  getUserAgent(viewportName) {\n    const userAgents = {\n      mobile:\n        'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n      tablet:\n        'Mozilla/5.0 (iPad; CPU OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n      laptop:\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n      desktop:\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n    };\n    return userAgents[viewportName] || userAgents.desktop;\n  }\n\n  async generateReport() {\n    const timestamp = new Date().toISOString();\n\n    const report = {\n      audit: {\n        timestamp,\n        version: '1.0.0',\n        baseUrl: BASE_URL,\n      },\n      summary: {\n        totalTests: this.results.length,\n        passed: this.results.filter((r) => r.passed !== false).length,\n        failed: this.results.filter((r) => r.passed === false).length,\n        errors: this.errors.length,\n        screenshots: this.screenshots.length,\n      },\n      results: this.results,\n      errors: this.errors,\n      screenshots: this.screenshots,\n      recommendations: this.generateRecommendations(),\n    };\n\n    // Save JSON report\n    const reportPath = path.join(AUDIT_DIR, `audit-report-${Date.now()}.json`);\n    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n\n    // Generate HTML report\n    await this.generateHTMLReport(report);\n\n    console.log('\\\\n✅ Audit completed!');\n    console.log(\n      `📊 Results: ${report.summary.passed} passed, ${report.summary.failed} failed, ${report.summary.errors} errors`\n    );\n    console.log(`📷 Screenshots: ${report.summary.screenshots} taken`);\n    console.log(`📄 Report saved to: ${reportPath}`);\n  }\n\n  generateRecommendations() {\n    const recommendations = [];\n\n    // Analyze responsive design issues\n    const responsiveIssues = this.results.filter((r) => r.test.includes('header') && !r.passed);\n    if (responsiveIssues.length > 0) {\n      recommendations.push({\n        category: 'Responsive Design',\n        priority: 'high',\n        issue: 'Header elements not responding correctly to viewport changes',\n        solution: 'Review Tailwind breakpoints and ensure proper responsive utilities',\n      });\n    }\n\n    // Analyze error patterns\n    const authErrors = this.errors.filter((e) => e.flow === 'authenticated');\n    if (authErrors.length > 0) {\n      recommendations.push({\n        category: 'Authentication',\n        priority: 'critical',\n        issue: 'Authentication flow errors detected',\n        solution: 'Review Firebase authentication implementation and error handling',\n      });\n    }\n\n    // Performance recommendations\n    if (this.errors.some((e) => e.type === 'console-error')) {\n      recommendations.push({\n        category: 'Performance',\n        priority: 'medium',\n        issue: 'Console errors detected during testing',\n        solution: 'Review and fix JavaScript errors in browser console',\n      });\n    }\n\n    return recommendations;\n  }\n\n  async generateHTMLReport(report) {\n    const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Glossary Pro - Visual Audit Report</title>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }\n        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { border-bottom: 2px solid #e2e8f0; padding-bottom: 20px; margin-bottom: 30px; }\n        .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }\n        .metric { background: #f8fafc; padding: 20px; border-radius: 6px; text-align: center; }\n        .metric h3 { margin: 0 0 10px 0; color: #334155; }\n        .metric .value { font-size: 2em; font-weight: bold; color: #0f172a; }\n        .passed { color: #16a34a; }\n        .failed { color: #dc2626; }\n        .section { margin: 30px 0; }\n        .section h2 { color: #1e293b; border-bottom: 1px solid #e2e8f0; padding-bottom: 10px; }\n        .error { background: #fef2f2; border: 1px solid #fecaca; padding: 15px; border-radius: 6px; margin: 10px 0; }\n        .recommendation { background: #eff6ff; border: 1px solid #bfdbfe; padding: 15px; border-radius: 6px; margin: 10px 0; }\n        .screenshots { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; }\n        .screenshot { border: 1px solid #e2e8f0; border-radius: 6px; overflow: hidden; }\n        .screenshot img { width: 100%; height: auto; display: block; }\n        .screenshot-info { padding: 10px; background: #f8fafc; font-size: 0.9em; color: #64748b; }\n        .priority-critical { border-left: 4px solid #dc2626; }\n        .priority-high { border-left: 4px solid #ea580c; }\n        .priority-medium { border-left: 4px solid #ca8a04; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🚀 AI Glossary Pro - Visual Audit Report</h1>\n            <p><strong>Generated:</strong> ${report.audit.timestamp}</p>\n            <p><strong>Base URL:</strong> ${report.audit.baseUrl}</p>\n        </div>\n\n        <div class=\"summary\">\n            <div class=\"metric\">\n                <h3>Total Tests</h3>\n                <div class=\"value\">${report.summary.totalTests}</div>\n            </div>\n            <div class=\"metric\">\n                <h3>Passed</h3>\n                <div class=\"value passed\">${report.summary.passed}</div>\n            </div>\n            <div class=\"metric\">\n                <h3>Failed</h3>\n                <div class=\"value failed\">${report.summary.failed}</div>\n            </div>\n            <div class=\"metric\">\n                <h3>Errors</h3>\n                <div class=\"value\">${report.summary.errors}</div>\n            </div>\n            <div class=\"metric\">\n                <h3>Screenshots</h3>\n                <div class=\"value\">${report.summary.screenshots}</div>\n            </div>\n        </div>\n\n        <div class=\"section\">\n            <h2>🎯 Recommendations</h2>\n            ${report.recommendations\n              .map(\n                (rec) => `\n                <div class=\"recommendation priority-${rec.priority}\">\n                    <h4>${rec.category} (${rec.priority.toUpperCase()})</h4>\n                    <p><strong>Issue:</strong> ${rec.issue}</p>\n                    <p><strong>Solution:</strong> ${rec.solution}</p>\n                </div>\n            `\n              )\n              .join('')}\n        </div>\n\n        ${\n          report.errors.length > 0\n            ? `\n        <div class=\"section\">\n            <h2>❌ Errors</h2>\n            ${report.errors\n              .map(\n                (error) => `\n                <div class=\"error\">\n                    <strong>${error.type || 'Error'}:</strong> ${error.message}\n                    ${error.viewport ? `<br><small>Viewport: ${error.viewport}</small>` : ''}\n                </div>\n            `\n              )\n              .join('')}\n        </div>\n        `\n            : ''\n        }\n\n        <div class=\"section\">\n            <h2>📷 Screenshots</h2>\n            <div class=\"screenshots\">\n                ${report.screenshots\n                  .map(\n                    (screenshot) => `\n                    <div class=\"screenshot\">\n                        <img src=\"screenshots/${screenshot.filename}\" alt=\"${screenshot.name}\">\n                        <div class=\"screenshot-info\">\n                            <strong>${screenshot.name}</strong><br>\n                            ${screenshot.viewport} • ${new Date(screenshot.timestamp).toLocaleTimeString()}\n                        </div>\n                    </div>\n                `\n                  )\n                  .join('')}\n            </div>\n        </div>\n    </div>\n</body>\n</html>`;\n\n    const htmlPath = path.join(AUDIT_DIR, 'audit-report.html');\n    fs.writeFileSync(htmlPath, html);\n    console.log(`📄 HTML report saved to: ${htmlPath}`);\n  }\n}\n\n// Run the audit\nasync function main() {\n  console.log('🔍 AI Glossary Pro - Comprehensive Visual Audit');\n  console.log('===============================================\\\\n');\n\n  const auditor = new VisualAuditor();\n  await auditor.runFullAudit();\n}\n\n// Handle script execution\nif (require.main === module) {\n  main().catch(console.error);\n}\n\nmodule.exports = { VisualAuditor };\n"},"tags":["fixable"],"source":null},{"category":"check","severity":"information","description":"","message":[{"elements":[],"content":"The size of the file is 1.5 MiB, which exceeds the configured maximum of 1.0 MiB for this project.\nUse the `files.maxSize` configuration to change the maximum size of files processed, or `files.includes` to ignore the file."}],"advices":{"advices":[]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"server/public/assets/index-BvLgpnTF.js"},"span":null,"sourceCode":null},"tags":[],"source":null},{"category":"check","severity":"information","description":"","message":[{"elements":[],"content":"The size of the file is 1.5 MiB, which exceeds the configured maximum of 1.0 MiB for this project.\nUse the `files.maxSize` configuration to change the maximum size of files processed, or `files.includes` to ignore the file."}],"advices":{"advices":[]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"server/public/assets/index-D-Asq7_W.js"},"span":null,"sourceCode":null},"tags":[],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"\nimport { test, expect } from '@playwright/test';\nimport { execSync } from 'child_processnode:child_process;\nimport path from 'path';\nimport fs from 'fs';  });\n});\n","ops":[{"diffOp":{"equal":{"range":[0,75]}}},{"diffOp":{"equal":{"range":[75,76]}}},{"diffOp":{"delete":{"range":[76,89]}}},{"diffOp":{"insert":{"range":[89,107]}}},{"diffOp":{"equal":{"range":[75,76]}}},{"diffOp":{"equal":{"range":[107,154]}}},{"equalLines":{"line_count":156}},{"diffOp":{"equal":{"range":[154,164]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"tests/visual/visual-audit-storybook.spec.ts"},"span":[75,90],"sourceCode":"\nimport { test, expect } from '@playwright/test';\nimport { execSync } from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\n\n// Define the Storybook URL\nconst STORYBOOK_URL = 'http://localhost:6007';\n\n// Define the directory for storing screenshots\nconst screenshotsDir = path.resolve(process.cwd(), 'tests/visual-audits-storybook');\n\n// Ensure the screenshots directory exists\nif (!fs.existsSync(screenshotsDir)) {\n  fs.mkdirSync(screenshotsDir, { recursive: true });\n}\n\ntest.describe('Storybook Visual Regression', () => {\n  test.beforeAll(async () => {\n    // Check if Storybook is running, if not, log a warning.\n    try {\n      execSync(`curl --head --silent --fail ${STORYBOOK_URL}`, { stdio: 'ignore' });\n      console.log(`Storybook is running at ${STORYBOOK_URL}`);\n    } catch (error) {\n      console.warn(`\n        WARNING: Storybook is not running at ${STORYBOOK_URL}.\n        Please start Storybook with 'npm run storybook' in the AIGlossaryPro directory.\n        Skipping Storybook visual tests.\n      `);\n      test.skip(); // Skip all tests in this describe block\n    }\n  });\n\n  test('should visually test all Storybook stories', async ({ page }) => {\n    await page.goto(STORYBOOK_URL);\n\n    // Wait for Storybook to fully load\n    await page.waitForLoadState('networkidle');\n    await page.waitForTimeout(3000);\n\n    let storyLinks = [];\n    \n    // Method 1: Try to find sidebar with multiple possible selectors\n    const sidebarSelectors = [\n      '[data-testid=\"sidebar-panel\"]',\n      '.sidebar-container',\n      '#storybook-explorer-tree',\n      '.sb-bar',\n      '.sidebar'\n    ];\n    \n    let sidebarFound = false;\n    for (const selector of sidebarSelectors) {\n      try {\n        await page.waitForSelector(selector, { state: 'visible', timeout: 5000 });\n        console.log(`Found sidebar with selector: ${selector}`);\n        sidebarFound = true;\n        break;\n      } catch (error) {\n        console.log(`Selector ${selector} failed`);\n      }\n    }\n    \n    if (!sidebarFound) {\n      console.log('No sidebar found, trying to extract stories directly from page');\n    }\n\n    // Method 2: Try different ways to get story links\n    const extractMethods = [\n      () => page.$$eval('a[data-item-id]', (links) => \n        links.map(link => ({\n          id: link.getAttribute('data-item-id') || '',\n          name: link.textContent?.trim() || '',\n          href: link.getAttribute('href') || '',\n        })).filter(story => story.id && story.id.includes('--'))\n      ),\n      () => page.$$eval('[data-nodetype=\"story\"] a, .sidebar-item a', (links) => \n        links.map(link => ({\n          id: link.getAttribute('data-item-id') || link.id || '',\n          name: link.textContent?.trim() || '',\n          href: link.getAttribute('href') || '',\n        })).filter(story => story.id || story.href)\n      ),\n      () => page.$$eval('a[href*=\"path=\"]', (links) => \n        links.map(link => ({\n          id: link.getAttribute('href')?.split('path=')[1]?.split('&')[0] || '',\n          name: link.textContent?.trim() || '',\n          href: link.getAttribute('href') || '',\n        })).filter(story => story.id)\n      )\n    ];\n\n    for (const method of extractMethods) {\n      try {\n        storyLinks = await method();\n        if (storyLinks.length > 0) {\n          console.log(`Found ${storyLinks.length} stories using method ${extractMethods.indexOf(method) + 1}`);\n          break;\n        }\n      } catch (error) {\n        console.log(`Method ${extractMethods.indexOf(method) + 1} failed:`, error.message);\n      }\n    }\n\n    // Method 3: If no stories found, create a basic test using your existing story files\n    if (storyLinks.length === 0) {\n      console.log('No stories found via selectors, using file-based approach');\n      const storyFiles = [\n        'button--primary',\n        'header--logged-in', \n        'header--logged-out',\n        'page--logged-in'\n      ];\n      \n      storyLinks = storyFiles.map(id => ({\n        id,\n        name: id.replace('--', ' - '),\n        href: `/?path=/story/${id}`\n      }));\n    }\n\n    console.log(`Found ${storyLinks.length} Storybook stories.`);\n\n    for (const story of storyLinks) {\n      if (!story.id && !story.href) continue;\n\n      // Generate story URL based on available data\n      let storyUrl;\n      if (story.id && story.id.includes('--')) {\n        storyUrl = `${STORYBOOK_URL}/iframe.html?id=${story.id}&viewMode=story`;\n      } else if (story.href) {\n        storyUrl = story.href.startsWith('http') ? story.href : `${STORYBOOK_URL}${story.href}`;\n      } else {\n        continue;\n      }\n      \n      const storyId = story.id || story.href.replace(/[^a-zA-Z0-9]/g, '-');\n      const screenshotPath = path.join(screenshotsDir, `${storyId}.png`);\n\n      await test.step(`Testing story: ${story.name} (${storyId})`, async () => {\n        try {\n          await page.goto(storyUrl, { waitUntil: 'networkidle' });\n          await page.waitForTimeout(500); // Give some time for rendering\n\n          // Use Playwright's built-in visual comparison\n          // This will create a baseline image if it doesn't exist,\n          // or compare against it and create a diff image if there are changes.\n          await expect(page).toHaveScreenshot(`${storyId}.png`, {\n            fullPage: true,\n            maxDiffPixelRatio: 0.01, // Allow for minor pixel differences\n            threshold: 0.1, // Allow for minor color differences\n          });\n          console.log(`  ✅ Passed: ${story.name}`);\n        } catch (error) {\n          console.error(`  ❌ Failed: ${story.name} - ${error.message}`);\n          // Optionally, take a screenshot on failure for debugging\n          await page.screenshot({ path: path.join(screenshotsDir, `${storyId}-FAIL.png`) });\n          throw error; // Re-throw to mark the test as failed\n        }\n      });\n    }\n  });\n});\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"\nimport { test, expect } from '@playwright/test';\nimport { execSync } from 'child_process';\nimport path from 'pathnode:path;\nimport fs from 'fs';\n  });\n});\n","ops":[{"diffOp":{"equal":{"range":[0,109]}}},{"diffOp":{"equal":{"range":[109,110]}}},{"diffOp":{"delete":{"range":[110,114]}}},{"diffOp":{"insert":{"range":[114,123]}}},{"diffOp":{"equal":{"range":[109,110]}}},{"diffOp":{"equal":{"range":[123,146]}}},{"equalLines":{"line_count":155}},{"diffOp":{"equal":{"range":[146,156]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"tests/visual/visual-audit-storybook.spec.ts"},"span":[109,115],"sourceCode":"\nimport { test, expect } from '@playwright/test';\nimport { execSync } from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\n\n// Define the Storybook URL\nconst STORYBOOK_URL = 'http://localhost:6007';\n\n// Define the directory for storing screenshots\nconst screenshotsDir = path.resolve(process.cwd(), 'tests/visual-audits-storybook');\n\n// Ensure the screenshots directory exists\nif (!fs.existsSync(screenshotsDir)) {\n  fs.mkdirSync(screenshotsDir, { recursive: true });\n}\n\ntest.describe('Storybook Visual Regression', () => {\n  test.beforeAll(async () => {\n    // Check if Storybook is running, if not, log a warning.\n    try {\n      execSync(`curl --head --silent --fail ${STORYBOOK_URL}`, { stdio: 'ignore' });\n      console.log(`Storybook is running at ${STORYBOOK_URL}`);\n    } catch (error) {\n      console.warn(`\n        WARNING: Storybook is not running at ${STORYBOOK_URL}.\n        Please start Storybook with 'npm run storybook' in the AIGlossaryPro directory.\n        Skipping Storybook visual tests.\n      `);\n      test.skip(); // Skip all tests in this describe block\n    }\n  });\n\n  test('should visually test all Storybook stories', async ({ page }) => {\n    await page.goto(STORYBOOK_URL);\n\n    // Wait for Storybook to fully load\n    await page.waitForLoadState('networkidle');\n    await page.waitForTimeout(3000);\n\n    let storyLinks = [];\n    \n    // Method 1: Try to find sidebar with multiple possible selectors\n    const sidebarSelectors = [\n      '[data-testid=\"sidebar-panel\"]',\n      '.sidebar-container',\n      '#storybook-explorer-tree',\n      '.sb-bar',\n      '.sidebar'\n    ];\n    \n    let sidebarFound = false;\n    for (const selector of sidebarSelectors) {\n      try {\n        await page.waitForSelector(selector, { state: 'visible', timeout: 5000 });\n        console.log(`Found sidebar with selector: ${selector}`);\n        sidebarFound = true;\n        break;\n      } catch (error) {\n        console.log(`Selector ${selector} failed`);\n      }\n    }\n    \n    if (!sidebarFound) {\n      console.log('No sidebar found, trying to extract stories directly from page');\n    }\n\n    // Method 2: Try different ways to get story links\n    const extractMethods = [\n      () => page.$$eval('a[data-item-id]', (links) => \n        links.map(link => ({\n          id: link.getAttribute('data-item-id') || '',\n          name: link.textContent?.trim() || '',\n          href: link.getAttribute('href') || '',\n        })).filter(story => story.id && story.id.includes('--'))\n      ),\n      () => page.$$eval('[data-nodetype=\"story\"] a, .sidebar-item a', (links) => \n        links.map(link => ({\n          id: link.getAttribute('data-item-id') || link.id || '',\n          name: link.textContent?.trim() || '',\n          href: link.getAttribute('href') || '',\n        })).filter(story => story.id || story.href)\n      ),\n      () => page.$$eval('a[href*=\"path=\"]', (links) => \n        links.map(link => ({\n          id: link.getAttribute('href')?.split('path=')[1]?.split('&')[0] || '',\n          name: link.textContent?.trim() || '',\n          href: link.getAttribute('href') || '',\n        })).filter(story => story.id)\n      )\n    ];\n\n    for (const method of extractMethods) {\n      try {\n        storyLinks = await method();\n        if (storyLinks.length > 0) {\n          console.log(`Found ${storyLinks.length} stories using method ${extractMethods.indexOf(method) + 1}`);\n          break;\n        }\n      } catch (error) {\n        console.log(`Method ${extractMethods.indexOf(method) + 1} failed:`, error.message);\n      }\n    }\n\n    // Method 3: If no stories found, create a basic test using your existing story files\n    if (storyLinks.length === 0) {\n      console.log('No stories found via selectors, using file-based approach');\n      const storyFiles = [\n        'button--primary',\n        'header--logged-in', \n        'header--logged-out',\n        'page--logged-in'\n      ];\n      \n      storyLinks = storyFiles.map(id => ({\n        id,\n        name: id.replace('--', ' - '),\n        href: `/?path=/story/${id}`\n      }));\n    }\n\n    console.log(`Found ${storyLinks.length} Storybook stories.`);\n\n    for (const story of storyLinks) {\n      if (!story.id && !story.href) continue;\n\n      // Generate story URL based on available data\n      let storyUrl;\n      if (story.id && story.id.includes('--')) {\n        storyUrl = `${STORYBOOK_URL}/iframe.html?id=${story.id}&viewMode=story`;\n      } else if (story.href) {\n        storyUrl = story.href.startsWith('http') ? story.href : `${STORYBOOK_URL}${story.href}`;\n      } else {\n        continue;\n      }\n      \n      const storyId = story.id || story.href.replace(/[^a-zA-Z0-9]/g, '-');\n      const screenshotPath = path.join(screenshotsDir, `${storyId}.png`);\n\n      await test.step(`Testing story: ${story.name} (${storyId})`, async () => {\n        try {\n          await page.goto(storyUrl, { waitUntil: 'networkidle' });\n          await page.waitForTimeout(500); // Give some time for rendering\n\n          // Use Playwright's built-in visual comparison\n          // This will create a baseline image if it doesn't exist,\n          // or compare against it and create a diff image if there are changes.\n          await expect(page).toHaveScreenshot(`${storyId}.png`, {\n            fullPage: true,\n            maxDiffPixelRatio: 0.01, // Allow for minor pixel differences\n            threshold: 0.1, // Allow for minor color differences\n          });\n          console.log(`  ✅ Passed: ${story.name}`);\n        } catch (error) {\n          console.error(`  ❌ Failed: ${story.name} - ${error.message}`);\n          // Optionally, take a screenshot on failure for debugging\n          await page.screenshot({ path: path.join(screenshotsDir, `${storyId}-FAIL.png`) });\n          throw error; // Re-throw to mark the test as failed\n        }\n      });\n    }\n  });\n});\n"},"tags":["fixable"],"source":null},{"category":"lint/style/useNodejsImportProtocol","severity":"information","description":"A Node.js builtin module should be imported with the node: protocol.","message":[{"elements":[],"content":"A Node.js builtin module should be imported with the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}],"advices":{"advices":[{"log":["info",[{"elements":[],"content":"Using the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol is more explicit and signals that the imported module belongs to Node.js."}]]},{"log":["info",[{"elements":[],"content":"Unsafe fix: Add the "},{"elements":["Emphasis"],"content":"node:"},{"elements":[],"content":" protocol."}]]},{"diff":{"dictionary":"\nimport { test, expect } from '@playwright/test';\nimport { execSync } from 'child_process';\nimport path from 'path';\nimport fs from 'fsnode:fs;\n\n// Define the Storybook URL  });\n});\n","ops":[{"diffOp":{"equal":{"range":[0,132]}}},{"diffOp":{"equal":{"range":[132,133]}}},{"diffOp":{"delete":{"range":[133,135]}}},{"diffOp":{"insert":{"range":[135,142]}}},{"diffOp":{"equal":{"range":[132,133]}}},{"diffOp":{"equal":{"range":[142,172]}}},{"equalLines":{"line_count":154}},{"diffOp":{"equal":{"range":[172,182]}}}]}}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"tests/visual/visual-audit-storybook.spec.ts"},"span":[132,136],"sourceCode":"\nimport { test, expect } from '@playwright/test';\nimport { execSync } from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\n\n// Define the Storybook URL\nconst STORYBOOK_URL = 'http://localhost:6007';\n\n// Define the directory for storing screenshots\nconst screenshotsDir = path.resolve(process.cwd(), 'tests/visual-audits-storybook');\n\n// Ensure the screenshots directory exists\nif (!fs.existsSync(screenshotsDir)) {\n  fs.mkdirSync(screenshotsDir, { recursive: true });\n}\n\ntest.describe('Storybook Visual Regression', () => {\n  test.beforeAll(async () => {\n    // Check if Storybook is running, if not, log a warning.\n    try {\n      execSync(`curl --head --silent --fail ${STORYBOOK_URL}`, { stdio: 'ignore' });\n      console.log(`Storybook is running at ${STORYBOOK_URL}`);\n    } catch (error) {\n      console.warn(`\n        WARNING: Storybook is not running at ${STORYBOOK_URL}.\n        Please start Storybook with 'npm run storybook' in the AIGlossaryPro directory.\n        Skipping Storybook visual tests.\n      `);\n      test.skip(); // Skip all tests in this describe block\n    }\n  });\n\n  test('should visually test all Storybook stories', async ({ page }) => {\n    await page.goto(STORYBOOK_URL);\n\n    // Wait for Storybook to fully load\n    await page.waitForLoadState('networkidle');\n    await page.waitForTimeout(3000);\n\n    let storyLinks = [];\n    \n    // Method 1: Try to find sidebar with multiple possible selectors\n    const sidebarSelectors = [\n      '[data-testid=\"sidebar-panel\"]',\n      '.sidebar-container',\n      '#storybook-explorer-tree',\n      '.sb-bar',\n      '.sidebar'\n    ];\n    \n    let sidebarFound = false;\n    for (const selector of sidebarSelectors) {\n      try {\n        await page.waitForSelector(selector, { state: 'visible', timeout: 5000 });\n        console.log(`Found sidebar with selector: ${selector}`);\n        sidebarFound = true;\n        break;\n      } catch (error) {\n        console.log(`Selector ${selector} failed`);\n      }\n    }\n    \n    if (!sidebarFound) {\n      console.log('No sidebar found, trying to extract stories directly from page');\n    }\n\n    // Method 2: Try different ways to get story links\n    const extractMethods = [\n      () => page.$$eval('a[data-item-id]', (links) => \n        links.map(link => ({\n          id: link.getAttribute('data-item-id') || '',\n          name: link.textContent?.trim() || '',\n          href: link.getAttribute('href') || '',\n        })).filter(story => story.id && story.id.includes('--'))\n      ),\n      () => page.$$eval('[data-nodetype=\"story\"] a, .sidebar-item a', (links) => \n        links.map(link => ({\n          id: link.getAttribute('data-item-id') || link.id || '',\n          name: link.textContent?.trim() || '',\n          href: link.getAttribute('href') || '',\n        })).filter(story => story.id || story.href)\n      ),\n      () => page.$$eval('a[href*=\"path=\"]', (links) => \n        links.map(link => ({\n          id: link.getAttribute('href')?.split('path=')[1]?.split('&')[0] || '',\n          name: link.textContent?.trim() || '',\n          href: link.getAttribute('href') || '',\n        })).filter(story => story.id)\n      )\n    ];\n\n    for (const method of extractMethods) {\n      try {\n        storyLinks = await method();\n        if (storyLinks.length > 0) {\n          console.log(`Found ${storyLinks.length} stories using method ${extractMethods.indexOf(method) + 1}`);\n          break;\n        }\n      } catch (error) {\n        console.log(`Method ${extractMethods.indexOf(method) + 1} failed:`, error.message);\n      }\n    }\n\n    // Method 3: If no stories found, create a basic test using your existing story files\n    if (storyLinks.length === 0) {\n      console.log('No stories found via selectors, using file-based approach');\n      const storyFiles = [\n        'button--primary',\n        'header--logged-in', \n        'header--logged-out',\n        'page--logged-in'\n      ];\n      \n      storyLinks = storyFiles.map(id => ({\n        id,\n        name: id.replace('--', ' - '),\n        href: `/?path=/story/${id}`\n      }));\n    }\n\n    console.log(`Found ${storyLinks.length} Storybook stories.`);\n\n    for (const story of storyLinks) {\n      if (!story.id && !story.href) continue;\n\n      // Generate story URL based on available data\n      let storyUrl;\n      if (story.id && story.id.includes('--')) {\n        storyUrl = `${STORYBOOK_URL}/iframe.html?id=${story.id}&viewMode=story`;\n      } else if (story.href) {\n        storyUrl = story.href.startsWith('http') ? story.href : `${STORYBOOK_URL}${story.href}`;\n      } else {\n        continue;\n      }\n      \n      const storyId = story.id || story.href.replace(/[^a-zA-Z0-9]/g, '-');\n      const screenshotPath = path.join(screenshotsDir, `${storyId}.png`);\n\n      await test.step(`Testing story: ${story.name} (${storyId})`, async () => {\n        try {\n          await page.goto(storyUrl, { waitUntil: 'networkidle' });\n          await page.waitForTimeout(500); // Give some time for rendering\n\n          // Use Playwright's built-in visual comparison\n          // This will create a baseline image if it doesn't exist,\n          // or compare against it and create a diff image if there are changes.\n          await expect(page).toHaveScreenshot(`${storyId}.png`, {\n            fullPage: true,\n            maxDiffPixelRatio: 0.01, // Allow for minor pixel differences\n            threshold: 0.1, // Allow for minor color differences\n          });\n          console.log(`  ✅ Passed: ${story.name}`);\n        } catch (error) {\n          console.error(`  ❌ Failed: ${story.name} - ${error.message}`);\n          // Optionally, take a screenshot on failure for debugging\n          await page.screenshot({ path: path.join(screenshotsDir, `${storyId}-FAIL.png`) });\n          throw error; // Re-throw to mark the test as failed\n        }\n      });\n    }\n  });\n});\n"},"tags":["fixable"],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIAdminDashboard.stories.tsx"},"span":[8656,8659],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIAdminDashboard } from './AIAdminDashboard';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIAdminDashboard> = {\n  title: 'Admin/AIAdminDashboard',\n  component: AIAdminDashboard,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"min-h-screen bg-gray-50\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Comprehensive admin dashboard for managing AI features, content generation, user feedback, and system analytics.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst mockStats = {\n  totalTerms: 12543,\n  aiGeneratedTerms: 8921,\n  pendingReviews: 234,\n  userFeedback: 1847,\n  dailyQueries: 45672,\n  systemHealth: 98.5,\n  apiCalls: {\n    today: 15420,\n    thisWeek: 89234,\n    thisMonth: 367891,\n  },\n  topCategories: [\n    { name: 'Machine Learning', count: 2341, growth: 12.5 },\n    { name: 'Deep Learning', count: 1876, growth: 18.2 },\n    { name: 'Natural Language Processing', count: 1654, growth: 15.7 },\n    { name: 'Computer Vision', count: 1432, growth: 9.3 },\n  ],\n};\n\nconst mockRecentActivity = [\n  {\n    id: '1',\n    type: 'term_generated',\n    message: 'AI generated definition for \"Quantum Machine Learning\"',\n    user: 'AI System',\n    timestamp: '2024-01-15T10:30:00Z',\n    status: 'pending_review',\n  },\n  {\n    id: '2',\n    type: 'feedback_received',\n    message: 'User reported accuracy issue with \"Neural Networks\" definition',\n    user: 'sarah.chen@example.com',\n    timestamp: '2024-01-15T09:45:00Z',\n    status: 'investigating',\n  },\n  {\n    id: '3',\n    type: 'content_approved',\n    message: 'Approved 15 AI-generated definitions after review',\n    user: 'admin@example.com',\n    timestamp: '2024-01-15T09:15:00Z',\n    status: 'completed',\n  },\n  {\n    id: '4',\n    type: 'system_alert',\n    message: 'AI service response time increased to 2.3s',\n    user: 'System Monitor',\n    timestamp: '2024-01-15T08:30:00Z',\n    status: 'monitoring',\n  },\n];\n\nconst mockPendingReviews = [\n  {\n    id: '1',\n    termName: 'Quantum Machine Learning',\n    generatedDefinition:\n      'Quantum machine learning combines quantum computing principles with machine learning algorithms...',\n    confidence: 0.87,\n    flaggedIssues: ['needs_examples', 'technical_accuracy'],\n    generatedAt: '2024-01-15T10:30:00Z',\n  },\n  {\n    id: '2',\n    termName: 'Federated Learning',\n    generatedDefinition:\n      'A machine learning technique that trains algorithms across decentralized edge devices...',\n    confidence: 0.92,\n    flaggedIssues: ['privacy_concerns'],\n    generatedAt: '2024-01-15T09:20:00Z',\n  },\n];\n\nexport const Default: Story = {\n  args: {\n    stats: mockStats,\n    recentActivity: mockRecentActivity,\n    pendingReviews: mockPendingReviews,\n    onReviewTerm: (termId: string) => console.log('Review term:', termId),\n    onApproveTerm: (termId: string) => console.log('Approve term:', termId),\n    onRejectTerm: (termId: string) => console.log('Reject term:', termId),\n  },\n};\n\nexport const WithHighActivity: Story = {\n  args: {\n    stats: {\n      ...mockStats,\n      pendingReviews: 1247,\n      userFeedback: 5623,\n      dailyQueries: 125780,\n      systemHealth: 94.2,\n    },\n    recentActivity: [\n      ...mockRecentActivity,\n      {\n        id: '5',\n        type: 'bulk_generation',\n        message: 'Bulk generated 50 definitions for Computer Vision category',\n        user: 'AI System',\n        timestamp: '2024-01-15T07:45:00Z',\n        status: 'completed',\n      },\n      {\n        id: '6',\n        type: 'user_report',\n        message: 'Multiple users reported outdated information in \"Deep Learning\" section',\n        user: 'Multiple Users',\n        timestamp: '2024-01-15T07:30:00Z',\n        status: 'urgent',\n      },\n    ],\n    pendingReviews: mockPendingReviews,\n    onReviewTerm: (termId: string) => console.log('Review term:', termId),\n    onApproveTerm: (termId: string) => console.log('Approve term:', termId),\n    onRejectTerm: (termId: string) => console.log('Reject term:', termId),\n  },\n};\n\nexport const AIServiceStatus: Story = {\n  args: {\n    stats: mockStats,\n    recentActivity: mockRecentActivity,\n    pendingReviews: mockPendingReviews,\n    aiServiceStatus: {\n      openai: { status: 'operational', responseTime: 1.2, uptime: 99.9 },\n      anthropic: { status: 'degraded', responseTime: 3.4, uptime: 97.8 },\n      cohere: { status: 'operational', responseTime: 0.8, uptime: 99.7 },\n      huggingface: { status: 'maintenance', responseTime: null, uptime: 95.2 },\n    },\n    onReviewTerm: (termId: string) => console.log('Review term:', termId),\n    onApproveTerm: (termId: string) => console.log('Approve term:', termId),\n    onRejectTerm: (termId: string) => console.log('Reject term:', termId),\n  },\n};\n\nexport const ContentModerationQueue: Story = {\n  args: {\n    stats: mockStats,\n    recentActivity: mockRecentActivity,\n    pendingReviews: [\n      ...mockPendingReviews,\n      {\n        id: '3',\n        termName: 'Explainable AI',\n        generatedDefinition:\n          'AI systems designed to provide clear explanations for their decisions and processes...',\n        confidence: 0.94,\n        flaggedIssues: ['bias_check', 'completeness'],\n        generatedAt: '2024-01-15T08:45:00Z',\n        userFeedback: [\n          { rating: 4, comment: 'Good explanation but needs more examples' },\n          { rating: 5, comment: 'Very clear and comprehensive' },\n        ],\n      },\n    ],\n    moderationQueue: [\n      {\n        id: '1',\n        type: 'user_contribution',\n        content: 'User-submitted definition for \"Edge AI\"',\n        submittedBy: 'expert@university.edu',\n        priority: 'high',\n        submittedAt: '2024-01-15T11:00:00Z',\n      },\n      {\n        id: '2',\n        type: 'edit_suggestion',\n        content: 'Suggested improvements to \"Machine Learning\" definition',\n        submittedBy: 'researcher@company.com',\n        priority: 'medium',\n        submittedAt: '2024-01-15T10:15:00Z',\n      },\n    ],\n    onReviewTerm: (termId: string) => console.log('Review term:', termId),\n    onApproveTerm: (termId: string) => console.log('Approve term:', termId),\n    onRejectTerm: (termId: string) => console.log('Reject term:', termId),\n    onModerationAction: (itemId: string, action: string) =>\n      console.log('Moderation:', itemId, action),\n  },\n};\n\nexport const AnalyticsView: Story = {\n  args: {\n    stats: mockStats,\n    recentActivity: mockRecentActivity,\n    pendingReviews: mockPendingReviews,\n    analytics: {\n      generationMetrics: {\n        successRate: 94.2,\n        averageConfidence: 0.87,\n        averageGenerationTime: 2.3,\n        dailyGenerations: 245,\n      },\n      userEngagement: {\n        definitionViews: 45672,\n        userFeedbackRate: 12.3,\n        averageRating: 4.2,\n        returnUsers: 78.9,\n      },\n      systemPerformance: {\n        apiLatency: 1.8,\n        errorRate: 0.02,\n        cacheHitRate: 89.4,\n        activeUsers: 2341,\n      },\n    },\n    onReviewTerm: (termId: string) => console.log('Review term:', termId),\n    onApproveTerm: (termId: string) => console.log('Approve term:', termId),\n    onRejectTerm: (termId: string) => console.log('Reject term:', termId),\n  },\n};\n\nexport const BulkOperations: Story = {\n  args: {\n    stats: mockStats,\n    recentActivity: mockRecentActivity,\n    pendingReviews: mockPendingReviews,\n    bulkOperations: {\n      inProgress: [\n        {\n          id: '1',\n          type: 'bulk_generation',\n          category: 'Reinforcement Learning',\n          progress: 67,\n          totalItems: 150,\n          completedItems: 100,\n          startedAt: '2024-01-15T09:30:00Z',\n          estimatedCompletion: '2024-01-15T12:00:00Z',\n        },\n      ],\n      recent: [\n        {\n          id: '2',\n          type: 'bulk_review',\n          category: 'Computer Vision',\n          status: 'completed',\n          totalItems: 89,\n          completedAt: '2024-01-15T08:45:00Z',\n          results: { approved: 82, rejected: 7 },\n        },\n      ],\n    },\n    onReviewTerm: (termId: string) => console.log('Review term:', termId),\n    onApproveTerm: (termId: string) => console.log('Approve term:', termId),\n    onRejectTerm: (termId: string) => console.log('Reject term:', termId),\n    onStartBulkOperation: (type: string, params: any) => console.log('Start bulk:', type, params),\n  },\n};\n\nexport const UserFeedbackAnalysis: Story = {\n  args: {\n    stats: mockStats,\n    recentActivity: mockRecentActivity,\n    pendingReviews: mockPendingReviews,\n    feedbackAnalysis: {\n      sentiment: {\n        positive: 67.8,\n        neutral: 24.1,\n        negative: 8.1,\n      },\n      commonIssues: [\n        { issue: 'Needs more examples', count: 234, trend: 'increasing' },\n        { issue: 'Too technical', count: 189, trend: 'stable' },\n        { issue: 'Outdated information', count: 156, trend: 'decreasing' },\n        { issue: 'Missing context', count: 142, trend: 'increasing' },\n      ],\n      topRatedDefinitions: [\n        { term: 'Neural Networks', rating: 4.8, votes: 2341 },\n        { term: 'Machine Learning', rating: 4.7, votes: 1876 },\n        { term: 'Deep Learning', rating: 4.6, votes: 1654 },\n      ],\n    },\n    onReviewTerm: (termId: string) => console.log('Review term:', termId),\n    onApproveTerm: (termId: string) => console.log('Approve term:', termId),\n    onRejectTerm: (termId: string) => console.log('Reject term:', termId),\n  },\n};\n\nexport const EmptyState: Story = {\n  args: {\n    stats: {\n      ...mockStats,\n      pendingReviews: 0,\n      userFeedback: 0,\n    },\n    recentActivity: [],\n    pendingReviews: [],\n    onReviewTerm: (termId: string) => console.log('Review term:', termId),\n    onApproveTerm: (termId: string) => console.log('Approve term:', termId),\n    onRejectTerm: (termId: string) => console.log('Reject term:', termId),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    onReviewTerm: (termId: string) => console.log('Review term:', termId),\n    onApproveTerm: (termId: string) => console.log('Approve term:', termId),\n    onRejectTerm: (termId: string) => console.log('Reject term:', termId),\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    error: 'Failed to load dashboard data. Please refresh and try again.',\n    onRetry: () => console.log('Retry loading dashboard'),\n    onReviewTerm: (termId: string) => console.log('Review term:', termId),\n    onApproveTerm: (termId: string) => console.log('Approve term:', termId),\n    onRejectTerm: (termId: string) => console.log('Reject term:', termId),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    stats: mockStats,\n    recentActivity: mockRecentActivity,\n    pendingReviews: mockPendingReviews,\n    onReviewTerm: (termId: string) => console.log('Review term:', termId),\n    onApproveTerm: (termId: string) => console.log('Approve term:', termId),\n    onRejectTerm: (termId: string) => console.log('Reject term:', termId),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.stories.tsx"},"span":[3607,3610],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionGenerator } from './AIDefinitionGenerator';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionGenerator> = {\n  title: 'AI/AIDefinitionGenerator',\n  component: AIDefinitionGenerator,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for generating comprehensive definitions and explanations of technical terms.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    initialTerm: '',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const WithPrefilledTerm: Story = {\n  args: {\n    initialTerm: 'Transformer Architecture',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const GeneratingState: Story = {\n  args: {\n    initialTerm: 'Attention Mechanism',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: { generating: true },\n        delay: 3000,\n      },\n    ],\n  },\n};\n\nexport const SuccessfulGeneration: Story = {\n  args: {\n    initialTerm: 'Convolutional Neural Network',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          definition: `A Convolutional Neural Network (CNN) is a deep learning architecture specifically designed for processing grid-like data such as images. CNNs use convolutional layers that apply filters to detect local features, pooling layers to reduce spatial dimensions, and fully connected layers for classification.\n\n**Key Components:**\n- **Convolutional Layers**: Apply learnable filters to detect features\n- **Pooling Layers**: Reduce spatial dimensions while preserving important information\n- **Activation Functions**: Introduce non-linearity (typically ReLU)\n- **Fully Connected Layers**: Perform final classification or regression\n\n**Applications:**\n- Image classification and recognition\n- Object detection and segmentation\n- Medical image analysis\n- Computer vision tasks\n\n**Advantages:**\n- Translation invariance through weight sharing\n- Hierarchical feature learning\n- Reduced number of parameters compared to fully connected networks\n- Effective for spatial data processing`,\n          confidence: 0.92,\n          sources: ['Deep Learning textbook', 'Computer Vision research papers'],\n          generatedAt: new Date().toISOString(),\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomizationOptions: Story = {\n  args: {\n    initialTerm: 'Gradient Descent',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    initialTerm: 'Invalid Term',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 429,\n        response: { error: 'Rate limit exceeded. Please try again in a few minutes.' },\n      },\n    ],\n  },\n};\n\nexport const WithCategory: Story = {\n  args: {\n    initialTerm: 'Random Forest',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ReinforcementLearning: Story = {\n  args: {\n    initialTerm: 'Reinforcement Learning',\n    initialCategory: 'Artificial Intelligence',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    initialTerm: 'Natural Language Processing',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    initialTerm: 'Computer Vision',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.stories.tsx"},"span":[1862,1865],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionGenerator } from './AIDefinitionGenerator';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionGenerator> = {\n  title: 'AI/AIDefinitionGenerator',\n  component: AIDefinitionGenerator,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for generating comprehensive definitions and explanations of technical terms.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    initialTerm: '',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const WithPrefilledTerm: Story = {\n  args: {\n    initialTerm: 'Transformer Architecture',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const GeneratingState: Story = {\n  args: {\n    initialTerm: 'Attention Mechanism',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: { generating: true },\n        delay: 3000,\n      },\n    ],\n  },\n};\n\nexport const SuccessfulGeneration: Story = {\n  args: {\n    initialTerm: 'Convolutional Neural Network',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          definition: `A Convolutional Neural Network (CNN) is a deep learning architecture specifically designed for processing grid-like data such as images. CNNs use convolutional layers that apply filters to detect local features, pooling layers to reduce spatial dimensions, and fully connected layers for classification.\n\n**Key Components:**\n- **Convolutional Layers**: Apply learnable filters to detect features\n- **Pooling Layers**: Reduce spatial dimensions while preserving important information\n- **Activation Functions**: Introduce non-linearity (typically ReLU)\n- **Fully Connected Layers**: Perform final classification or regression\n\n**Applications:**\n- Image classification and recognition\n- Object detection and segmentation\n- Medical image analysis\n- Computer vision tasks\n\n**Advantages:**\n- Translation invariance through weight sharing\n- Hierarchical feature learning\n- Reduced number of parameters compared to fully connected networks\n- Effective for spatial data processing`,\n          confidence: 0.92,\n          sources: ['Deep Learning textbook', 'Computer Vision research papers'],\n          generatedAt: new Date().toISOString(),\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomizationOptions: Story = {\n  args: {\n    initialTerm: 'Gradient Descent',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    initialTerm: 'Invalid Term',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 429,\n        response: { error: 'Rate limit exceeded. Please try again in a few minutes.' },\n      },\n    ],\n  },\n};\n\nexport const WithCategory: Story = {\n  args: {\n    initialTerm: 'Random Forest',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ReinforcementLearning: Story = {\n  args: {\n    initialTerm: 'Reinforcement Learning',\n    initialCategory: 'Artificial Intelligence',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    initialTerm: 'Natural Language Processing',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    initialTerm: 'Computer Vision',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.stories.tsx"},"span":[1451,1454],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionGenerator } from './AIDefinitionGenerator';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionGenerator> = {\n  title: 'AI/AIDefinitionGenerator',\n  component: AIDefinitionGenerator,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for generating comprehensive definitions and explanations of technical terms.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    initialTerm: '',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const WithPrefilledTerm: Story = {\n  args: {\n    initialTerm: 'Transformer Architecture',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const GeneratingState: Story = {\n  args: {\n    initialTerm: 'Attention Mechanism',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: { generating: true },\n        delay: 3000,\n      },\n    ],\n  },\n};\n\nexport const SuccessfulGeneration: Story = {\n  args: {\n    initialTerm: 'Convolutional Neural Network',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          definition: `A Convolutional Neural Network (CNN) is a deep learning architecture specifically designed for processing grid-like data such as images. CNNs use convolutional layers that apply filters to detect local features, pooling layers to reduce spatial dimensions, and fully connected layers for classification.\n\n**Key Components:**\n- **Convolutional Layers**: Apply learnable filters to detect features\n- **Pooling Layers**: Reduce spatial dimensions while preserving important information\n- **Activation Functions**: Introduce non-linearity (typically ReLU)\n- **Fully Connected Layers**: Perform final classification or regression\n\n**Applications:**\n- Image classification and recognition\n- Object detection and segmentation\n- Medical image analysis\n- Computer vision tasks\n\n**Advantages:**\n- Translation invariance through weight sharing\n- Hierarchical feature learning\n- Reduced number of parameters compared to fully connected networks\n- Effective for spatial data processing`,\n          confidence: 0.92,\n          sources: ['Deep Learning textbook', 'Computer Vision research papers'],\n          generatedAt: new Date().toISOString(),\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomizationOptions: Story = {\n  args: {\n    initialTerm: 'Gradient Descent',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    initialTerm: 'Invalid Term',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 429,\n        response: { error: 'Rate limit exceeded. Please try again in a few minutes.' },\n      },\n    ],\n  },\n};\n\nexport const WithCategory: Story = {\n  args: {\n    initialTerm: 'Random Forest',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ReinforcementLearning: Story = {\n  args: {\n    initialTerm: 'Reinforcement Learning',\n    initialCategory: 'Artificial Intelligence',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    initialTerm: 'Natural Language Processing',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    initialTerm: 'Computer Vision',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.stories.tsx"},"span":[4063,4066],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionGenerator } from './AIDefinitionGenerator';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionGenerator> = {\n  title: 'AI/AIDefinitionGenerator',\n  component: AIDefinitionGenerator,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for generating comprehensive definitions and explanations of technical terms.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    initialTerm: '',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const WithPrefilledTerm: Story = {\n  args: {\n    initialTerm: 'Transformer Architecture',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const GeneratingState: Story = {\n  args: {\n    initialTerm: 'Attention Mechanism',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: { generating: true },\n        delay: 3000,\n      },\n    ],\n  },\n};\n\nexport const SuccessfulGeneration: Story = {\n  args: {\n    initialTerm: 'Convolutional Neural Network',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          definition: `A Convolutional Neural Network (CNN) is a deep learning architecture specifically designed for processing grid-like data such as images. CNNs use convolutional layers that apply filters to detect local features, pooling layers to reduce spatial dimensions, and fully connected layers for classification.\n\n**Key Components:**\n- **Convolutional Layers**: Apply learnable filters to detect features\n- **Pooling Layers**: Reduce spatial dimensions while preserving important information\n- **Activation Functions**: Introduce non-linearity (typically ReLU)\n- **Fully Connected Layers**: Perform final classification or regression\n\n**Applications:**\n- Image classification and recognition\n- Object detection and segmentation\n- Medical image analysis\n- Computer vision tasks\n\n**Advantages:**\n- Translation invariance through weight sharing\n- Hierarchical feature learning\n- Reduced number of parameters compared to fully connected networks\n- Effective for spatial data processing`,\n          confidence: 0.92,\n          sources: ['Deep Learning textbook', 'Computer Vision research papers'],\n          generatedAt: new Date().toISOString(),\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomizationOptions: Story = {\n  args: {\n    initialTerm: 'Gradient Descent',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    initialTerm: 'Invalid Term',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 429,\n        response: { error: 'Rate limit exceeded. Please try again in a few minutes.' },\n      },\n    ],\n  },\n};\n\nexport const WithCategory: Story = {\n  args: {\n    initialTerm: 'Random Forest',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ReinforcementLearning: Story = {\n  args: {\n    initialTerm: 'Reinforcement Learning',\n    initialCategory: 'Artificial Intelligence',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    initialTerm: 'Natural Language Processing',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    initialTerm: 'Computer Vision',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.stories.tsx"},"span":[3433,3436],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionGenerator } from './AIDefinitionGenerator';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionGenerator> = {\n  title: 'AI/AIDefinitionGenerator',\n  component: AIDefinitionGenerator,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for generating comprehensive definitions and explanations of technical terms.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    initialTerm: '',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const WithPrefilledTerm: Story = {\n  args: {\n    initialTerm: 'Transformer Architecture',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const GeneratingState: Story = {\n  args: {\n    initialTerm: 'Attention Mechanism',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: { generating: true },\n        delay: 3000,\n      },\n    ],\n  },\n};\n\nexport const SuccessfulGeneration: Story = {\n  args: {\n    initialTerm: 'Convolutional Neural Network',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          definition: `A Convolutional Neural Network (CNN) is a deep learning architecture specifically designed for processing grid-like data such as images. CNNs use convolutional layers that apply filters to detect local features, pooling layers to reduce spatial dimensions, and fully connected layers for classification.\n\n**Key Components:**\n- **Convolutional Layers**: Apply learnable filters to detect features\n- **Pooling Layers**: Reduce spatial dimensions while preserving important information\n- **Activation Functions**: Introduce non-linearity (typically ReLU)\n- **Fully Connected Layers**: Perform final classification or regression\n\n**Applications:**\n- Image classification and recognition\n- Object detection and segmentation\n- Medical image analysis\n- Computer vision tasks\n\n**Advantages:**\n- Translation invariance through weight sharing\n- Hierarchical feature learning\n- Reduced number of parameters compared to fully connected networks\n- Effective for spatial data processing`,\n          confidence: 0.92,\n          sources: ['Deep Learning textbook', 'Computer Vision research papers'],\n          generatedAt: new Date().toISOString(),\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomizationOptions: Story = {\n  args: {\n    initialTerm: 'Gradient Descent',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    initialTerm: 'Invalid Term',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 429,\n        response: { error: 'Rate limit exceeded. Please try again in a few minutes.' },\n      },\n    ],\n  },\n};\n\nexport const WithCategory: Story = {\n  args: {\n    initialTerm: 'Random Forest',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ReinforcementLearning: Story = {\n  args: {\n    initialTerm: 'Reinforcement Learning',\n    initialCategory: 'Artificial Intelligence',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    initialTerm: 'Natural Language Processing',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    initialTerm: 'Computer Vision',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.stories.tsx"},"span":[4306,4309],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionGenerator } from './AIDefinitionGenerator';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionGenerator> = {\n  title: 'AI/AIDefinitionGenerator',\n  component: AIDefinitionGenerator,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for generating comprehensive definitions and explanations of technical terms.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    initialTerm: '',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const WithPrefilledTerm: Story = {\n  args: {\n    initialTerm: 'Transformer Architecture',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const GeneratingState: Story = {\n  args: {\n    initialTerm: 'Attention Mechanism',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: { generating: true },\n        delay: 3000,\n      },\n    ],\n  },\n};\n\nexport const SuccessfulGeneration: Story = {\n  args: {\n    initialTerm: 'Convolutional Neural Network',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          definition: `A Convolutional Neural Network (CNN) is a deep learning architecture specifically designed for processing grid-like data such as images. CNNs use convolutional layers that apply filters to detect local features, pooling layers to reduce spatial dimensions, and fully connected layers for classification.\n\n**Key Components:**\n- **Convolutional Layers**: Apply learnable filters to detect features\n- **Pooling Layers**: Reduce spatial dimensions while preserving important information\n- **Activation Functions**: Introduce non-linearity (typically ReLU)\n- **Fully Connected Layers**: Perform final classification or regression\n\n**Applications:**\n- Image classification and recognition\n- Object detection and segmentation\n- Medical image analysis\n- Computer vision tasks\n\n**Advantages:**\n- Translation invariance through weight sharing\n- Hierarchical feature learning\n- Reduced number of parameters compared to fully connected networks\n- Effective for spatial data processing`,\n          confidence: 0.92,\n          sources: ['Deep Learning textbook', 'Computer Vision research papers'],\n          generatedAt: new Date().toISOString(),\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomizationOptions: Story = {\n  args: {\n    initialTerm: 'Gradient Descent',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    initialTerm: 'Invalid Term',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 429,\n        response: { error: 'Rate limit exceeded. Please try again in a few minutes.' },\n      },\n    ],\n  },\n};\n\nexport const WithCategory: Story = {\n  args: {\n    initialTerm: 'Random Forest',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ReinforcementLearning: Story = {\n  args: {\n    initialTerm: 'Reinforcement Learning',\n    initialCategory: 'Artificial Intelligence',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    initialTerm: 'Natural Language Processing',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    initialTerm: 'Computer Vision',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.stories.tsx"},"span":[1265,1268],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionGenerator } from './AIDefinitionGenerator';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionGenerator> = {\n  title: 'AI/AIDefinitionGenerator',\n  component: AIDefinitionGenerator,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for generating comprehensive definitions and explanations of technical terms.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    initialTerm: '',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const WithPrefilledTerm: Story = {\n  args: {\n    initialTerm: 'Transformer Architecture',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const GeneratingState: Story = {\n  args: {\n    initialTerm: 'Attention Mechanism',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: { generating: true },\n        delay: 3000,\n      },\n    ],\n  },\n};\n\nexport const SuccessfulGeneration: Story = {\n  args: {\n    initialTerm: 'Convolutional Neural Network',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          definition: `A Convolutional Neural Network (CNN) is a deep learning architecture specifically designed for processing grid-like data such as images. CNNs use convolutional layers that apply filters to detect local features, pooling layers to reduce spatial dimensions, and fully connected layers for classification.\n\n**Key Components:**\n- **Convolutional Layers**: Apply learnable filters to detect features\n- **Pooling Layers**: Reduce spatial dimensions while preserving important information\n- **Activation Functions**: Introduce non-linearity (typically ReLU)\n- **Fully Connected Layers**: Perform final classification or regression\n\n**Applications:**\n- Image classification and recognition\n- Object detection and segmentation\n- Medical image analysis\n- Computer vision tasks\n\n**Advantages:**\n- Translation invariance through weight sharing\n- Hierarchical feature learning\n- Reduced number of parameters compared to fully connected networks\n- Effective for spatial data processing`,\n          confidence: 0.92,\n          sources: ['Deep Learning textbook', 'Computer Vision research papers'],\n          generatedAt: new Date().toISOString(),\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomizationOptions: Story = {\n  args: {\n    initialTerm: 'Gradient Descent',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    initialTerm: 'Invalid Term',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 429,\n        response: { error: 'Rate limit exceeded. Please try again in a few minutes.' },\n      },\n    ],\n  },\n};\n\nexport const WithCategory: Story = {\n  args: {\n    initialTerm: 'Random Forest',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ReinforcementLearning: Story = {\n  args: {\n    initialTerm: 'Reinforcement Learning',\n    initialCategory: 'Artificial Intelligence',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    initialTerm: 'Natural Language Processing',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    initialTerm: 'Computer Vision',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.stories.tsx"},"span":[4493,4496],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionGenerator } from './AIDefinitionGenerator';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionGenerator> = {\n  title: 'AI/AIDefinitionGenerator',\n  component: AIDefinitionGenerator,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for generating comprehensive definitions and explanations of technical terms.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    initialTerm: '',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const WithPrefilledTerm: Story = {\n  args: {\n    initialTerm: 'Transformer Architecture',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const GeneratingState: Story = {\n  args: {\n    initialTerm: 'Attention Mechanism',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: { generating: true },\n        delay: 3000,\n      },\n    ],\n  },\n};\n\nexport const SuccessfulGeneration: Story = {\n  args: {\n    initialTerm: 'Convolutional Neural Network',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          definition: `A Convolutional Neural Network (CNN) is a deep learning architecture specifically designed for processing grid-like data such as images. CNNs use convolutional layers that apply filters to detect local features, pooling layers to reduce spatial dimensions, and fully connected layers for classification.\n\n**Key Components:**\n- **Convolutional Layers**: Apply learnable filters to detect features\n- **Pooling Layers**: Reduce spatial dimensions while preserving important information\n- **Activation Functions**: Introduce non-linearity (typically ReLU)\n- **Fully Connected Layers**: Perform final classification or regression\n\n**Applications:**\n- Image classification and recognition\n- Object detection and segmentation\n- Medical image analysis\n- Computer vision tasks\n\n**Advantages:**\n- Translation invariance through weight sharing\n- Hierarchical feature learning\n- Reduced number of parameters compared to fully connected networks\n- Effective for spatial data processing`,\n          confidence: 0.92,\n          sources: ['Deep Learning textbook', 'Computer Vision research papers'],\n          generatedAt: new Date().toISOString(),\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomizationOptions: Story = {\n  args: {\n    initialTerm: 'Gradient Descent',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    initialTerm: 'Invalid Term',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 429,\n        response: { error: 'Rate limit exceeded. Please try again in a few minutes.' },\n      },\n    ],\n  },\n};\n\nexport const WithCategory: Story = {\n  args: {\n    initialTerm: 'Random Forest',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ReinforcementLearning: Story = {\n  args: {\n    initialTerm: 'Reinforcement Learning',\n    initialCategory: 'Artificial Intelligence',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    initialTerm: 'Natural Language Processing',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    initialTerm: 'Computer Vision',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.stories.tsx"},"span":[4735,4738],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionGenerator } from './AIDefinitionGenerator';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionGenerator> = {\n  title: 'AI/AIDefinitionGenerator',\n  component: AIDefinitionGenerator,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for generating comprehensive definitions and explanations of technical terms.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    initialTerm: '',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const WithPrefilledTerm: Story = {\n  args: {\n    initialTerm: 'Transformer Architecture',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const GeneratingState: Story = {\n  args: {\n    initialTerm: 'Attention Mechanism',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: { generating: true },\n        delay: 3000,\n      },\n    ],\n  },\n};\n\nexport const SuccessfulGeneration: Story = {\n  args: {\n    initialTerm: 'Convolutional Neural Network',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          definition: `A Convolutional Neural Network (CNN) is a deep learning architecture specifically designed for processing grid-like data such as images. CNNs use convolutional layers that apply filters to detect local features, pooling layers to reduce spatial dimensions, and fully connected layers for classification.\n\n**Key Components:**\n- **Convolutional Layers**: Apply learnable filters to detect features\n- **Pooling Layers**: Reduce spatial dimensions while preserving important information\n- **Activation Functions**: Introduce non-linearity (typically ReLU)\n- **Fully Connected Layers**: Perform final classification or regression\n\n**Applications:**\n- Image classification and recognition\n- Object detection and segmentation\n- Medical image analysis\n- Computer vision tasks\n\n**Advantages:**\n- Translation invariance through weight sharing\n- Hierarchical feature learning\n- Reduced number of parameters compared to fully connected networks\n- Effective for spatial data processing`,\n          confidence: 0.92,\n          sources: ['Deep Learning textbook', 'Computer Vision research papers'],\n          generatedAt: new Date().toISOString(),\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomizationOptions: Story = {\n  args: {\n    initialTerm: 'Gradient Descent',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    initialTerm: 'Invalid Term',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 429,\n        response: { error: 'Rate limit exceeded. Please try again in a few minutes.' },\n      },\n    ],\n  },\n};\n\nexport const WithCategory: Story = {\n  args: {\n    initialTerm: 'Random Forest',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ReinforcementLearning: Story = {\n  args: {\n    initialTerm: 'Reinforcement Learning',\n    initialCategory: 'Artificial Intelligence',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    initialTerm: 'Natural Language Processing',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    initialTerm: 'Computer Vision',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.stories.tsx"},"span":[1072,1075],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionGenerator } from './AIDefinitionGenerator';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionGenerator> = {\n  title: 'AI/AIDefinitionGenerator',\n  component: AIDefinitionGenerator,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for generating comprehensive definitions and explanations of technical terms.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    initialTerm: '',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const WithPrefilledTerm: Story = {\n  args: {\n    initialTerm: 'Transformer Architecture',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const GeneratingState: Story = {\n  args: {\n    initialTerm: 'Attention Mechanism',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: { generating: true },\n        delay: 3000,\n      },\n    ],\n  },\n};\n\nexport const SuccessfulGeneration: Story = {\n  args: {\n    initialTerm: 'Convolutional Neural Network',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          definition: `A Convolutional Neural Network (CNN) is a deep learning architecture specifically designed for processing grid-like data such as images. CNNs use convolutional layers that apply filters to detect local features, pooling layers to reduce spatial dimensions, and fully connected layers for classification.\n\n**Key Components:**\n- **Convolutional Layers**: Apply learnable filters to detect features\n- **Pooling Layers**: Reduce spatial dimensions while preserving important information\n- **Activation Functions**: Introduce non-linearity (typically ReLU)\n- **Fully Connected Layers**: Perform final classification or regression\n\n**Applications:**\n- Image classification and recognition\n- Object detection and segmentation\n- Medical image analysis\n- Computer vision tasks\n\n**Advantages:**\n- Translation invariance through weight sharing\n- Hierarchical feature learning\n- Reduced number of parameters compared to fully connected networks\n- Effective for spatial data processing`,\n          confidence: 0.92,\n          sources: ['Deep Learning textbook', 'Computer Vision research papers'],\n          generatedAt: new Date().toISOString(),\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomizationOptions: Story = {\n  args: {\n    initialTerm: 'Gradient Descent',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    initialTerm: 'Invalid Term',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/generate-definition',\n        method: 'POST',\n        status: 429,\n        response: { error: 'Rate limit exceeded. Please try again in a few minutes.' },\n      },\n    ],\n  },\n};\n\nexport const WithCategory: Story = {\n  args: {\n    initialTerm: 'Random Forest',\n    initialCategory: 'Machine Learning',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const ReinforcementLearning: Story = {\n  args: {\n    initialTerm: 'Reinforcement Learning',\n    initialCategory: 'Artificial Intelligence',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    initialTerm: 'Natural Language Processing',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    initialTerm: 'Computer Vision',\n    onDefinitionGenerated: (definition: any) => console.log('Generated:', definition),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/style/noNonNullAssertion","severity":"warning","description":"Forbidden non-null assertion.","message":[{"elements":[],"content":"Forbidden non-null assertion."}],"advices":{"advices":[]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.tsx"},"span":[10542,10578],"sourceCode":"import { useQuery } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { Check, Copy, Loader2, Sparkles } from '@/components/ui/icons';\nimport { useToast } from '../hooks/use-toast';\nimport { useLiveRegion } from './accessibility/LiveRegion';\nimport { Badge } from './ui/badge';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Input } from './ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Textarea } from './ui/textarea';\n\ninterface AIDefinitionGeneratorProps {\n  onDefinitionGenerated?: (definition: any) => void;\n  initialTerm?: string;\n  initialCategory?: string;\n}\n\ninterface AIDefinitionResponse {\n  shortDefinition: string;\n  definition: string;\n  characteristics?: string[];\n  applications?: {\n    name: string;\n    description: string;\n  }[];\n  relatedTerms?: string[];\n  mathFormulation?: string;\n}\n\nexport function AIDefinitionGenerator({\n  onDefinitionGenerated,\n  initialTerm = '',\n  initialCategory = '',\n}: AIDefinitionGeneratorProps) {\n  const [term, setTerm] = useState(initialTerm);\n  const [category, setCategory] = useState(initialCategory);\n  const [context, setContext] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generatedDefinition, setGeneratedDefinition] = useState<AIDefinitionResponse | null>(null);\n  const [copiedField, setCopiedField] = useState<string | null>(null);\n  const { toast } = useToast();\n  const { announce } = useLiveRegion();\n\n  // Fetch available categories\n  const { data: categories = [] } = useQuery({\n    queryKey: ['categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/categories');\n      if (!response.ok) throw new Error('Failed to fetch categories');\n      return response.json();\n    },\n  });\n\n  const generateDefinition = async () => {\n    if (!term.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please enter a term to define.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n    announce(`Generating AI definition for ${term.trim()}`, 'polite');\n    try {\n      const response = await fetch('/api/ai/generate-definition', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          term: term.trim(),\n          category: category || undefined,\n          context: context.trim() || undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to generate definition');\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        setGeneratedDefinition(result.data);\n        onDefinitionGenerated?.(result.data);\n        announce(`AI definition for ${term.trim()} generated successfully`, 'polite');\n        toast({\n          title: 'Success',\n          description: 'AI definition generated successfully!',\n        });\n      } else {\n        throw new Error(result.error || 'Failed to generate definition');\n      }\n    } catch (error) {\n      console.error('Error generating definition:', error);\n      announce(`Failed to generate definition for ${term.trim()}`, 'assertive');\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to generate definition',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const copyToClipboard = async (text: string, field: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedField(field);\n      setTimeout(() => setCopiedField(null), 2000);\n      toast({\n        title: 'Copied',\n        description: 'Content copied to clipboard',\n      });\n    } catch (_error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to copy to clipboard',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"h-5 w-5 text-blue-500\" />\n            AI Definition Generator\n          </CardTitle>\n          <CardDescription>\n            Generate comprehensive definitions for AI/ML terms using artificial intelligence\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Term</label>\n              <Input\n                placeholder=\"Enter AI/ML term (e.g., Neural Network)\"\n                value={term}\n                onChange={(e) => setTerm(e.target.value)}\n                disabled={isGenerating}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Category (Optional)</label>\n              <Select\n                value={category || 'none'}\n                onValueChange={(value) => setCategory(value === 'none' ? '' : value)}\n                disabled={isGenerating}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No specific category</SelectItem>\n                  {categories.map((cat: any) => (\n                    <SelectItem key={cat.id} value={cat.name}>\n                      {cat.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Context (Optional)</label>\n            <Textarea\n              placeholder=\"Provide additional context or specific focus for the definition...\"\n              value={context}\n              onChange={(e) => setContext(e.target.value)}\n              disabled={isGenerating}\n              rows={3}\n            />\n          </div>\n\n          <Button\n            onClick={generateDefinition}\n            disabled={isGenerating || !term.trim()}\n            className=\"w-full\"\n          >\n            {isGenerating ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Generating Definition...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"mr-2 h-4 w-4\" />\n                Generate AI Definition\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {generatedDefinition && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Generated Definition</CardTitle>\n            <CardDescription>AI-generated comprehensive definition for \"{term}\"</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Short Definition */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium\">Short Definition</label>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(generatedDefinition.shortDefinition, 'short')}\n                >\n                  {copiedField === 'short' ? (\n                    <Check className=\"h-4 w-4\" />\n                  ) : (\n                    <Copy className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              <div className=\"p-3 bg-gray-50 rounded-md\">\n                <p className=\"text-sm\">{generatedDefinition.shortDefinition}</p>\n              </div>\n            </div>\n\n            {/* Detailed Definition */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium\">Detailed Definition</label>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(generatedDefinition.definition, 'detailed')}\n                >\n                  {copiedField === 'detailed' ? (\n                    <Check className=\"h-4 w-4\" />\n                  ) : (\n                    <Copy className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              <div className=\"p-3 bg-gray-50 rounded-md\">\n                <p className=\"text-sm\">{generatedDefinition.definition}</p>\n              </div>\n            </div>\n\n            {/* Characteristics */}\n            {generatedDefinition.characteristics &&\n              generatedDefinition.characteristics.length > 0 && (\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Key Characteristics</label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {generatedDefinition.characteristics.map((char, index) => (\n                      <Badge key={index} variant=\"secondary\">\n                        {char}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n            {/* Applications */}\n            {generatedDefinition.applications && generatedDefinition.applications.length > 0 && (\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Applications</label>\n                <div className=\"space-y-2\">\n                  {generatedDefinition.applications.map((app, index) => (\n                    <div key={index} className=\"p-3 bg-blue-50 rounded-md\">\n                      <h4 className=\"font-medium text-sm\">{app.name}</h4>\n                      <p className=\"text-sm text-gray-600\">{app.description}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Mathematical Formulation */}\n            {generatedDefinition.mathFormulation && (\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-sm font-medium\">Mathematical Formulation</label>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(generatedDefinition.mathFormulation!, 'math')}\n                  >\n                    {copiedField === 'math' ? (\n                      <Check className=\"h-4 w-4\" />\n                    ) : (\n                      <Copy className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                <div className=\"p-3 bg-yellow-50 rounded-md\">\n                  <code className=\"text-sm\">{generatedDefinition.mathFormulation}</code>\n                </div>\n              </div>\n            )}\n\n            {/* Related Terms */}\n            {generatedDefinition.relatedTerms && generatedDefinition.relatedTerms.length > 0 && (\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Related Terms</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {generatedDefinition.relatedTerms.map((relatedTerm, index) => (\n                    <Badge key={index} variant=\"outline\">\n                      {relatedTerm}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.tsx"},"span":[674,677],"sourceCode":"import { useQuery } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { Check, Copy, Loader2, Sparkles } from '@/components/ui/icons';\nimport { useToast } from '../hooks/use-toast';\nimport { useLiveRegion } from './accessibility/LiveRegion';\nimport { Badge } from './ui/badge';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Input } from './ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Textarea } from './ui/textarea';\n\ninterface AIDefinitionGeneratorProps {\n  onDefinitionGenerated?: (definition: any) => void;\n  initialTerm?: string;\n  initialCategory?: string;\n}\n\ninterface AIDefinitionResponse {\n  shortDefinition: string;\n  definition: string;\n  characteristics?: string[];\n  applications?: {\n    name: string;\n    description: string;\n  }[];\n  relatedTerms?: string[];\n  mathFormulation?: string;\n}\n\nexport function AIDefinitionGenerator({\n  onDefinitionGenerated,\n  initialTerm = '',\n  initialCategory = '',\n}: AIDefinitionGeneratorProps) {\n  const [term, setTerm] = useState(initialTerm);\n  const [category, setCategory] = useState(initialCategory);\n  const [context, setContext] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generatedDefinition, setGeneratedDefinition] = useState<AIDefinitionResponse | null>(null);\n  const [copiedField, setCopiedField] = useState<string | null>(null);\n  const { toast } = useToast();\n  const { announce } = useLiveRegion();\n\n  // Fetch available categories\n  const { data: categories = [] } = useQuery({\n    queryKey: ['categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/categories');\n      if (!response.ok) throw new Error('Failed to fetch categories');\n      return response.json();\n    },\n  });\n\n  const generateDefinition = async () => {\n    if (!term.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please enter a term to define.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n    announce(`Generating AI definition for ${term.trim()}`, 'polite');\n    try {\n      const response = await fetch('/api/ai/generate-definition', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          term: term.trim(),\n          category: category || undefined,\n          context: context.trim() || undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to generate definition');\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        setGeneratedDefinition(result.data);\n        onDefinitionGenerated?.(result.data);\n        announce(`AI definition for ${term.trim()} generated successfully`, 'polite');\n        toast({\n          title: 'Success',\n          description: 'AI definition generated successfully!',\n        });\n      } else {\n        throw new Error(result.error || 'Failed to generate definition');\n      }\n    } catch (error) {\n      console.error('Error generating definition:', error);\n      announce(`Failed to generate definition for ${term.trim()}`, 'assertive');\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to generate definition',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const copyToClipboard = async (text: string, field: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedField(field);\n      setTimeout(() => setCopiedField(null), 2000);\n      toast({\n        title: 'Copied',\n        description: 'Content copied to clipboard',\n      });\n    } catch (_error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to copy to clipboard',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"h-5 w-5 text-blue-500\" />\n            AI Definition Generator\n          </CardTitle>\n          <CardDescription>\n            Generate comprehensive definitions for AI/ML terms using artificial intelligence\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Term</label>\n              <Input\n                placeholder=\"Enter AI/ML term (e.g., Neural Network)\"\n                value={term}\n                onChange={(e) => setTerm(e.target.value)}\n                disabled={isGenerating}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Category (Optional)</label>\n              <Select\n                value={category || 'none'}\n                onValueChange={(value) => setCategory(value === 'none' ? '' : value)}\n                disabled={isGenerating}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No specific category</SelectItem>\n                  {categories.map((cat: any) => (\n                    <SelectItem key={cat.id} value={cat.name}>\n                      {cat.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Context (Optional)</label>\n            <Textarea\n              placeholder=\"Provide additional context or specific focus for the definition...\"\n              value={context}\n              onChange={(e) => setContext(e.target.value)}\n              disabled={isGenerating}\n              rows={3}\n            />\n          </div>\n\n          <Button\n            onClick={generateDefinition}\n            disabled={isGenerating || !term.trim()}\n            className=\"w-full\"\n          >\n            {isGenerating ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Generating Definition...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"mr-2 h-4 w-4\" />\n                Generate AI Definition\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {generatedDefinition && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Generated Definition</CardTitle>\n            <CardDescription>AI-generated comprehensive definition for \"{term}\"</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Short Definition */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium\">Short Definition</label>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(generatedDefinition.shortDefinition, 'short')}\n                >\n                  {copiedField === 'short' ? (\n                    <Check className=\"h-4 w-4\" />\n                  ) : (\n                    <Copy className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              <div className=\"p-3 bg-gray-50 rounded-md\">\n                <p className=\"text-sm\">{generatedDefinition.shortDefinition}</p>\n              </div>\n            </div>\n\n            {/* Detailed Definition */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium\">Detailed Definition</label>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(generatedDefinition.definition, 'detailed')}\n                >\n                  {copiedField === 'detailed' ? (\n                    <Check className=\"h-4 w-4\" />\n                  ) : (\n                    <Copy className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              <div className=\"p-3 bg-gray-50 rounded-md\">\n                <p className=\"text-sm\">{generatedDefinition.definition}</p>\n              </div>\n            </div>\n\n            {/* Characteristics */}\n            {generatedDefinition.characteristics &&\n              generatedDefinition.characteristics.length > 0 && (\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Key Characteristics</label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {generatedDefinition.characteristics.map((char, index) => (\n                      <Badge key={index} variant=\"secondary\">\n                        {char}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n            {/* Applications */}\n            {generatedDefinition.applications && generatedDefinition.applications.length > 0 && (\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Applications</label>\n                <div className=\"space-y-2\">\n                  {generatedDefinition.applications.map((app, index) => (\n                    <div key={index} className=\"p-3 bg-blue-50 rounded-md\">\n                      <h4 className=\"font-medium text-sm\">{app.name}</h4>\n                      <p className=\"text-sm text-gray-600\">{app.description}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Mathematical Formulation */}\n            {generatedDefinition.mathFormulation && (\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-sm font-medium\">Mathematical Formulation</label>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(generatedDefinition.mathFormulation!, 'math')}\n                  >\n                    {copiedField === 'math' ? (\n                      <Check className=\"h-4 w-4\" />\n                    ) : (\n                      <Copy className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                <div className=\"p-3 bg-yellow-50 rounded-md\">\n                  <code className=\"text-sm\">{generatedDefinition.mathFormulation}</code>\n                </div>\n              </div>\n            )}\n\n            {/* Related Terms */}\n            {generatedDefinition.relatedTerms && generatedDefinition.relatedTerms.length > 0 && (\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Related Terms</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {generatedDefinition.relatedTerms.map((relatedTerm, index) => (\n                    <Badge key={index} variant=\"outline\">\n                      {relatedTerm}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionGenerator.tsx"},"span":[5564,5567],"sourceCode":"import { useQuery } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { Check, Copy, Loader2, Sparkles } from '@/components/ui/icons';\nimport { useToast } from '../hooks/use-toast';\nimport { useLiveRegion } from './accessibility/LiveRegion';\nimport { Badge } from './ui/badge';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Input } from './ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Textarea } from './ui/textarea';\n\ninterface AIDefinitionGeneratorProps {\n  onDefinitionGenerated?: (definition: any) => void;\n  initialTerm?: string;\n  initialCategory?: string;\n}\n\ninterface AIDefinitionResponse {\n  shortDefinition: string;\n  definition: string;\n  characteristics?: string[];\n  applications?: {\n    name: string;\n    description: string;\n  }[];\n  relatedTerms?: string[];\n  mathFormulation?: string;\n}\n\nexport function AIDefinitionGenerator({\n  onDefinitionGenerated,\n  initialTerm = '',\n  initialCategory = '',\n}: AIDefinitionGeneratorProps) {\n  const [term, setTerm] = useState(initialTerm);\n  const [category, setCategory] = useState(initialCategory);\n  const [context, setContext] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generatedDefinition, setGeneratedDefinition] = useState<AIDefinitionResponse | null>(null);\n  const [copiedField, setCopiedField] = useState<string | null>(null);\n  const { toast } = useToast();\n  const { announce } = useLiveRegion();\n\n  // Fetch available categories\n  const { data: categories = [] } = useQuery({\n    queryKey: ['categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/categories');\n      if (!response.ok) throw new Error('Failed to fetch categories');\n      return response.json();\n    },\n  });\n\n  const generateDefinition = async () => {\n    if (!term.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please enter a term to define.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n    announce(`Generating AI definition for ${term.trim()}`, 'polite');\n    try {\n      const response = await fetch('/api/ai/generate-definition', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          term: term.trim(),\n          category: category || undefined,\n          context: context.trim() || undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to generate definition');\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        setGeneratedDefinition(result.data);\n        onDefinitionGenerated?.(result.data);\n        announce(`AI definition for ${term.trim()} generated successfully`, 'polite');\n        toast({\n          title: 'Success',\n          description: 'AI definition generated successfully!',\n        });\n      } else {\n        throw new Error(result.error || 'Failed to generate definition');\n      }\n    } catch (error) {\n      console.error('Error generating definition:', error);\n      announce(`Failed to generate definition for ${term.trim()}`, 'assertive');\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to generate definition',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const copyToClipboard = async (text: string, field: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedField(field);\n      setTimeout(() => setCopiedField(null), 2000);\n      toast({\n        title: 'Copied',\n        description: 'Content copied to clipboard',\n      });\n    } catch (_error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to copy to clipboard',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"h-5 w-5 text-blue-500\" />\n            AI Definition Generator\n          </CardTitle>\n          <CardDescription>\n            Generate comprehensive definitions for AI/ML terms using artificial intelligence\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Term</label>\n              <Input\n                placeholder=\"Enter AI/ML term (e.g., Neural Network)\"\n                value={term}\n                onChange={(e) => setTerm(e.target.value)}\n                disabled={isGenerating}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Category (Optional)</label>\n              <Select\n                value={category || 'none'}\n                onValueChange={(value) => setCategory(value === 'none' ? '' : value)}\n                disabled={isGenerating}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No specific category</SelectItem>\n                  {categories.map((cat: any) => (\n                    <SelectItem key={cat.id} value={cat.name}>\n                      {cat.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Context (Optional)</label>\n            <Textarea\n              placeholder=\"Provide additional context or specific focus for the definition...\"\n              value={context}\n              onChange={(e) => setContext(e.target.value)}\n              disabled={isGenerating}\n              rows={3}\n            />\n          </div>\n\n          <Button\n            onClick={generateDefinition}\n            disabled={isGenerating || !term.trim()}\n            className=\"w-full\"\n          >\n            {isGenerating ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Generating Definition...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"mr-2 h-4 w-4\" />\n                Generate AI Definition\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {generatedDefinition && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Generated Definition</CardTitle>\n            <CardDescription>AI-generated comprehensive definition for \"{term}\"</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Short Definition */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium\">Short Definition</label>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(generatedDefinition.shortDefinition, 'short')}\n                >\n                  {copiedField === 'short' ? (\n                    <Check className=\"h-4 w-4\" />\n                  ) : (\n                    <Copy className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              <div className=\"p-3 bg-gray-50 rounded-md\">\n                <p className=\"text-sm\">{generatedDefinition.shortDefinition}</p>\n              </div>\n            </div>\n\n            {/* Detailed Definition */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium\">Detailed Definition</label>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(generatedDefinition.definition, 'detailed')}\n                >\n                  {copiedField === 'detailed' ? (\n                    <Check className=\"h-4 w-4\" />\n                  ) : (\n                    <Copy className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              <div className=\"p-3 bg-gray-50 rounded-md\">\n                <p className=\"text-sm\">{generatedDefinition.definition}</p>\n              </div>\n            </div>\n\n            {/* Characteristics */}\n            {generatedDefinition.characteristics &&\n              generatedDefinition.characteristics.length > 0 && (\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Key Characteristics</label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {generatedDefinition.characteristics.map((char, index) => (\n                      <Badge key={index} variant=\"secondary\">\n                        {char}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n            {/* Applications */}\n            {generatedDefinition.applications && generatedDefinition.applications.length > 0 && (\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Applications</label>\n                <div className=\"space-y-2\">\n                  {generatedDefinition.applications.map((app, index) => (\n                    <div key={index} className=\"p-3 bg-blue-50 rounded-md\">\n                      <h4 className=\"font-medium text-sm\">{app.name}</h4>\n                      <p className=\"text-sm text-gray-600\">{app.description}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Mathematical Formulation */}\n            {generatedDefinition.mathFormulation && (\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-sm font-medium\">Mathematical Formulation</label>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(generatedDefinition.mathFormulation!, 'math')}\n                  >\n                    {copiedField === 'math' ? (\n                      <Check className=\"h-4 w-4\" />\n                    ) : (\n                      <Copy className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                <div className=\"p-3 bg-yellow-50 rounded-md\">\n                  <code className=\"text-sm\">{generatedDefinition.mathFormulation}</code>\n                </div>\n              </div>\n            )}\n\n            {/* Related Terms */}\n            {generatedDefinition.relatedTerms && generatedDefinition.relatedTerms.length > 0 && (\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Related Terms</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {generatedDefinition.relatedTerms.map((relatedTerm, index) => (\n                    <Badge key={index} variant=\"outline\">\n                      {relatedTerm}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionImprover.stories.tsx"},"span":[4108,4111],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionImprover } from './AIDefinitionImprover';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionImprover> = {\n  title: 'AI/AIDefinitionImprover',\n  component: AIDefinitionImprover,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for improving existing definitions with enhanced clarity, examples, and technical accuracy.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst sampleDefinition = `Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed.`;\n\nconst improvedDefinition = `Machine learning is a subset of artificial intelligence (AI) that enables computer systems to automatically learn, adapt, and improve their performance on a specific task through experience, without being explicitly programmed for every scenario.\n\n**Core Concept:**\nMachine learning algorithms build mathematical models based on training data to make predictions or decisions on new, unseen data. The system identifies patterns and relationships in data to generalize and apply this knowledge to future instances.\n\n**Key Characteristics:**\n- **Automated Learning**: Systems improve performance through exposure to data\n- **Pattern Recognition**: Identifies complex relationships in large datasets  \n- **Generalization**: Applies learned patterns to new, unseen data\n- **Iterative Improvement**: Performance enhances with more training data\n\n**Common Types:**\n- **Supervised Learning**: Learns from labeled training data (e.g., email spam detection)\n- **Unsupervised Learning**: Finds hidden patterns in unlabeled data (e.g., customer segmentation)\n- **Reinforcement Learning**: Learns through interaction and feedback (e.g., game playing AI)\n\n**Real-World Applications:**\n- Recommendation systems (Netflix, Amazon)\n- Image recognition (medical diagnosis, autonomous vehicles)\n- Natural language processing (chatbots, translation)\n- Fraud detection in financial services\n- Predictive maintenance in manufacturing\n\n**Technical Foundation:**\nMachine learning relies on statistical algorithms, linear algebra, and computational optimization to process data and extract meaningful insights that enable intelligent decision-making.`;\n\nexport const Default: Story = {\n  args: {\n    term: {\n      id: 'ml-1',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 100,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const WithLongDefinition: Story = {\n  args: {\n    term: {\n      id: 'nn-1',\n      name: 'Neural Networks',\n      definition: `Neural networks are computing systems inspired by biological neural networks. They consist of interconnected nodes called neurons that process information. Each neuron receives inputs, processes them using an activation function, and produces an output. Neural networks can learn to recognize patterns and make predictions through training on data.`,\n      category: 'Deep Learning',\n      viewCount: 250,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const ImprovingState: Story = {\n  args: {\n    term: {\n      id: 'ml-improving',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 180,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 86400000), // 1 day ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: { improving: true, progress: 65 },\n        delay: 2000,\n      },\n    ],\n  },\n};\n\nexport const WithImprovements: Story = {\n  args: {\n    term: {\n      id: 'ml-improvements',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 350,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 172800000), // 2 days ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Added more precise technical language and structure',\n              impact: 'high',\n            },\n            {\n              type: 'examples',\n              description: 'Included real-world applications and use cases',\n              impact: 'high',\n            },\n            {\n              type: 'completeness',\n              description: 'Added key characteristics and technical foundation',\n              impact: 'medium',\n            },\n            {\n              type: 'organization',\n              description: 'Structured content with clear sections and bullet points',\n              impact: 'medium',\n            },\n          ],\n          confidenceScore: 0.94,\n          readabilityScore: {\n            original: 12.5,\n            improved: 14.2,\n            grade: 'College Level',\n          },\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomImprovementTypes: Story = {\n  args: {\n    term: {\n      id: 'dl-custom',\n      name: 'Deep Learning',\n      definition: `Deep learning uses neural networks with multiple layers to learn complex patterns in data.`,\n      category: 'Deep Learning',\n      viewCount: 420,\n      isAiGenerated: false,\n      createdAt: new Date(Date.now() - 259200000), // 3 days ago\n      updatedAt: new Date(Date.now() - 86400000), // 1 day ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n};\n\nexport const ComparisonMode: Story = {\n  args: {\n    term: {\n      id: 'ml-comparison',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 290,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 345600000), // 4 days ago\n      updatedAt: new Date(Date.now() - 43200000), // 12 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision and readability',\n              impact: 'high',\n            },\n            {\n              type: 'structure',\n              description: 'Organized content into logical sections',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.92,\n        },\n      },\n    ],\n  },\n};\n\nexport const MultipleVersions: Story = {\n  args: {\n    term: {\n      id: 'ml-versions',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 520,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 432000000), // 5 days ago\n      updatedAt: new Date(Date.now() - 21600000), // 6 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          versions: [\n            {\n              id: 'beginner',\n              title: 'Beginner-Friendly',\n              definition: `Machine learning is like teaching a computer to recognize patterns and make decisions, similar to how humans learn from experience. Instead of programming every possible scenario, we show the computer lots of examples so it can learn to handle new situations on its own.`,\n              targetAudience: 'beginners',\n              readabilityGrade: 6,\n            },\n            {\n              id: 'technical',\n              title: 'Technical/Academic',\n              definition: improvedDefinition,\n              targetAudience: 'professionals',\n              readabilityGrade: 14,\n            },\n            {\n              id: 'business',\n              title: 'Business-Focused',\n              definition: `Machine learning is a technology that enables computers to automatically improve their performance by learning from data, without manual programming. This drives business value through automated insights, predictive analytics, and intelligent decision-making systems that can process vast amounts of information faster and more accurately than human analysts.`,\n              targetAudience: 'business',\n              readabilityGrade: 12,\n            },\n          ],\n          recommendedVersion: 'technical',\n        },\n      },\n    ],\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    term: {\n      id: 'ml-error',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 95,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 518400000), // 6 days ago\n      updatedAt: new Date(Date.now() - 172800000), // 2 days ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 500,\n        response: { error: 'AI improvement service is temporarily unavailable' },\n      },\n    ],\n  },\n};\n\nexport const WithFeedback: Story = {\n  args: {\n    term: {\n      id: 'ml-feedback',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 240,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 604800000), // 7 days ago\n      updatedAt: new Date(Date.now() - 10800000), // 3 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.89,\n        },\n      },\n    ],\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    term: {\n      id: 'ml-dark',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 160,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 691200000), // 8 days ago\n      updatedAt: new Date(Date.now() - 7200000), // 2 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    term: {\n      id: 'ml-mobile',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 210,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 777600000), // 9 days ago\n      updatedAt: new Date(Date.now() - 3600000), // 1 hour ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionImprover.stories.tsx"},"span":[4773,4776],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionImprover } from './AIDefinitionImprover';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionImprover> = {\n  title: 'AI/AIDefinitionImprover',\n  component: AIDefinitionImprover,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for improving existing definitions with enhanced clarity, examples, and technical accuracy.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst sampleDefinition = `Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed.`;\n\nconst improvedDefinition = `Machine learning is a subset of artificial intelligence (AI) that enables computer systems to automatically learn, adapt, and improve their performance on a specific task through experience, without being explicitly programmed for every scenario.\n\n**Core Concept:**\nMachine learning algorithms build mathematical models based on training data to make predictions or decisions on new, unseen data. The system identifies patterns and relationships in data to generalize and apply this knowledge to future instances.\n\n**Key Characteristics:**\n- **Automated Learning**: Systems improve performance through exposure to data\n- **Pattern Recognition**: Identifies complex relationships in large datasets  \n- **Generalization**: Applies learned patterns to new, unseen data\n- **Iterative Improvement**: Performance enhances with more training data\n\n**Common Types:**\n- **Supervised Learning**: Learns from labeled training data (e.g., email spam detection)\n- **Unsupervised Learning**: Finds hidden patterns in unlabeled data (e.g., customer segmentation)\n- **Reinforcement Learning**: Learns through interaction and feedback (e.g., game playing AI)\n\n**Real-World Applications:**\n- Recommendation systems (Netflix, Amazon)\n- Image recognition (medical diagnosis, autonomous vehicles)\n- Natural language processing (chatbots, translation)\n- Fraud detection in financial services\n- Predictive maintenance in manufacturing\n\n**Technical Foundation:**\nMachine learning relies on statistical algorithms, linear algebra, and computational optimization to process data and extract meaningful insights that enable intelligent decision-making.`;\n\nexport const Default: Story = {\n  args: {\n    term: {\n      id: 'ml-1',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 100,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const WithLongDefinition: Story = {\n  args: {\n    term: {\n      id: 'nn-1',\n      name: 'Neural Networks',\n      definition: `Neural networks are computing systems inspired by biological neural networks. They consist of interconnected nodes called neurons that process information. Each neuron receives inputs, processes them using an activation function, and produces an output. Neural networks can learn to recognize patterns and make predictions through training on data.`,\n      category: 'Deep Learning',\n      viewCount: 250,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const ImprovingState: Story = {\n  args: {\n    term: {\n      id: 'ml-improving',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 180,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 86400000), // 1 day ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: { improving: true, progress: 65 },\n        delay: 2000,\n      },\n    ],\n  },\n};\n\nexport const WithImprovements: Story = {\n  args: {\n    term: {\n      id: 'ml-improvements',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 350,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 172800000), // 2 days ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Added more precise technical language and structure',\n              impact: 'high',\n            },\n            {\n              type: 'examples',\n              description: 'Included real-world applications and use cases',\n              impact: 'high',\n            },\n            {\n              type: 'completeness',\n              description: 'Added key characteristics and technical foundation',\n              impact: 'medium',\n            },\n            {\n              type: 'organization',\n              description: 'Structured content with clear sections and bullet points',\n              impact: 'medium',\n            },\n          ],\n          confidenceScore: 0.94,\n          readabilityScore: {\n            original: 12.5,\n            improved: 14.2,\n            grade: 'College Level',\n          },\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomImprovementTypes: Story = {\n  args: {\n    term: {\n      id: 'dl-custom',\n      name: 'Deep Learning',\n      definition: `Deep learning uses neural networks with multiple layers to learn complex patterns in data.`,\n      category: 'Deep Learning',\n      viewCount: 420,\n      isAiGenerated: false,\n      createdAt: new Date(Date.now() - 259200000), // 3 days ago\n      updatedAt: new Date(Date.now() - 86400000), // 1 day ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n};\n\nexport const ComparisonMode: Story = {\n  args: {\n    term: {\n      id: 'ml-comparison',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 290,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 345600000), // 4 days ago\n      updatedAt: new Date(Date.now() - 43200000), // 12 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision and readability',\n              impact: 'high',\n            },\n            {\n              type: 'structure',\n              description: 'Organized content into logical sections',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.92,\n        },\n      },\n    ],\n  },\n};\n\nexport const MultipleVersions: Story = {\n  args: {\n    term: {\n      id: 'ml-versions',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 520,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 432000000), // 5 days ago\n      updatedAt: new Date(Date.now() - 21600000), // 6 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          versions: [\n            {\n              id: 'beginner',\n              title: 'Beginner-Friendly',\n              definition: `Machine learning is like teaching a computer to recognize patterns and make decisions, similar to how humans learn from experience. Instead of programming every possible scenario, we show the computer lots of examples so it can learn to handle new situations on its own.`,\n              targetAudience: 'beginners',\n              readabilityGrade: 6,\n            },\n            {\n              id: 'technical',\n              title: 'Technical/Academic',\n              definition: improvedDefinition,\n              targetAudience: 'professionals',\n              readabilityGrade: 14,\n            },\n            {\n              id: 'business',\n              title: 'Business-Focused',\n              definition: `Machine learning is a technology that enables computers to automatically improve their performance by learning from data, without manual programming. This drives business value through automated insights, predictive analytics, and intelligent decision-making systems that can process vast amounts of information faster and more accurately than human analysts.`,\n              targetAudience: 'business',\n              readabilityGrade: 12,\n            },\n          ],\n          recommendedVersion: 'technical',\n        },\n      },\n    ],\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    term: {\n      id: 'ml-error',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 95,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 518400000), // 6 days ago\n      updatedAt: new Date(Date.now() - 172800000), // 2 days ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 500,\n        response: { error: 'AI improvement service is temporarily unavailable' },\n      },\n    ],\n  },\n};\n\nexport const WithFeedback: Story = {\n  args: {\n    term: {\n      id: 'ml-feedback',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 240,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 604800000), // 7 days ago\n      updatedAt: new Date(Date.now() - 10800000), // 3 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.89,\n        },\n      },\n    ],\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    term: {\n      id: 'ml-dark',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 160,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 691200000), // 8 days ago\n      updatedAt: new Date(Date.now() - 7200000), // 2 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    term: {\n      id: 'ml-mobile',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 210,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 777600000), // 9 days ago\n      updatedAt: new Date(Date.now() - 3600000), // 1 hour ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionImprover.stories.tsx"},"span":[6457,6460],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionImprover } from './AIDefinitionImprover';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionImprover> = {\n  title: 'AI/AIDefinitionImprover',\n  component: AIDefinitionImprover,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for improving existing definitions with enhanced clarity, examples, and technical accuracy.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst sampleDefinition = `Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed.`;\n\nconst improvedDefinition = `Machine learning is a subset of artificial intelligence (AI) that enables computer systems to automatically learn, adapt, and improve their performance on a specific task through experience, without being explicitly programmed for every scenario.\n\n**Core Concept:**\nMachine learning algorithms build mathematical models based on training data to make predictions or decisions on new, unseen data. The system identifies patterns and relationships in data to generalize and apply this knowledge to future instances.\n\n**Key Characteristics:**\n- **Automated Learning**: Systems improve performance through exposure to data\n- **Pattern Recognition**: Identifies complex relationships in large datasets  \n- **Generalization**: Applies learned patterns to new, unseen data\n- **Iterative Improvement**: Performance enhances with more training data\n\n**Common Types:**\n- **Supervised Learning**: Learns from labeled training data (e.g., email spam detection)\n- **Unsupervised Learning**: Finds hidden patterns in unlabeled data (e.g., customer segmentation)\n- **Reinforcement Learning**: Learns through interaction and feedback (e.g., game playing AI)\n\n**Real-World Applications:**\n- Recommendation systems (Netflix, Amazon)\n- Image recognition (medical diagnosis, autonomous vehicles)\n- Natural language processing (chatbots, translation)\n- Fraud detection in financial services\n- Predictive maintenance in manufacturing\n\n**Technical Foundation:**\nMachine learning relies on statistical algorithms, linear algebra, and computational optimization to process data and extract meaningful insights that enable intelligent decision-making.`;\n\nexport const Default: Story = {\n  args: {\n    term: {\n      id: 'ml-1',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 100,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const WithLongDefinition: Story = {\n  args: {\n    term: {\n      id: 'nn-1',\n      name: 'Neural Networks',\n      definition: `Neural networks are computing systems inspired by biological neural networks. They consist of interconnected nodes called neurons that process information. Each neuron receives inputs, processes them using an activation function, and produces an output. Neural networks can learn to recognize patterns and make predictions through training on data.`,\n      category: 'Deep Learning',\n      viewCount: 250,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const ImprovingState: Story = {\n  args: {\n    term: {\n      id: 'ml-improving',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 180,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 86400000), // 1 day ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: { improving: true, progress: 65 },\n        delay: 2000,\n      },\n    ],\n  },\n};\n\nexport const WithImprovements: Story = {\n  args: {\n    term: {\n      id: 'ml-improvements',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 350,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 172800000), // 2 days ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Added more precise technical language and structure',\n              impact: 'high',\n            },\n            {\n              type: 'examples',\n              description: 'Included real-world applications and use cases',\n              impact: 'high',\n            },\n            {\n              type: 'completeness',\n              description: 'Added key characteristics and technical foundation',\n              impact: 'medium',\n            },\n            {\n              type: 'organization',\n              description: 'Structured content with clear sections and bullet points',\n              impact: 'medium',\n            },\n          ],\n          confidenceScore: 0.94,\n          readabilityScore: {\n            original: 12.5,\n            improved: 14.2,\n            grade: 'College Level',\n          },\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomImprovementTypes: Story = {\n  args: {\n    term: {\n      id: 'dl-custom',\n      name: 'Deep Learning',\n      definition: `Deep learning uses neural networks with multiple layers to learn complex patterns in data.`,\n      category: 'Deep Learning',\n      viewCount: 420,\n      isAiGenerated: false,\n      createdAt: new Date(Date.now() - 259200000), // 3 days ago\n      updatedAt: new Date(Date.now() - 86400000), // 1 day ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n};\n\nexport const ComparisonMode: Story = {\n  args: {\n    term: {\n      id: 'ml-comparison',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 290,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 345600000), // 4 days ago\n      updatedAt: new Date(Date.now() - 43200000), // 12 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision and readability',\n              impact: 'high',\n            },\n            {\n              type: 'structure',\n              description: 'Organized content into logical sections',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.92,\n        },\n      },\n    ],\n  },\n};\n\nexport const MultipleVersions: Story = {\n  args: {\n    term: {\n      id: 'ml-versions',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 520,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 432000000), // 5 days ago\n      updatedAt: new Date(Date.now() - 21600000), // 6 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          versions: [\n            {\n              id: 'beginner',\n              title: 'Beginner-Friendly',\n              definition: `Machine learning is like teaching a computer to recognize patterns and make decisions, similar to how humans learn from experience. Instead of programming every possible scenario, we show the computer lots of examples so it can learn to handle new situations on its own.`,\n              targetAudience: 'beginners',\n              readabilityGrade: 6,\n            },\n            {\n              id: 'technical',\n              title: 'Technical/Academic',\n              definition: improvedDefinition,\n              targetAudience: 'professionals',\n              readabilityGrade: 14,\n            },\n            {\n              id: 'business',\n              title: 'Business-Focused',\n              definition: `Machine learning is a technology that enables computers to automatically improve their performance by learning from data, without manual programming. This drives business value through automated insights, predictive analytics, and intelligent decision-making systems that can process vast amounts of information faster and more accurately than human analysts.`,\n              targetAudience: 'business',\n              readabilityGrade: 12,\n            },\n          ],\n          recommendedVersion: 'technical',\n        },\n      },\n    ],\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    term: {\n      id: 'ml-error',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 95,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 518400000), // 6 days ago\n      updatedAt: new Date(Date.now() - 172800000), // 2 days ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 500,\n        response: { error: 'AI improvement service is temporarily unavailable' },\n      },\n    ],\n  },\n};\n\nexport const WithFeedback: Story = {\n  args: {\n    term: {\n      id: 'ml-feedback',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 240,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 604800000), // 7 days ago\n      updatedAt: new Date(Date.now() - 10800000), // 3 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.89,\n        },\n      },\n    ],\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    term: {\n      id: 'ml-dark',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 160,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 691200000), // 8 days ago\n      updatedAt: new Date(Date.now() - 7200000), // 2 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    term: {\n      id: 'ml-mobile',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 210,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 777600000), // 9 days ago\n      updatedAt: new Date(Date.now() - 3600000), // 1 hour ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionImprover.stories.tsx"},"span":[6932,6935],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionImprover } from './AIDefinitionImprover';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionImprover> = {\n  title: 'AI/AIDefinitionImprover',\n  component: AIDefinitionImprover,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for improving existing definitions with enhanced clarity, examples, and technical accuracy.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst sampleDefinition = `Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed.`;\n\nconst improvedDefinition = `Machine learning is a subset of artificial intelligence (AI) that enables computer systems to automatically learn, adapt, and improve their performance on a specific task through experience, without being explicitly programmed for every scenario.\n\n**Core Concept:**\nMachine learning algorithms build mathematical models based on training data to make predictions or decisions on new, unseen data. The system identifies patterns and relationships in data to generalize and apply this knowledge to future instances.\n\n**Key Characteristics:**\n- **Automated Learning**: Systems improve performance through exposure to data\n- **Pattern Recognition**: Identifies complex relationships in large datasets  \n- **Generalization**: Applies learned patterns to new, unseen data\n- **Iterative Improvement**: Performance enhances with more training data\n\n**Common Types:**\n- **Supervised Learning**: Learns from labeled training data (e.g., email spam detection)\n- **Unsupervised Learning**: Finds hidden patterns in unlabeled data (e.g., customer segmentation)\n- **Reinforcement Learning**: Learns through interaction and feedback (e.g., game playing AI)\n\n**Real-World Applications:**\n- Recommendation systems (Netflix, Amazon)\n- Image recognition (medical diagnosis, autonomous vehicles)\n- Natural language processing (chatbots, translation)\n- Fraud detection in financial services\n- Predictive maintenance in manufacturing\n\n**Technical Foundation:**\nMachine learning relies on statistical algorithms, linear algebra, and computational optimization to process data and extract meaningful insights that enable intelligent decision-making.`;\n\nexport const Default: Story = {\n  args: {\n    term: {\n      id: 'ml-1',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 100,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const WithLongDefinition: Story = {\n  args: {\n    term: {\n      id: 'nn-1',\n      name: 'Neural Networks',\n      definition: `Neural networks are computing systems inspired by biological neural networks. They consist of interconnected nodes called neurons that process information. Each neuron receives inputs, processes them using an activation function, and produces an output. Neural networks can learn to recognize patterns and make predictions through training on data.`,\n      category: 'Deep Learning',\n      viewCount: 250,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const ImprovingState: Story = {\n  args: {\n    term: {\n      id: 'ml-improving',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 180,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 86400000), // 1 day ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: { improving: true, progress: 65 },\n        delay: 2000,\n      },\n    ],\n  },\n};\n\nexport const WithImprovements: Story = {\n  args: {\n    term: {\n      id: 'ml-improvements',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 350,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 172800000), // 2 days ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Added more precise technical language and structure',\n              impact: 'high',\n            },\n            {\n              type: 'examples',\n              description: 'Included real-world applications and use cases',\n              impact: 'high',\n            },\n            {\n              type: 'completeness',\n              description: 'Added key characteristics and technical foundation',\n              impact: 'medium',\n            },\n            {\n              type: 'organization',\n              description: 'Structured content with clear sections and bullet points',\n              impact: 'medium',\n            },\n          ],\n          confidenceScore: 0.94,\n          readabilityScore: {\n            original: 12.5,\n            improved: 14.2,\n            grade: 'College Level',\n          },\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomImprovementTypes: Story = {\n  args: {\n    term: {\n      id: 'dl-custom',\n      name: 'Deep Learning',\n      definition: `Deep learning uses neural networks with multiple layers to learn complex patterns in data.`,\n      category: 'Deep Learning',\n      viewCount: 420,\n      isAiGenerated: false,\n      createdAt: new Date(Date.now() - 259200000), // 3 days ago\n      updatedAt: new Date(Date.now() - 86400000), // 1 day ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n};\n\nexport const ComparisonMode: Story = {\n  args: {\n    term: {\n      id: 'ml-comparison',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 290,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 345600000), // 4 days ago\n      updatedAt: new Date(Date.now() - 43200000), // 12 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision and readability',\n              impact: 'high',\n            },\n            {\n              type: 'structure',\n              description: 'Organized content into logical sections',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.92,\n        },\n      },\n    ],\n  },\n};\n\nexport const MultipleVersions: Story = {\n  args: {\n    term: {\n      id: 'ml-versions',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 520,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 432000000), // 5 days ago\n      updatedAt: new Date(Date.now() - 21600000), // 6 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          versions: [\n            {\n              id: 'beginner',\n              title: 'Beginner-Friendly',\n              definition: `Machine learning is like teaching a computer to recognize patterns and make decisions, similar to how humans learn from experience. Instead of programming every possible scenario, we show the computer lots of examples so it can learn to handle new situations on its own.`,\n              targetAudience: 'beginners',\n              readabilityGrade: 6,\n            },\n            {\n              id: 'technical',\n              title: 'Technical/Academic',\n              definition: improvedDefinition,\n              targetAudience: 'professionals',\n              readabilityGrade: 14,\n            },\n            {\n              id: 'business',\n              title: 'Business-Focused',\n              definition: `Machine learning is a technology that enables computers to automatically improve their performance by learning from data, without manual programming. This drives business value through automated insights, predictive analytics, and intelligent decision-making systems that can process vast amounts of information faster and more accurately than human analysts.`,\n              targetAudience: 'business',\n              readabilityGrade: 12,\n            },\n          ],\n          recommendedVersion: 'technical',\n        },\n      },\n    ],\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    term: {\n      id: 'ml-error',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 95,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 518400000), // 6 days ago\n      updatedAt: new Date(Date.now() - 172800000), // 2 days ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 500,\n        response: { error: 'AI improvement service is temporarily unavailable' },\n      },\n    ],\n  },\n};\n\nexport const WithFeedback: Story = {\n  args: {\n    term: {\n      id: 'ml-feedback',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 240,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 604800000), // 7 days ago\n      updatedAt: new Date(Date.now() - 10800000), // 3 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.89,\n        },\n      },\n    ],\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    term: {\n      id: 'ml-dark',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 160,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 691200000), // 8 days ago\n      updatedAt: new Date(Date.now() - 7200000), // 2 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    term: {\n      id: 'ml-mobile',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 210,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 777600000), // 9 days ago\n      updatedAt: new Date(Date.now() - 3600000), // 1 hour ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionImprover.stories.tsx"},"span":[8015,8018],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionImprover } from './AIDefinitionImprover';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionImprover> = {\n  title: 'AI/AIDefinitionImprover',\n  component: AIDefinitionImprover,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for improving existing definitions with enhanced clarity, examples, and technical accuracy.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst sampleDefinition = `Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed.`;\n\nconst improvedDefinition = `Machine learning is a subset of artificial intelligence (AI) that enables computer systems to automatically learn, adapt, and improve their performance on a specific task through experience, without being explicitly programmed for every scenario.\n\n**Core Concept:**\nMachine learning algorithms build mathematical models based on training data to make predictions or decisions on new, unseen data. The system identifies patterns and relationships in data to generalize and apply this knowledge to future instances.\n\n**Key Characteristics:**\n- **Automated Learning**: Systems improve performance through exposure to data\n- **Pattern Recognition**: Identifies complex relationships in large datasets  \n- **Generalization**: Applies learned patterns to new, unseen data\n- **Iterative Improvement**: Performance enhances with more training data\n\n**Common Types:**\n- **Supervised Learning**: Learns from labeled training data (e.g., email spam detection)\n- **Unsupervised Learning**: Finds hidden patterns in unlabeled data (e.g., customer segmentation)\n- **Reinforcement Learning**: Learns through interaction and feedback (e.g., game playing AI)\n\n**Real-World Applications:**\n- Recommendation systems (Netflix, Amazon)\n- Image recognition (medical diagnosis, autonomous vehicles)\n- Natural language processing (chatbots, translation)\n- Fraud detection in financial services\n- Predictive maintenance in manufacturing\n\n**Technical Foundation:**\nMachine learning relies on statistical algorithms, linear algebra, and computational optimization to process data and extract meaningful insights that enable intelligent decision-making.`;\n\nexport const Default: Story = {\n  args: {\n    term: {\n      id: 'ml-1',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 100,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const WithLongDefinition: Story = {\n  args: {\n    term: {\n      id: 'nn-1',\n      name: 'Neural Networks',\n      definition: `Neural networks are computing systems inspired by biological neural networks. They consist of interconnected nodes called neurons that process information. Each neuron receives inputs, processes them using an activation function, and produces an output. Neural networks can learn to recognize patterns and make predictions through training on data.`,\n      category: 'Deep Learning',\n      viewCount: 250,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const ImprovingState: Story = {\n  args: {\n    term: {\n      id: 'ml-improving',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 180,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 86400000), // 1 day ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: { improving: true, progress: 65 },\n        delay: 2000,\n      },\n    ],\n  },\n};\n\nexport const WithImprovements: Story = {\n  args: {\n    term: {\n      id: 'ml-improvements',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 350,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 172800000), // 2 days ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Added more precise technical language and structure',\n              impact: 'high',\n            },\n            {\n              type: 'examples',\n              description: 'Included real-world applications and use cases',\n              impact: 'high',\n            },\n            {\n              type: 'completeness',\n              description: 'Added key characteristics and technical foundation',\n              impact: 'medium',\n            },\n            {\n              type: 'organization',\n              description: 'Structured content with clear sections and bullet points',\n              impact: 'medium',\n            },\n          ],\n          confidenceScore: 0.94,\n          readabilityScore: {\n            original: 12.5,\n            improved: 14.2,\n            grade: 'College Level',\n          },\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomImprovementTypes: Story = {\n  args: {\n    term: {\n      id: 'dl-custom',\n      name: 'Deep Learning',\n      definition: `Deep learning uses neural networks with multiple layers to learn complex patterns in data.`,\n      category: 'Deep Learning',\n      viewCount: 420,\n      isAiGenerated: false,\n      createdAt: new Date(Date.now() - 259200000), // 3 days ago\n      updatedAt: new Date(Date.now() - 86400000), // 1 day ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n};\n\nexport const ComparisonMode: Story = {\n  args: {\n    term: {\n      id: 'ml-comparison',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 290,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 345600000), // 4 days ago\n      updatedAt: new Date(Date.now() - 43200000), // 12 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision and readability',\n              impact: 'high',\n            },\n            {\n              type: 'structure',\n              description: 'Organized content into logical sections',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.92,\n        },\n      },\n    ],\n  },\n};\n\nexport const MultipleVersions: Story = {\n  args: {\n    term: {\n      id: 'ml-versions',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 520,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 432000000), // 5 days ago\n      updatedAt: new Date(Date.now() - 21600000), // 6 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          versions: [\n            {\n              id: 'beginner',\n              title: 'Beginner-Friendly',\n              definition: `Machine learning is like teaching a computer to recognize patterns and make decisions, similar to how humans learn from experience. Instead of programming every possible scenario, we show the computer lots of examples so it can learn to handle new situations on its own.`,\n              targetAudience: 'beginners',\n              readabilityGrade: 6,\n            },\n            {\n              id: 'technical',\n              title: 'Technical/Academic',\n              definition: improvedDefinition,\n              targetAudience: 'professionals',\n              readabilityGrade: 14,\n            },\n            {\n              id: 'business',\n              title: 'Business-Focused',\n              definition: `Machine learning is a technology that enables computers to automatically improve their performance by learning from data, without manual programming. This drives business value through automated insights, predictive analytics, and intelligent decision-making systems that can process vast amounts of information faster and more accurately than human analysts.`,\n              targetAudience: 'business',\n              readabilityGrade: 12,\n            },\n          ],\n          recommendedVersion: 'technical',\n        },\n      },\n    ],\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    term: {\n      id: 'ml-error',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 95,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 518400000), // 6 days ago\n      updatedAt: new Date(Date.now() - 172800000), // 2 days ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 500,\n        response: { error: 'AI improvement service is temporarily unavailable' },\n      },\n    ],\n  },\n};\n\nexport const WithFeedback: Story = {\n  args: {\n    term: {\n      id: 'ml-feedback',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 240,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 604800000), // 7 days ago\n      updatedAt: new Date(Date.now() - 10800000), // 3 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.89,\n        },\n      },\n    ],\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    term: {\n      id: 'ml-dark',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 160,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 691200000), // 8 days ago\n      updatedAt: new Date(Date.now() - 7200000), // 2 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    term: {\n      id: 'ml-mobile',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 210,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 777600000), // 9 days ago\n      updatedAt: new Date(Date.now() - 3600000), // 1 hour ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionImprover.stories.tsx"},"span":[10015,10018],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionImprover } from './AIDefinitionImprover';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionImprover> = {\n  title: 'AI/AIDefinitionImprover',\n  component: AIDefinitionImprover,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for improving existing definitions with enhanced clarity, examples, and technical accuracy.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst sampleDefinition = `Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed.`;\n\nconst improvedDefinition = `Machine learning is a subset of artificial intelligence (AI) that enables computer systems to automatically learn, adapt, and improve their performance on a specific task through experience, without being explicitly programmed for every scenario.\n\n**Core Concept:**\nMachine learning algorithms build mathematical models based on training data to make predictions or decisions on new, unseen data. The system identifies patterns and relationships in data to generalize and apply this knowledge to future instances.\n\n**Key Characteristics:**\n- **Automated Learning**: Systems improve performance through exposure to data\n- **Pattern Recognition**: Identifies complex relationships in large datasets  \n- **Generalization**: Applies learned patterns to new, unseen data\n- **Iterative Improvement**: Performance enhances with more training data\n\n**Common Types:**\n- **Supervised Learning**: Learns from labeled training data (e.g., email spam detection)\n- **Unsupervised Learning**: Finds hidden patterns in unlabeled data (e.g., customer segmentation)\n- **Reinforcement Learning**: Learns through interaction and feedback (e.g., game playing AI)\n\n**Real-World Applications:**\n- Recommendation systems (Netflix, Amazon)\n- Image recognition (medical diagnosis, autonomous vehicles)\n- Natural language processing (chatbots, translation)\n- Fraud detection in financial services\n- Predictive maintenance in manufacturing\n\n**Technical Foundation:**\nMachine learning relies on statistical algorithms, linear algebra, and computational optimization to process data and extract meaningful insights that enable intelligent decision-making.`;\n\nexport const Default: Story = {\n  args: {\n    term: {\n      id: 'ml-1',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 100,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const WithLongDefinition: Story = {\n  args: {\n    term: {\n      id: 'nn-1',\n      name: 'Neural Networks',\n      definition: `Neural networks are computing systems inspired by biological neural networks. They consist of interconnected nodes called neurons that process information. Each neuron receives inputs, processes them using an activation function, and produces an output. Neural networks can learn to recognize patterns and make predictions through training on data.`,\n      category: 'Deep Learning',\n      viewCount: 250,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const ImprovingState: Story = {\n  args: {\n    term: {\n      id: 'ml-improving',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 180,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 86400000), // 1 day ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: { improving: true, progress: 65 },\n        delay: 2000,\n      },\n    ],\n  },\n};\n\nexport const WithImprovements: Story = {\n  args: {\n    term: {\n      id: 'ml-improvements',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 350,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 172800000), // 2 days ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Added more precise technical language and structure',\n              impact: 'high',\n            },\n            {\n              type: 'examples',\n              description: 'Included real-world applications and use cases',\n              impact: 'high',\n            },\n            {\n              type: 'completeness',\n              description: 'Added key characteristics and technical foundation',\n              impact: 'medium',\n            },\n            {\n              type: 'organization',\n              description: 'Structured content with clear sections and bullet points',\n              impact: 'medium',\n            },\n          ],\n          confidenceScore: 0.94,\n          readabilityScore: {\n            original: 12.5,\n            improved: 14.2,\n            grade: 'College Level',\n          },\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomImprovementTypes: Story = {\n  args: {\n    term: {\n      id: 'dl-custom',\n      name: 'Deep Learning',\n      definition: `Deep learning uses neural networks with multiple layers to learn complex patterns in data.`,\n      category: 'Deep Learning',\n      viewCount: 420,\n      isAiGenerated: false,\n      createdAt: new Date(Date.now() - 259200000), // 3 days ago\n      updatedAt: new Date(Date.now() - 86400000), // 1 day ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n};\n\nexport const ComparisonMode: Story = {\n  args: {\n    term: {\n      id: 'ml-comparison',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 290,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 345600000), // 4 days ago\n      updatedAt: new Date(Date.now() - 43200000), // 12 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision and readability',\n              impact: 'high',\n            },\n            {\n              type: 'structure',\n              description: 'Organized content into logical sections',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.92,\n        },\n      },\n    ],\n  },\n};\n\nexport const MultipleVersions: Story = {\n  args: {\n    term: {\n      id: 'ml-versions',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 520,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 432000000), // 5 days ago\n      updatedAt: new Date(Date.now() - 21600000), // 6 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          versions: [\n            {\n              id: 'beginner',\n              title: 'Beginner-Friendly',\n              definition: `Machine learning is like teaching a computer to recognize patterns and make decisions, similar to how humans learn from experience. Instead of programming every possible scenario, we show the computer lots of examples so it can learn to handle new situations on its own.`,\n              targetAudience: 'beginners',\n              readabilityGrade: 6,\n            },\n            {\n              id: 'technical',\n              title: 'Technical/Academic',\n              definition: improvedDefinition,\n              targetAudience: 'professionals',\n              readabilityGrade: 14,\n            },\n            {\n              id: 'business',\n              title: 'Business-Focused',\n              definition: `Machine learning is a technology that enables computers to automatically improve their performance by learning from data, without manual programming. This drives business value through automated insights, predictive analytics, and intelligent decision-making systems that can process vast amounts of information faster and more accurately than human analysts.`,\n              targetAudience: 'business',\n              readabilityGrade: 12,\n            },\n          ],\n          recommendedVersion: 'technical',\n        },\n      },\n    ],\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    term: {\n      id: 'ml-error',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 95,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 518400000), // 6 days ago\n      updatedAt: new Date(Date.now() - 172800000), // 2 days ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 500,\n        response: { error: 'AI improvement service is temporarily unavailable' },\n      },\n    ],\n  },\n};\n\nexport const WithFeedback: Story = {\n  args: {\n    term: {\n      id: 'ml-feedback',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 240,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 604800000), // 7 days ago\n      updatedAt: new Date(Date.now() - 10800000), // 3 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.89,\n        },\n      },\n    ],\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    term: {\n      id: 'ml-dark',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 160,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 691200000), // 8 days ago\n      updatedAt: new Date(Date.now() - 7200000), // 2 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    term: {\n      id: 'ml-mobile',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 210,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 777600000), // 9 days ago\n      updatedAt: new Date(Date.now() - 3600000), // 1 hour ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionImprover.stories.tsx"},"span":[10716,10719],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionImprover } from './AIDefinitionImprover';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionImprover> = {\n  title: 'AI/AIDefinitionImprover',\n  component: AIDefinitionImprover,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for improving existing definitions with enhanced clarity, examples, and technical accuracy.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst sampleDefinition = `Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed.`;\n\nconst improvedDefinition = `Machine learning is a subset of artificial intelligence (AI) that enables computer systems to automatically learn, adapt, and improve their performance on a specific task through experience, without being explicitly programmed for every scenario.\n\n**Core Concept:**\nMachine learning algorithms build mathematical models based on training data to make predictions or decisions on new, unseen data. The system identifies patterns and relationships in data to generalize and apply this knowledge to future instances.\n\n**Key Characteristics:**\n- **Automated Learning**: Systems improve performance through exposure to data\n- **Pattern Recognition**: Identifies complex relationships in large datasets  \n- **Generalization**: Applies learned patterns to new, unseen data\n- **Iterative Improvement**: Performance enhances with more training data\n\n**Common Types:**\n- **Supervised Learning**: Learns from labeled training data (e.g., email spam detection)\n- **Unsupervised Learning**: Finds hidden patterns in unlabeled data (e.g., customer segmentation)\n- **Reinforcement Learning**: Learns through interaction and feedback (e.g., game playing AI)\n\n**Real-World Applications:**\n- Recommendation systems (Netflix, Amazon)\n- Image recognition (medical diagnosis, autonomous vehicles)\n- Natural language processing (chatbots, translation)\n- Fraud detection in financial services\n- Predictive maintenance in manufacturing\n\n**Technical Foundation:**\nMachine learning relies on statistical algorithms, linear algebra, and computational optimization to process data and extract meaningful insights that enable intelligent decision-making.`;\n\nexport const Default: Story = {\n  args: {\n    term: {\n      id: 'ml-1',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 100,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const WithLongDefinition: Story = {\n  args: {\n    term: {\n      id: 'nn-1',\n      name: 'Neural Networks',\n      definition: `Neural networks are computing systems inspired by biological neural networks. They consist of interconnected nodes called neurons that process information. Each neuron receives inputs, processes them using an activation function, and produces an output. Neural networks can learn to recognize patterns and make predictions through training on data.`,\n      category: 'Deep Learning',\n      viewCount: 250,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const ImprovingState: Story = {\n  args: {\n    term: {\n      id: 'ml-improving',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 180,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 86400000), // 1 day ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: { improving: true, progress: 65 },\n        delay: 2000,\n      },\n    ],\n  },\n};\n\nexport const WithImprovements: Story = {\n  args: {\n    term: {\n      id: 'ml-improvements',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 350,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 172800000), // 2 days ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Added more precise technical language and structure',\n              impact: 'high',\n            },\n            {\n              type: 'examples',\n              description: 'Included real-world applications and use cases',\n              impact: 'high',\n            },\n            {\n              type: 'completeness',\n              description: 'Added key characteristics and technical foundation',\n              impact: 'medium',\n            },\n            {\n              type: 'organization',\n              description: 'Structured content with clear sections and bullet points',\n              impact: 'medium',\n            },\n          ],\n          confidenceScore: 0.94,\n          readabilityScore: {\n            original: 12.5,\n            improved: 14.2,\n            grade: 'College Level',\n          },\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomImprovementTypes: Story = {\n  args: {\n    term: {\n      id: 'dl-custom',\n      name: 'Deep Learning',\n      definition: `Deep learning uses neural networks with multiple layers to learn complex patterns in data.`,\n      category: 'Deep Learning',\n      viewCount: 420,\n      isAiGenerated: false,\n      createdAt: new Date(Date.now() - 259200000), // 3 days ago\n      updatedAt: new Date(Date.now() - 86400000), // 1 day ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n};\n\nexport const ComparisonMode: Story = {\n  args: {\n    term: {\n      id: 'ml-comparison',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 290,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 345600000), // 4 days ago\n      updatedAt: new Date(Date.now() - 43200000), // 12 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision and readability',\n              impact: 'high',\n            },\n            {\n              type: 'structure',\n              description: 'Organized content into logical sections',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.92,\n        },\n      },\n    ],\n  },\n};\n\nexport const MultipleVersions: Story = {\n  args: {\n    term: {\n      id: 'ml-versions',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 520,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 432000000), // 5 days ago\n      updatedAt: new Date(Date.now() - 21600000), // 6 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          versions: [\n            {\n              id: 'beginner',\n              title: 'Beginner-Friendly',\n              definition: `Machine learning is like teaching a computer to recognize patterns and make decisions, similar to how humans learn from experience. Instead of programming every possible scenario, we show the computer lots of examples so it can learn to handle new situations on its own.`,\n              targetAudience: 'beginners',\n              readabilityGrade: 6,\n            },\n            {\n              id: 'technical',\n              title: 'Technical/Academic',\n              definition: improvedDefinition,\n              targetAudience: 'professionals',\n              readabilityGrade: 14,\n            },\n            {\n              id: 'business',\n              title: 'Business-Focused',\n              definition: `Machine learning is a technology that enables computers to automatically improve their performance by learning from data, without manual programming. This drives business value through automated insights, predictive analytics, and intelligent decision-making systems that can process vast amounts of information faster and more accurately than human analysts.`,\n              targetAudience: 'business',\n              readabilityGrade: 12,\n            },\n          ],\n          recommendedVersion: 'technical',\n        },\n      },\n    ],\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    term: {\n      id: 'ml-error',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 95,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 518400000), // 6 days ago\n      updatedAt: new Date(Date.now() - 172800000), // 2 days ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 500,\n        response: { error: 'AI improvement service is temporarily unavailable' },\n      },\n    ],\n  },\n};\n\nexport const WithFeedback: Story = {\n  args: {\n    term: {\n      id: 'ml-feedback',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 240,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 604800000), // 7 days ago\n      updatedAt: new Date(Date.now() - 10800000), // 3 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.89,\n        },\n      },\n    ],\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    term: {\n      id: 'ml-dark',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 160,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 691200000), // 8 days ago\n      updatedAt: new Date(Date.now() - 7200000), // 2 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    term: {\n      id: 'ml-mobile',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 210,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 777600000), // 9 days ago\n      updatedAt: new Date(Date.now() - 3600000), // 1 hour ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionImprover.stories.tsx"},"span":[11608,11611],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionImprover } from './AIDefinitionImprover';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionImprover> = {\n  title: 'AI/AIDefinitionImprover',\n  component: AIDefinitionImprover,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for improving existing definitions with enhanced clarity, examples, and technical accuracy.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst sampleDefinition = `Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed.`;\n\nconst improvedDefinition = `Machine learning is a subset of artificial intelligence (AI) that enables computer systems to automatically learn, adapt, and improve their performance on a specific task through experience, without being explicitly programmed for every scenario.\n\n**Core Concept:**\nMachine learning algorithms build mathematical models based on training data to make predictions or decisions on new, unseen data. The system identifies patterns and relationships in data to generalize and apply this knowledge to future instances.\n\n**Key Characteristics:**\n- **Automated Learning**: Systems improve performance through exposure to data\n- **Pattern Recognition**: Identifies complex relationships in large datasets  \n- **Generalization**: Applies learned patterns to new, unseen data\n- **Iterative Improvement**: Performance enhances with more training data\n\n**Common Types:**\n- **Supervised Learning**: Learns from labeled training data (e.g., email spam detection)\n- **Unsupervised Learning**: Finds hidden patterns in unlabeled data (e.g., customer segmentation)\n- **Reinforcement Learning**: Learns through interaction and feedback (e.g., game playing AI)\n\n**Real-World Applications:**\n- Recommendation systems (Netflix, Amazon)\n- Image recognition (medical diagnosis, autonomous vehicles)\n- Natural language processing (chatbots, translation)\n- Fraud detection in financial services\n- Predictive maintenance in manufacturing\n\n**Technical Foundation:**\nMachine learning relies on statistical algorithms, linear algebra, and computational optimization to process data and extract meaningful insights that enable intelligent decision-making.`;\n\nexport const Default: Story = {\n  args: {\n    term: {\n      id: 'ml-1',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 100,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const WithLongDefinition: Story = {\n  args: {\n    term: {\n      id: 'nn-1',\n      name: 'Neural Networks',\n      definition: `Neural networks are computing systems inspired by biological neural networks. They consist of interconnected nodes called neurons that process information. Each neuron receives inputs, processes them using an activation function, and produces an output. Neural networks can learn to recognize patterns and make predictions through training on data.`,\n      category: 'Deep Learning',\n      viewCount: 250,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const ImprovingState: Story = {\n  args: {\n    term: {\n      id: 'ml-improving',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 180,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 86400000), // 1 day ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: { improving: true, progress: 65 },\n        delay: 2000,\n      },\n    ],\n  },\n};\n\nexport const WithImprovements: Story = {\n  args: {\n    term: {\n      id: 'ml-improvements',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 350,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 172800000), // 2 days ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Added more precise technical language and structure',\n              impact: 'high',\n            },\n            {\n              type: 'examples',\n              description: 'Included real-world applications and use cases',\n              impact: 'high',\n            },\n            {\n              type: 'completeness',\n              description: 'Added key characteristics and technical foundation',\n              impact: 'medium',\n            },\n            {\n              type: 'organization',\n              description: 'Structured content with clear sections and bullet points',\n              impact: 'medium',\n            },\n          ],\n          confidenceScore: 0.94,\n          readabilityScore: {\n            original: 12.5,\n            improved: 14.2,\n            grade: 'College Level',\n          },\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomImprovementTypes: Story = {\n  args: {\n    term: {\n      id: 'dl-custom',\n      name: 'Deep Learning',\n      definition: `Deep learning uses neural networks with multiple layers to learn complex patterns in data.`,\n      category: 'Deep Learning',\n      viewCount: 420,\n      isAiGenerated: false,\n      createdAt: new Date(Date.now() - 259200000), // 3 days ago\n      updatedAt: new Date(Date.now() - 86400000), // 1 day ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n};\n\nexport const ComparisonMode: Story = {\n  args: {\n    term: {\n      id: 'ml-comparison',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 290,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 345600000), // 4 days ago\n      updatedAt: new Date(Date.now() - 43200000), // 12 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision and readability',\n              impact: 'high',\n            },\n            {\n              type: 'structure',\n              description: 'Organized content into logical sections',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.92,\n        },\n      },\n    ],\n  },\n};\n\nexport const MultipleVersions: Story = {\n  args: {\n    term: {\n      id: 'ml-versions',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 520,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 432000000), // 5 days ago\n      updatedAt: new Date(Date.now() - 21600000), // 6 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          versions: [\n            {\n              id: 'beginner',\n              title: 'Beginner-Friendly',\n              definition: `Machine learning is like teaching a computer to recognize patterns and make decisions, similar to how humans learn from experience. Instead of programming every possible scenario, we show the computer lots of examples so it can learn to handle new situations on its own.`,\n              targetAudience: 'beginners',\n              readabilityGrade: 6,\n            },\n            {\n              id: 'technical',\n              title: 'Technical/Academic',\n              definition: improvedDefinition,\n              targetAudience: 'professionals',\n              readabilityGrade: 14,\n            },\n            {\n              id: 'business',\n              title: 'Business-Focused',\n              definition: `Machine learning is a technology that enables computers to automatically improve their performance by learning from data, without manual programming. This drives business value through automated insights, predictive analytics, and intelligent decision-making systems that can process vast amounts of information faster and more accurately than human analysts.`,\n              targetAudience: 'business',\n              readabilityGrade: 12,\n            },\n          ],\n          recommendedVersion: 'technical',\n        },\n      },\n    ],\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    term: {\n      id: 'ml-error',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 95,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 518400000), // 6 days ago\n      updatedAt: new Date(Date.now() - 172800000), // 2 days ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 500,\n        response: { error: 'AI improvement service is temporarily unavailable' },\n      },\n    ],\n  },\n};\n\nexport const WithFeedback: Story = {\n  args: {\n    term: {\n      id: 'ml-feedback',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 240,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 604800000), // 7 days ago\n      updatedAt: new Date(Date.now() - 10800000), // 3 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.89,\n        },\n      },\n    ],\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    term: {\n      id: 'ml-dark',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 160,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 691200000), // 8 days ago\n      updatedAt: new Date(Date.now() - 7200000), // 2 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    term: {\n      id: 'ml-mobile',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 210,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 777600000), // 9 days ago\n      updatedAt: new Date(Date.now() - 3600000), // 1 hour ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIDefinitionImprover.stories.tsx"},"span":[12137,12140],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AIDefinitionImprover } from './AIDefinitionImprover';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst meta: Meta<typeof AIDefinitionImprover> = {\n  title: 'AI/AIDefinitionImprover',\n  component: AIDefinitionImprover,\n  decorators: [\n    (Story) => (\n      <QueryClientProvider client={queryClient}>\n        <div className=\"max-w-4xl mx-auto p-4\">\n          <Story />\n        </div>\n      </QueryClientProvider>\n    ),\n  ],\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'AI-powered component for improving existing definitions with enhanced clarity, examples, and technical accuracy.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst sampleDefinition = `Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed.`;\n\nconst improvedDefinition = `Machine learning is a subset of artificial intelligence (AI) that enables computer systems to automatically learn, adapt, and improve their performance on a specific task through experience, without being explicitly programmed for every scenario.\n\n**Core Concept:**\nMachine learning algorithms build mathematical models based on training data to make predictions or decisions on new, unseen data. The system identifies patterns and relationships in data to generalize and apply this knowledge to future instances.\n\n**Key Characteristics:**\n- **Automated Learning**: Systems improve performance through exposure to data\n- **Pattern Recognition**: Identifies complex relationships in large datasets  \n- **Generalization**: Applies learned patterns to new, unseen data\n- **Iterative Improvement**: Performance enhances with more training data\n\n**Common Types:**\n- **Supervised Learning**: Learns from labeled training data (e.g., email spam detection)\n- **Unsupervised Learning**: Finds hidden patterns in unlabeled data (e.g., customer segmentation)\n- **Reinforcement Learning**: Learns through interaction and feedback (e.g., game playing AI)\n\n**Real-World Applications:**\n- Recommendation systems (Netflix, Amazon)\n- Image recognition (medical diagnosis, autonomous vehicles)\n- Natural language processing (chatbots, translation)\n- Fraud detection in financial services\n- Predictive maintenance in manufacturing\n\n**Technical Foundation:**\nMachine learning relies on statistical algorithms, linear algebra, and computational optimization to process data and extract meaningful insights that enable intelligent decision-making.`;\n\nexport const Default: Story = {\n  args: {\n    term: {\n      id: 'ml-1',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 100,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const WithLongDefinition: Story = {\n  args: {\n    term: {\n      id: 'nn-1',\n      name: 'Neural Networks',\n      definition: `Neural networks are computing systems inspired by biological neural networks. They consist of interconnected nodes called neurons that process information. Each neuron receives inputs, processes them using an activation function, and produces an output. Neural networks can learn to recognize patterns and make predictions through training on data.`,\n      category: 'Deep Learning',\n      viewCount: 250,\n      isAiGenerated: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  },\n};\n\nexport const ImprovingState: Story = {\n  args: {\n    term: {\n      id: 'ml-improving',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 180,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 86400000), // 1 day ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: { improving: true, progress: 65 },\n        delay: 2000,\n      },\n    ],\n  },\n};\n\nexport const WithImprovements: Story = {\n  args: {\n    term: {\n      id: 'ml-improvements',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 350,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 172800000), // 2 days ago\n      updatedAt: new Date(),\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Added more precise technical language and structure',\n              impact: 'high',\n            },\n            {\n              type: 'examples',\n              description: 'Included real-world applications and use cases',\n              impact: 'high',\n            },\n            {\n              type: 'completeness',\n              description: 'Added key characteristics and technical foundation',\n              impact: 'medium',\n            },\n            {\n              type: 'organization',\n              description: 'Structured content with clear sections and bullet points',\n              impact: 'medium',\n            },\n          ],\n          confidenceScore: 0.94,\n          readabilityScore: {\n            original: 12.5,\n            improved: 14.2,\n            grade: 'College Level',\n          },\n        },\n      },\n    ],\n  },\n};\n\nexport const WithCustomImprovementTypes: Story = {\n  args: {\n    term: {\n      id: 'dl-custom',\n      name: 'Deep Learning',\n      definition: `Deep learning uses neural networks with multiple layers to learn complex patterns in data.`,\n      category: 'Deep Learning',\n      viewCount: 420,\n      isAiGenerated: false,\n      createdAt: new Date(Date.now() - 259200000), // 3 days ago\n      updatedAt: new Date(Date.now() - 86400000), // 1 day ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n};\n\nexport const ComparisonMode: Story = {\n  args: {\n    term: {\n      id: 'ml-comparison',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 290,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 345600000), // 4 days ago\n      updatedAt: new Date(Date.now() - 43200000), // 12 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision and readability',\n              impact: 'high',\n            },\n            {\n              type: 'structure',\n              description: 'Organized content into logical sections',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.92,\n        },\n      },\n    ],\n  },\n};\n\nexport const MultipleVersions: Story = {\n  args: {\n    term: {\n      id: 'ml-versions',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 520,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 432000000), // 5 days ago\n      updatedAt: new Date(Date.now() - 21600000), // 6 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          versions: [\n            {\n              id: 'beginner',\n              title: 'Beginner-Friendly',\n              definition: `Machine learning is like teaching a computer to recognize patterns and make decisions, similar to how humans learn from experience. Instead of programming every possible scenario, we show the computer lots of examples so it can learn to handle new situations on its own.`,\n              targetAudience: 'beginners',\n              readabilityGrade: 6,\n            },\n            {\n              id: 'technical',\n              title: 'Technical/Academic',\n              definition: improvedDefinition,\n              targetAudience: 'professionals',\n              readabilityGrade: 14,\n            },\n            {\n              id: 'business',\n              title: 'Business-Focused',\n              definition: `Machine learning is a technology that enables computers to automatically improve their performance by learning from data, without manual programming. This drives business value through automated insights, predictive analytics, and intelligent decision-making systems that can process vast amounts of information faster and more accurately than human analysts.`,\n              targetAudience: 'business',\n              readabilityGrade: 12,\n            },\n          ],\n          recommendedVersion: 'technical',\n        },\n      },\n    ],\n  },\n};\n\nexport const ErrorState: Story = {\n  args: {\n    term: {\n      id: 'ml-error',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 95,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 518400000), // 6 days ago\n      updatedAt: new Date(Date.now() - 172800000), // 2 days ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 500,\n        response: { error: 'AI improvement service is temporarily unavailable' },\n      },\n    ],\n  },\n};\n\nexport const WithFeedback: Story = {\n  args: {\n    term: {\n      id: 'ml-feedback',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 240,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 604800000), // 7 days ago\n      updatedAt: new Date(Date.now() - 10800000), // 3 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    mockData: [\n      {\n        url: '/api/ai/improve-definition',\n        method: 'POST',\n        status: 200,\n        response: {\n          improvedDefinition,\n          improvements: [\n            {\n              type: 'clarity',\n              description: 'Enhanced technical precision',\n              impact: 'high',\n            },\n          ],\n          confidenceScore: 0.89,\n        },\n      },\n    ],\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    term: {\n      id: 'ml-dark',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 160,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 691200000), // 8 days ago\n      updatedAt: new Date(Date.now() - 7200000), // 2 hours ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const MobileView: Story = {\n  args: {\n    term: {\n      id: 'ml-mobile',\n      name: 'Machine Learning',\n      definition: sampleDefinition,\n      category: 'AI',\n      viewCount: 210,\n      isAiGenerated: true,\n      createdAt: new Date(Date.now() - 777600000), // 9 days ago\n      updatedAt: new Date(Date.now() - 3600000), // 1 hour ago\n    },\n    onImprovementApplied: (improvedTerm: any) => console.log('Accepted improvement:', improvedTerm),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIFeedbackDashboard.tsx"},"span":[5797,5800],"sourceCode":"import { Activity, AlertTriangle, CheckCircle, Flag, TrendingUp, Users } from 'lucide-react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useToast } from '../hooks/use-toast';\nimport { Badge } from './ui/badge';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Textarea } from './ui/textarea';\n\ninterface AIFeedback {\n  id: string;\n  termId: string;\n  termName: string;\n  feedbackType: string;\n  section?: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  status: 'pending' | 'reviewing' | 'resolved' | 'dismissed';\n  userId?: string;\n  userAgent?: string;\n  createdAt: string;\n  reviewedBy?: string;\n  reviewedAt?: string;\n  reviewNotes?: string;\n}\n\ninterface AIAnalytics {\n  totalRequests: number;\n  totalCost: number;\n  averageLatency: number;\n  successRate: number;\n  byOperation: Record<string, number>;\n  byModel: Record<string, number>;\n  timeline: Array<{ date: string; requests: number; cost: number }>;\n}\n\ninterface VerificationStats {\n  total: number;\n  unverified: number;\n  verified: number;\n  flagged: number;\n  needsReview: number;\n  expertReviewed: number;\n}\n\nexport function AIFeedbackDashboard() {\n  const [feedbackList, setFeedbackList] = useState<AIFeedback[]>([]);\n  const [analytics, setAnalytics] = useState<AIAnalytics | null>(null);\n  const [verificationStats, setVerificationStats] = useState<VerificationStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedFeedback, setSelectedFeedback] = useState<AIFeedback | null>(null);\n  const [reviewNotes, setReviewNotes] = useState('');\n  const [newStatus, setNewStatus] = useState<string>('');\n  const { toast } = useToast();\n\n  const loadDashboardData = useCallback(async () => {\n    setLoading(true);\n    try {\n      // Load real feedback data\n      const feedbackResponse = await fetch('/api/feedback?status=pending&limit=50');\n      if (feedbackResponse.ok) {\n        const feedbackData = await feedbackResponse.json();\n        if (feedbackData.success && feedbackData.data) {\n          // Transform feedback data to match our interface\n          const transformedFeedback = feedbackData.data.feedback.map((item: any) => ({\n            id: item.id,\n            termId: item.term_id || 'unknown',\n            termName: item.term_name || 'Unknown Term',\n            feedbackType: item.type,\n            section: 'general',\n            description: item.message || 'No description provided',\n            severity: item.rating\n              ? item.rating <= 2\n                ? 'high'\n                : item.rating <= 3\n                  ? 'medium'\n                  : 'low'\n              : 'medium',\n            status: item.status,\n            userId: item.user_id,\n            userAgent: item.user_agent,\n            createdAt: item.created_at,\n            reviewedBy: item.reviewed_by,\n            reviewedAt: item.reviewed_at,\n            reviewNotes: item.admin_notes,\n          }));\n          setFeedbackList(transformedFeedback);\n        }\n      }\n\n      // Load analytics data\n      const analyticsResponse = await fetch('/api/monitoring/analytics/dashboard?timeframe=month');\n      if (analyticsResponse.ok) {\n        const analyticsData = await analyticsResponse.json();\n        if (analyticsData.success && analyticsData.data) {\n          setAnalytics({\n            totalRequests: analyticsData.data.totalPageViews,\n            totalCost: 0, // This should come from a dedicated AI cost tracking service\n            averageLatency: analyticsData.data.averageSessionDuration,\n            successRate: 99.5, // This would need to be calculated based on error logs\n            byOperation: analyticsData.data.topPages.reduce((acc: any, page: any) => {\n              acc[page.page] = page.view_count;\n              return acc;\n            }, {}),\n            byModel: {}, // This data is not available from the current analytics endpoint\n            timeline: analyticsData.data.pageViewsByDay.map((item: any) => ({\n              date: item.day,\n              requests: item.total_views,\n              cost: 0,\n            })),\n          });\n        }\n      }\n\n      // Set verification stats with realistic estimates based on real data\n      const totalTerms = analytics?.totalRequests || 1000;\n      setVerificationStats({\n        total: totalTerms,\n        unverified: Math.floor(totalTerms * 0.25),\n        verified: Math.floor(totalTerms * 0.65),\n        flagged: Math.floor(totalTerms * 0.03),\n        needsReview: Math.floor(totalTerms * 0.05),\n        expertReviewed: Math.floor(totalTerms * 0.02),\n      });\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load dashboard data',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const updateFeedbackStatus = async (feedbackId: string, status: string, notes: string) => {\n    try {\n      const response = await fetch(`/api/feedback/${feedbackId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status, adminNotes: notes }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update feedback status');\n      }\n\n      // Update local state\n      setFeedbackList((prev) =>\n        prev.map((feedback) =>\n          feedback.id === feedbackId\n            ? {\n                ...feedback,\n                status: status as any,\n                reviewNotes: notes,\n                reviewedAt: new Date().toISOString(),\n              }\n            : feedback\n        )\n      );\n\n      toast({\n        title: 'Status Updated',\n        description: 'Feedback status has been updated successfully',\n      });\n\n      setSelectedFeedback(null);\n      setReviewNotes('');\n      setNewStatus('');\n    } catch (error) {\n      console.error('Error updating feedback:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update feedback status',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'reviewing':\n        return 'bg-blue-100 text-blue-800';\n      case 'resolved':\n        return 'bg-green-100 text-green-800';\n      case 'dismissed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">AI Content Management</h2>\n        <Button onClick={loadDashboardData} variant=\"outline\">\n          <Activity className=\"w-4 h-4 mr-2\" />\n          Refresh\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"feedback\">Content Feedback</TabsTrigger>\n          <TabsTrigger value=\"verification\">Verification Status</TabsTrigger>\n          <TabsTrigger value=\"analytics\">AI Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Pending Feedback</CardTitle>\n                <Flag className=\"h-4 w-4 text-orange-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {feedbackList.filter((f) => f.status === 'pending').length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Requires review</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Unverified Content</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{verificationStats?.unverified || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">AI-generated terms</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analytics?.successRate || 0}%</div>\n                <p className=\"text-xs text-muted-foreground\">AI operation success</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Monthly Cost</CardTitle>\n                <Users className=\"h-4 w-4 text-blue-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  ${analytics?.totalCost?.toFixed(2) || '0.00'}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">AI API usage</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n              <CardDescription>Common AI content management tasks</CardDescription>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <Flag className=\"h-6 w-6\" />\n                <span>Review Flagged Content</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {feedbackList.filter((f) => f.status === 'pending').length} pending\n                </span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <CheckCircle className=\"h-6 w-6\" />\n                <span>Verify AI Content</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {verificationStats?.unverified} unverified\n                </span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <TrendingUp className=\"h-6 w-6\" />\n                <span>View Analytics</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {analytics?.totalRequests} requests\n                </span>\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"feedback\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Content Feedback Queue</CardTitle>\n              <CardDescription>\n                Review and respond to user feedback on AI-generated content\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {feedbackList.map((feedback) => (\n                  <div key={feedback.id} className=\"border rounded-lg p-4 space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <h3 className=\"font-medium\">{feedback.termName}</h3>\n                          {feedback.section && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {feedback.section}\n                            </Badge>\n                          )}\n                          <Badge className={getSeverityColor(feedback.severity)}>\n                            {feedback.severity}\n                          </Badge>\n                          <Badge className={getStatusColor(feedback.status)}>\n                            {feedback.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">{feedback.description}</p>\n                        <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                          <span>Type: {feedback.feedbackType}</span>\n                          <span>•</span>\n                          <span>{new Date(feedback.createdAt).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            setSelectedFeedback(feedback);\n                            setNewStatus(feedback.status);\n                          }}\n                        >\n                          Review\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Review Modal */}\n          {selectedFeedback && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Review Feedback</CardTitle>\n                <CardDescription>\n                  Update status and add review notes for: {selectedFeedback.termName}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Status</label>\n                    <Select value={newStatus} onValueChange={setNewStatus}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"reviewing\">Reviewing</SelectItem>\n                        <SelectItem value=\"resolved\">Resolved</SelectItem>\n                        <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium\">Review Notes</label>\n                  <Textarea\n                    placeholder=\"Add notes about your review decision...\"\n                    value={reviewNotes}\n                    onChange={(e) => setReviewNotes(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSelectedFeedback(null);\n                      setReviewNotes('');\n                      setNewStatus('');\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={() =>\n                      updateFeedbackStatus(selectedFeedback.id, newStatus, reviewNotes)\n                    }\n                  >\n                    Update Status\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"verification\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Content Verification Status</CardTitle>\n              <CardDescription>\n                Monitor and manage AI-generated content verification\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    {verificationStats?.unverified}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Unverified</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {verificationStats?.verified}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Verified</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {verificationStats?.flagged}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Flagged</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {verificationStats?.needsReview}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Needs Review</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {verificationStats?.expertReviewed}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Expert Reviewed</div>\n                </div>\n              </div>\n\n              <div className=\"text-center text-gray-500\">\n                Detailed verification management interface would be implemented here\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>AI Usage Analytics</CardTitle>\n              <CardDescription>\n                Monitor AI API usage, costs, and performance metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.totalRequests}</div>\n                  <div className=\"text-sm text-gray-500\">Total Requests</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">${analytics?.totalCost.toFixed(2)}</div>\n                  <div className=\"text-sm text-gray-500\">Total Cost</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.averageLatency}ms</div>\n                  <div className=\"text-sm text-gray-500\">Avg Latency</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.successRate}%</div>\n                  <div className=\"text-sm text-gray-500\">Success Rate</div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium mb-3\">Requests by Operation</h4>\n                  <div className=\"space-y-2\">\n                    {analytics &&\n                      Object.entries(analytics.byOperation).map(([operation, count]) => (\n                        <div key={operation} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">{operation.replace('_', ' ')}</span>\n                          <span className=\"font-medium\">{count}</span>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-3\">Requests by Model</h4>\n                  <div className=\"space-y-2\">\n                    {analytics &&\n                      Object.entries(analytics.byModel).map(([model, count]) => (\n                        <div key={model} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">{model}</span>\n                          <span className=\"font-medium\">{count}</span>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default AIFeedbackDashboard;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIFeedbackDashboard.tsx"},"span":[2426,2429],"sourceCode":"import { Activity, AlertTriangle, CheckCircle, Flag, TrendingUp, Users } from 'lucide-react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useToast } from '../hooks/use-toast';\nimport { Badge } from './ui/badge';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Textarea } from './ui/textarea';\n\ninterface AIFeedback {\n  id: string;\n  termId: string;\n  termName: string;\n  feedbackType: string;\n  section?: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  status: 'pending' | 'reviewing' | 'resolved' | 'dismissed';\n  userId?: string;\n  userAgent?: string;\n  createdAt: string;\n  reviewedBy?: string;\n  reviewedAt?: string;\n  reviewNotes?: string;\n}\n\ninterface AIAnalytics {\n  totalRequests: number;\n  totalCost: number;\n  averageLatency: number;\n  successRate: number;\n  byOperation: Record<string, number>;\n  byModel: Record<string, number>;\n  timeline: Array<{ date: string; requests: number; cost: number }>;\n}\n\ninterface VerificationStats {\n  total: number;\n  unverified: number;\n  verified: number;\n  flagged: number;\n  needsReview: number;\n  expertReviewed: number;\n}\n\nexport function AIFeedbackDashboard() {\n  const [feedbackList, setFeedbackList] = useState<AIFeedback[]>([]);\n  const [analytics, setAnalytics] = useState<AIAnalytics | null>(null);\n  const [verificationStats, setVerificationStats] = useState<VerificationStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedFeedback, setSelectedFeedback] = useState<AIFeedback | null>(null);\n  const [reviewNotes, setReviewNotes] = useState('');\n  const [newStatus, setNewStatus] = useState<string>('');\n  const { toast } = useToast();\n\n  const loadDashboardData = useCallback(async () => {\n    setLoading(true);\n    try {\n      // Load real feedback data\n      const feedbackResponse = await fetch('/api/feedback?status=pending&limit=50');\n      if (feedbackResponse.ok) {\n        const feedbackData = await feedbackResponse.json();\n        if (feedbackData.success && feedbackData.data) {\n          // Transform feedback data to match our interface\n          const transformedFeedback = feedbackData.data.feedback.map((item: any) => ({\n            id: item.id,\n            termId: item.term_id || 'unknown',\n            termName: item.term_name || 'Unknown Term',\n            feedbackType: item.type,\n            section: 'general',\n            description: item.message || 'No description provided',\n            severity: item.rating\n              ? item.rating <= 2\n                ? 'high'\n                : item.rating <= 3\n                  ? 'medium'\n                  : 'low'\n              : 'medium',\n            status: item.status,\n            userId: item.user_id,\n            userAgent: item.user_agent,\n            createdAt: item.created_at,\n            reviewedBy: item.reviewed_by,\n            reviewedAt: item.reviewed_at,\n            reviewNotes: item.admin_notes,\n          }));\n          setFeedbackList(transformedFeedback);\n        }\n      }\n\n      // Load analytics data\n      const analyticsResponse = await fetch('/api/monitoring/analytics/dashboard?timeframe=month');\n      if (analyticsResponse.ok) {\n        const analyticsData = await analyticsResponse.json();\n        if (analyticsData.success && analyticsData.data) {\n          setAnalytics({\n            totalRequests: analyticsData.data.totalPageViews,\n            totalCost: 0, // This should come from a dedicated AI cost tracking service\n            averageLatency: analyticsData.data.averageSessionDuration,\n            successRate: 99.5, // This would need to be calculated based on error logs\n            byOperation: analyticsData.data.topPages.reduce((acc: any, page: any) => {\n              acc[page.page] = page.view_count;\n              return acc;\n            }, {}),\n            byModel: {}, // This data is not available from the current analytics endpoint\n            timeline: analyticsData.data.pageViewsByDay.map((item: any) => ({\n              date: item.day,\n              requests: item.total_views,\n              cost: 0,\n            })),\n          });\n        }\n      }\n\n      // Set verification stats with realistic estimates based on real data\n      const totalTerms = analytics?.totalRequests || 1000;\n      setVerificationStats({\n        total: totalTerms,\n        unverified: Math.floor(totalTerms * 0.25),\n        verified: Math.floor(totalTerms * 0.65),\n        flagged: Math.floor(totalTerms * 0.03),\n        needsReview: Math.floor(totalTerms * 0.05),\n        expertReviewed: Math.floor(totalTerms * 0.02),\n      });\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load dashboard data',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const updateFeedbackStatus = async (feedbackId: string, status: string, notes: string) => {\n    try {\n      const response = await fetch(`/api/feedback/${feedbackId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status, adminNotes: notes }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update feedback status');\n      }\n\n      // Update local state\n      setFeedbackList((prev) =>\n        prev.map((feedback) =>\n          feedback.id === feedbackId\n            ? {\n                ...feedback,\n                status: status as any,\n                reviewNotes: notes,\n                reviewedAt: new Date().toISOString(),\n              }\n            : feedback\n        )\n      );\n\n      toast({\n        title: 'Status Updated',\n        description: 'Feedback status has been updated successfully',\n      });\n\n      setSelectedFeedback(null);\n      setReviewNotes('');\n      setNewStatus('');\n    } catch (error) {\n      console.error('Error updating feedback:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update feedback status',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'reviewing':\n        return 'bg-blue-100 text-blue-800';\n      case 'resolved':\n        return 'bg-green-100 text-green-800';\n      case 'dismissed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">AI Content Management</h2>\n        <Button onClick={loadDashboardData} variant=\"outline\">\n          <Activity className=\"w-4 h-4 mr-2\" />\n          Refresh\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"feedback\">Content Feedback</TabsTrigger>\n          <TabsTrigger value=\"verification\">Verification Status</TabsTrigger>\n          <TabsTrigger value=\"analytics\">AI Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Pending Feedback</CardTitle>\n                <Flag className=\"h-4 w-4 text-orange-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {feedbackList.filter((f) => f.status === 'pending').length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Requires review</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Unverified Content</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{verificationStats?.unverified || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">AI-generated terms</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analytics?.successRate || 0}%</div>\n                <p className=\"text-xs text-muted-foreground\">AI operation success</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Monthly Cost</CardTitle>\n                <Users className=\"h-4 w-4 text-blue-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  ${analytics?.totalCost?.toFixed(2) || '0.00'}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">AI API usage</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n              <CardDescription>Common AI content management tasks</CardDescription>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <Flag className=\"h-6 w-6\" />\n                <span>Review Flagged Content</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {feedbackList.filter((f) => f.status === 'pending').length} pending\n                </span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <CheckCircle className=\"h-6 w-6\" />\n                <span>Verify AI Content</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {verificationStats?.unverified} unverified\n                </span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <TrendingUp className=\"h-6 w-6\" />\n                <span>View Analytics</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {analytics?.totalRequests} requests\n                </span>\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"feedback\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Content Feedback Queue</CardTitle>\n              <CardDescription>\n                Review and respond to user feedback on AI-generated content\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {feedbackList.map((feedback) => (\n                  <div key={feedback.id} className=\"border rounded-lg p-4 space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <h3 className=\"font-medium\">{feedback.termName}</h3>\n                          {feedback.section && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {feedback.section}\n                            </Badge>\n                          )}\n                          <Badge className={getSeverityColor(feedback.severity)}>\n                            {feedback.severity}\n                          </Badge>\n                          <Badge className={getStatusColor(feedback.status)}>\n                            {feedback.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">{feedback.description}</p>\n                        <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                          <span>Type: {feedback.feedbackType}</span>\n                          <span>•</span>\n                          <span>{new Date(feedback.createdAt).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            setSelectedFeedback(feedback);\n                            setNewStatus(feedback.status);\n                          }}\n                        >\n                          Review\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Review Modal */}\n          {selectedFeedback && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Review Feedback</CardTitle>\n                <CardDescription>\n                  Update status and add review notes for: {selectedFeedback.termName}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Status</label>\n                    <Select value={newStatus} onValueChange={setNewStatus}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"reviewing\">Reviewing</SelectItem>\n                        <SelectItem value=\"resolved\">Resolved</SelectItem>\n                        <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium\">Review Notes</label>\n                  <Textarea\n                    placeholder=\"Add notes about your review decision...\"\n                    value={reviewNotes}\n                    onChange={(e) => setReviewNotes(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSelectedFeedback(null);\n                      setReviewNotes('');\n                      setNewStatus('');\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={() =>\n                      updateFeedbackStatus(selectedFeedback.id, newStatus, reviewNotes)\n                    }\n                  >\n                    Update Status\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"verification\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Content Verification Status</CardTitle>\n              <CardDescription>\n                Monitor and manage AI-generated content verification\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    {verificationStats?.unverified}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Unverified</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {verificationStats?.verified}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Verified</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {verificationStats?.flagged}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Flagged</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {verificationStats?.needsReview}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Needs Review</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {verificationStats?.expertReviewed}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Expert Reviewed</div>\n                </div>\n              </div>\n\n              <div className=\"text-center text-gray-500\">\n                Detailed verification management interface would be implemented here\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>AI Usage Analytics</CardTitle>\n              <CardDescription>\n                Monitor AI API usage, costs, and performance metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.totalRequests}</div>\n                  <div className=\"text-sm text-gray-500\">Total Requests</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">${analytics?.totalCost.toFixed(2)}</div>\n                  <div className=\"text-sm text-gray-500\">Total Cost</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.averageLatency}ms</div>\n                  <div className=\"text-sm text-gray-500\">Avg Latency</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.successRate}%</div>\n                  <div className=\"text-sm text-gray-500\">Success Rate</div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium mb-3\">Requests by Operation</h4>\n                  <div className=\"space-y-2\">\n                    {analytics &&\n                      Object.entries(analytics.byOperation).map(([operation, count]) => (\n                        <div key={operation} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">{operation.replace('_', ' ')}</span>\n                          <span className=\"font-medium\">{count}</span>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-3\">Requests by Model</h4>\n                  <div className=\"space-y-2\">\n                    {analytics &&\n                      Object.entries(analytics.byModel).map(([model, count]) => (\n                        <div key={model} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">{model}</span>\n                          <span className=\"font-medium\">{count}</span>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default AIFeedbackDashboard;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIFeedbackDashboard.tsx"},"span":[3949,3952],"sourceCode":"import { Activity, AlertTriangle, CheckCircle, Flag, TrendingUp, Users } from 'lucide-react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useToast } from '../hooks/use-toast';\nimport { Badge } from './ui/badge';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Textarea } from './ui/textarea';\n\ninterface AIFeedback {\n  id: string;\n  termId: string;\n  termName: string;\n  feedbackType: string;\n  section?: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  status: 'pending' | 'reviewing' | 'resolved' | 'dismissed';\n  userId?: string;\n  userAgent?: string;\n  createdAt: string;\n  reviewedBy?: string;\n  reviewedAt?: string;\n  reviewNotes?: string;\n}\n\ninterface AIAnalytics {\n  totalRequests: number;\n  totalCost: number;\n  averageLatency: number;\n  successRate: number;\n  byOperation: Record<string, number>;\n  byModel: Record<string, number>;\n  timeline: Array<{ date: string; requests: number; cost: number }>;\n}\n\ninterface VerificationStats {\n  total: number;\n  unverified: number;\n  verified: number;\n  flagged: number;\n  needsReview: number;\n  expertReviewed: number;\n}\n\nexport function AIFeedbackDashboard() {\n  const [feedbackList, setFeedbackList] = useState<AIFeedback[]>([]);\n  const [analytics, setAnalytics] = useState<AIAnalytics | null>(null);\n  const [verificationStats, setVerificationStats] = useState<VerificationStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedFeedback, setSelectedFeedback] = useState<AIFeedback | null>(null);\n  const [reviewNotes, setReviewNotes] = useState('');\n  const [newStatus, setNewStatus] = useState<string>('');\n  const { toast } = useToast();\n\n  const loadDashboardData = useCallback(async () => {\n    setLoading(true);\n    try {\n      // Load real feedback data\n      const feedbackResponse = await fetch('/api/feedback?status=pending&limit=50');\n      if (feedbackResponse.ok) {\n        const feedbackData = await feedbackResponse.json();\n        if (feedbackData.success && feedbackData.data) {\n          // Transform feedback data to match our interface\n          const transformedFeedback = feedbackData.data.feedback.map((item: any) => ({\n            id: item.id,\n            termId: item.term_id || 'unknown',\n            termName: item.term_name || 'Unknown Term',\n            feedbackType: item.type,\n            section: 'general',\n            description: item.message || 'No description provided',\n            severity: item.rating\n              ? item.rating <= 2\n                ? 'high'\n                : item.rating <= 3\n                  ? 'medium'\n                  : 'low'\n              : 'medium',\n            status: item.status,\n            userId: item.user_id,\n            userAgent: item.user_agent,\n            createdAt: item.created_at,\n            reviewedBy: item.reviewed_by,\n            reviewedAt: item.reviewed_at,\n            reviewNotes: item.admin_notes,\n          }));\n          setFeedbackList(transformedFeedback);\n        }\n      }\n\n      // Load analytics data\n      const analyticsResponse = await fetch('/api/monitoring/analytics/dashboard?timeframe=month');\n      if (analyticsResponse.ok) {\n        const analyticsData = await analyticsResponse.json();\n        if (analyticsData.success && analyticsData.data) {\n          setAnalytics({\n            totalRequests: analyticsData.data.totalPageViews,\n            totalCost: 0, // This should come from a dedicated AI cost tracking service\n            averageLatency: analyticsData.data.averageSessionDuration,\n            successRate: 99.5, // This would need to be calculated based on error logs\n            byOperation: analyticsData.data.topPages.reduce((acc: any, page: any) => {\n              acc[page.page] = page.view_count;\n              return acc;\n            }, {}),\n            byModel: {}, // This data is not available from the current analytics endpoint\n            timeline: analyticsData.data.pageViewsByDay.map((item: any) => ({\n              date: item.day,\n              requests: item.total_views,\n              cost: 0,\n            })),\n          });\n        }\n      }\n\n      // Set verification stats with realistic estimates based on real data\n      const totalTerms = analytics?.totalRequests || 1000;\n      setVerificationStats({\n        total: totalTerms,\n        unverified: Math.floor(totalTerms * 0.25),\n        verified: Math.floor(totalTerms * 0.65),\n        flagged: Math.floor(totalTerms * 0.03),\n        needsReview: Math.floor(totalTerms * 0.05),\n        expertReviewed: Math.floor(totalTerms * 0.02),\n      });\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load dashboard data',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const updateFeedbackStatus = async (feedbackId: string, status: string, notes: string) => {\n    try {\n      const response = await fetch(`/api/feedback/${feedbackId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status, adminNotes: notes }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update feedback status');\n      }\n\n      // Update local state\n      setFeedbackList((prev) =>\n        prev.map((feedback) =>\n          feedback.id === feedbackId\n            ? {\n                ...feedback,\n                status: status as any,\n                reviewNotes: notes,\n                reviewedAt: new Date().toISOString(),\n              }\n            : feedback\n        )\n      );\n\n      toast({\n        title: 'Status Updated',\n        description: 'Feedback status has been updated successfully',\n      });\n\n      setSelectedFeedback(null);\n      setReviewNotes('');\n      setNewStatus('');\n    } catch (error) {\n      console.error('Error updating feedback:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update feedback status',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'reviewing':\n        return 'bg-blue-100 text-blue-800';\n      case 'resolved':\n        return 'bg-green-100 text-green-800';\n      case 'dismissed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">AI Content Management</h2>\n        <Button onClick={loadDashboardData} variant=\"outline\">\n          <Activity className=\"w-4 h-4 mr-2\" />\n          Refresh\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"feedback\">Content Feedback</TabsTrigger>\n          <TabsTrigger value=\"verification\">Verification Status</TabsTrigger>\n          <TabsTrigger value=\"analytics\">AI Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Pending Feedback</CardTitle>\n                <Flag className=\"h-4 w-4 text-orange-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {feedbackList.filter((f) => f.status === 'pending').length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Requires review</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Unverified Content</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{verificationStats?.unverified || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">AI-generated terms</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analytics?.successRate || 0}%</div>\n                <p className=\"text-xs text-muted-foreground\">AI operation success</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Monthly Cost</CardTitle>\n                <Users className=\"h-4 w-4 text-blue-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  ${analytics?.totalCost?.toFixed(2) || '0.00'}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">AI API usage</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n              <CardDescription>Common AI content management tasks</CardDescription>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <Flag className=\"h-6 w-6\" />\n                <span>Review Flagged Content</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {feedbackList.filter((f) => f.status === 'pending').length} pending\n                </span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <CheckCircle className=\"h-6 w-6\" />\n                <span>Verify AI Content</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {verificationStats?.unverified} unverified\n                </span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <TrendingUp className=\"h-6 w-6\" />\n                <span>View Analytics</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {analytics?.totalRequests} requests\n                </span>\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"feedback\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Content Feedback Queue</CardTitle>\n              <CardDescription>\n                Review and respond to user feedback on AI-generated content\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {feedbackList.map((feedback) => (\n                  <div key={feedback.id} className=\"border rounded-lg p-4 space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <h3 className=\"font-medium\">{feedback.termName}</h3>\n                          {feedback.section && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {feedback.section}\n                            </Badge>\n                          )}\n                          <Badge className={getSeverityColor(feedback.severity)}>\n                            {feedback.severity}\n                          </Badge>\n                          <Badge className={getStatusColor(feedback.status)}>\n                            {feedback.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">{feedback.description}</p>\n                        <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                          <span>Type: {feedback.feedbackType}</span>\n                          <span>•</span>\n                          <span>{new Date(feedback.createdAt).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            setSelectedFeedback(feedback);\n                            setNewStatus(feedback.status);\n                          }}\n                        >\n                          Review\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Review Modal */}\n          {selectedFeedback && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Review Feedback</CardTitle>\n                <CardDescription>\n                  Update status and add review notes for: {selectedFeedback.termName}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Status</label>\n                    <Select value={newStatus} onValueChange={setNewStatus}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"reviewing\">Reviewing</SelectItem>\n                        <SelectItem value=\"resolved\">Resolved</SelectItem>\n                        <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium\">Review Notes</label>\n                  <Textarea\n                    placeholder=\"Add notes about your review decision...\"\n                    value={reviewNotes}\n                    onChange={(e) => setReviewNotes(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSelectedFeedback(null);\n                      setReviewNotes('');\n                      setNewStatus('');\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={() =>\n                      updateFeedbackStatus(selectedFeedback.id, newStatus, reviewNotes)\n                    }\n                  >\n                    Update Status\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"verification\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Content Verification Status</CardTitle>\n              <CardDescription>\n                Monitor and manage AI-generated content verification\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    {verificationStats?.unverified}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Unverified</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {verificationStats?.verified}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Verified</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {verificationStats?.flagged}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Flagged</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {verificationStats?.needsReview}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Needs Review</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {verificationStats?.expertReviewed}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Expert Reviewed</div>\n                </div>\n              </div>\n\n              <div className=\"text-center text-gray-500\">\n                Detailed verification management interface would be implemented here\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>AI Usage Analytics</CardTitle>\n              <CardDescription>\n                Monitor AI API usage, costs, and performance metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.totalRequests}</div>\n                  <div className=\"text-sm text-gray-500\">Total Requests</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">${analytics?.totalCost.toFixed(2)}</div>\n                  <div className=\"text-sm text-gray-500\">Total Cost</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.averageLatency}ms</div>\n                  <div className=\"text-sm text-gray-500\">Avg Latency</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.successRate}%</div>\n                  <div className=\"text-sm text-gray-500\">Success Rate</div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium mb-3\">Requests by Operation</h4>\n                  <div className=\"space-y-2\">\n                    {analytics &&\n                      Object.entries(analytics.byOperation).map(([operation, count]) => (\n                        <div key={operation} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">{operation.replace('_', ' ')}</span>\n                          <span className=\"font-medium\">{count}</span>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-3\">Requests by Model</h4>\n                  <div className=\"space-y-2\">\n                    {analytics &&\n                      Object.entries(analytics.byModel).map(([model, count]) => (\n                        <div key={model} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">{model}</span>\n                          <span className=\"font-medium\">{count}</span>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default AIFeedbackDashboard;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIFeedbackDashboard.tsx"},"span":[3960,3963],"sourceCode":"import { Activity, AlertTriangle, CheckCircle, Flag, TrendingUp, Users } from 'lucide-react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useToast } from '../hooks/use-toast';\nimport { Badge } from './ui/badge';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Textarea } from './ui/textarea';\n\ninterface AIFeedback {\n  id: string;\n  termId: string;\n  termName: string;\n  feedbackType: string;\n  section?: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  status: 'pending' | 'reviewing' | 'resolved' | 'dismissed';\n  userId?: string;\n  userAgent?: string;\n  createdAt: string;\n  reviewedBy?: string;\n  reviewedAt?: string;\n  reviewNotes?: string;\n}\n\ninterface AIAnalytics {\n  totalRequests: number;\n  totalCost: number;\n  averageLatency: number;\n  successRate: number;\n  byOperation: Record<string, number>;\n  byModel: Record<string, number>;\n  timeline: Array<{ date: string; requests: number; cost: number }>;\n}\n\ninterface VerificationStats {\n  total: number;\n  unverified: number;\n  verified: number;\n  flagged: number;\n  needsReview: number;\n  expertReviewed: number;\n}\n\nexport function AIFeedbackDashboard() {\n  const [feedbackList, setFeedbackList] = useState<AIFeedback[]>([]);\n  const [analytics, setAnalytics] = useState<AIAnalytics | null>(null);\n  const [verificationStats, setVerificationStats] = useState<VerificationStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedFeedback, setSelectedFeedback] = useState<AIFeedback | null>(null);\n  const [reviewNotes, setReviewNotes] = useState('');\n  const [newStatus, setNewStatus] = useState<string>('');\n  const { toast } = useToast();\n\n  const loadDashboardData = useCallback(async () => {\n    setLoading(true);\n    try {\n      // Load real feedback data\n      const feedbackResponse = await fetch('/api/feedback?status=pending&limit=50');\n      if (feedbackResponse.ok) {\n        const feedbackData = await feedbackResponse.json();\n        if (feedbackData.success && feedbackData.data) {\n          // Transform feedback data to match our interface\n          const transformedFeedback = feedbackData.data.feedback.map((item: any) => ({\n            id: item.id,\n            termId: item.term_id || 'unknown',\n            termName: item.term_name || 'Unknown Term',\n            feedbackType: item.type,\n            section: 'general',\n            description: item.message || 'No description provided',\n            severity: item.rating\n              ? item.rating <= 2\n                ? 'high'\n                : item.rating <= 3\n                  ? 'medium'\n                  : 'low'\n              : 'medium',\n            status: item.status,\n            userId: item.user_id,\n            userAgent: item.user_agent,\n            createdAt: item.created_at,\n            reviewedBy: item.reviewed_by,\n            reviewedAt: item.reviewed_at,\n            reviewNotes: item.admin_notes,\n          }));\n          setFeedbackList(transformedFeedback);\n        }\n      }\n\n      // Load analytics data\n      const analyticsResponse = await fetch('/api/monitoring/analytics/dashboard?timeframe=month');\n      if (analyticsResponse.ok) {\n        const analyticsData = await analyticsResponse.json();\n        if (analyticsData.success && analyticsData.data) {\n          setAnalytics({\n            totalRequests: analyticsData.data.totalPageViews,\n            totalCost: 0, // This should come from a dedicated AI cost tracking service\n            averageLatency: analyticsData.data.averageSessionDuration,\n            successRate: 99.5, // This would need to be calculated based on error logs\n            byOperation: analyticsData.data.topPages.reduce((acc: any, page: any) => {\n              acc[page.page] = page.view_count;\n              return acc;\n            }, {}),\n            byModel: {}, // This data is not available from the current analytics endpoint\n            timeline: analyticsData.data.pageViewsByDay.map((item: any) => ({\n              date: item.day,\n              requests: item.total_views,\n              cost: 0,\n            })),\n          });\n        }\n      }\n\n      // Set verification stats with realistic estimates based on real data\n      const totalTerms = analytics?.totalRequests || 1000;\n      setVerificationStats({\n        total: totalTerms,\n        unverified: Math.floor(totalTerms * 0.25),\n        verified: Math.floor(totalTerms * 0.65),\n        flagged: Math.floor(totalTerms * 0.03),\n        needsReview: Math.floor(totalTerms * 0.05),\n        expertReviewed: Math.floor(totalTerms * 0.02),\n      });\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load dashboard data',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const updateFeedbackStatus = async (feedbackId: string, status: string, notes: string) => {\n    try {\n      const response = await fetch(`/api/feedback/${feedbackId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status, adminNotes: notes }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update feedback status');\n      }\n\n      // Update local state\n      setFeedbackList((prev) =>\n        prev.map((feedback) =>\n          feedback.id === feedbackId\n            ? {\n                ...feedback,\n                status: status as any,\n                reviewNotes: notes,\n                reviewedAt: new Date().toISOString(),\n              }\n            : feedback\n        )\n      );\n\n      toast({\n        title: 'Status Updated',\n        description: 'Feedback status has been updated successfully',\n      });\n\n      setSelectedFeedback(null);\n      setReviewNotes('');\n      setNewStatus('');\n    } catch (error) {\n      console.error('Error updating feedback:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update feedback status',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'reviewing':\n        return 'bg-blue-100 text-blue-800';\n      case 'resolved':\n        return 'bg-green-100 text-green-800';\n      case 'dismissed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">AI Content Management</h2>\n        <Button onClick={loadDashboardData} variant=\"outline\">\n          <Activity className=\"w-4 h-4 mr-2\" />\n          Refresh\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"feedback\">Content Feedback</TabsTrigger>\n          <TabsTrigger value=\"verification\">Verification Status</TabsTrigger>\n          <TabsTrigger value=\"analytics\">AI Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Pending Feedback</CardTitle>\n                <Flag className=\"h-4 w-4 text-orange-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {feedbackList.filter((f) => f.status === 'pending').length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Requires review</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Unverified Content</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{verificationStats?.unverified || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">AI-generated terms</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analytics?.successRate || 0}%</div>\n                <p className=\"text-xs text-muted-foreground\">AI operation success</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Monthly Cost</CardTitle>\n                <Users className=\"h-4 w-4 text-blue-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  ${analytics?.totalCost?.toFixed(2) || '0.00'}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">AI API usage</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n              <CardDescription>Common AI content management tasks</CardDescription>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <Flag className=\"h-6 w-6\" />\n                <span>Review Flagged Content</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {feedbackList.filter((f) => f.status === 'pending').length} pending\n                </span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <CheckCircle className=\"h-6 w-6\" />\n                <span>Verify AI Content</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {verificationStats?.unverified} unverified\n                </span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <TrendingUp className=\"h-6 w-6\" />\n                <span>View Analytics</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {analytics?.totalRequests} requests\n                </span>\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"feedback\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Content Feedback Queue</CardTitle>\n              <CardDescription>\n                Review and respond to user feedback on AI-generated content\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {feedbackList.map((feedback) => (\n                  <div key={feedback.id} className=\"border rounded-lg p-4 space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <h3 className=\"font-medium\">{feedback.termName}</h3>\n                          {feedback.section && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {feedback.section}\n                            </Badge>\n                          )}\n                          <Badge className={getSeverityColor(feedback.severity)}>\n                            {feedback.severity}\n                          </Badge>\n                          <Badge className={getStatusColor(feedback.status)}>\n                            {feedback.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">{feedback.description}</p>\n                        <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                          <span>Type: {feedback.feedbackType}</span>\n                          <span>•</span>\n                          <span>{new Date(feedback.createdAt).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            setSelectedFeedback(feedback);\n                            setNewStatus(feedback.status);\n                          }}\n                        >\n                          Review\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Review Modal */}\n          {selectedFeedback && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Review Feedback</CardTitle>\n                <CardDescription>\n                  Update status and add review notes for: {selectedFeedback.termName}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Status</label>\n                    <Select value={newStatus} onValueChange={setNewStatus}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"reviewing\">Reviewing</SelectItem>\n                        <SelectItem value=\"resolved\">Resolved</SelectItem>\n                        <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium\">Review Notes</label>\n                  <Textarea\n                    placeholder=\"Add notes about your review decision...\"\n                    value={reviewNotes}\n                    onChange={(e) => setReviewNotes(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSelectedFeedback(null);\n                      setReviewNotes('');\n                      setNewStatus('');\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={() =>\n                      updateFeedbackStatus(selectedFeedback.id, newStatus, reviewNotes)\n                    }\n                  >\n                    Update Status\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"verification\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Content Verification Status</CardTitle>\n              <CardDescription>\n                Monitor and manage AI-generated content verification\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    {verificationStats?.unverified}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Unverified</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {verificationStats?.verified}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Verified</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {verificationStats?.flagged}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Flagged</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {verificationStats?.needsReview}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Needs Review</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {verificationStats?.expertReviewed}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Expert Reviewed</div>\n                </div>\n              </div>\n\n              <div className=\"text-center text-gray-500\">\n                Detailed verification management interface would be implemented here\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>AI Usage Analytics</CardTitle>\n              <CardDescription>\n                Monitor AI API usage, costs, and performance metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.totalRequests}</div>\n                  <div className=\"text-sm text-gray-500\">Total Requests</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">${analytics?.totalCost.toFixed(2)}</div>\n                  <div className=\"text-sm text-gray-500\">Total Cost</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.averageLatency}ms</div>\n                  <div className=\"text-sm text-gray-500\">Avg Latency</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.successRate}%</div>\n                  <div className=\"text-sm text-gray-500\">Success Rate</div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium mb-3\">Requests by Operation</h4>\n                  <div className=\"space-y-2\">\n                    {analytics &&\n                      Object.entries(analytics.byOperation).map(([operation, count]) => (\n                        <div key={operation} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">{operation.replace('_', ' ')}</span>\n                          <span className=\"font-medium\">{count}</span>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-3\">Requests by Model</h4>\n                  <div className=\"space-y-2\">\n                    {analytics &&\n                      Object.entries(analytics.byModel).map(([model, count]) => (\n                        <div key={model} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">{model}</span>\n                          <span className=\"font-medium\">{count}</span>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default AIFeedbackDashboard;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AIFeedbackDashboard.tsx"},"span":[4222,4225],"sourceCode":"import { Activity, AlertTriangle, CheckCircle, Flag, TrendingUp, Users } from 'lucide-react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useToast } from '../hooks/use-toast';\nimport { Badge } from './ui/badge';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Textarea } from './ui/textarea';\n\ninterface AIFeedback {\n  id: string;\n  termId: string;\n  termName: string;\n  feedbackType: string;\n  section?: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  status: 'pending' | 'reviewing' | 'resolved' | 'dismissed';\n  userId?: string;\n  userAgent?: string;\n  createdAt: string;\n  reviewedBy?: string;\n  reviewedAt?: string;\n  reviewNotes?: string;\n}\n\ninterface AIAnalytics {\n  totalRequests: number;\n  totalCost: number;\n  averageLatency: number;\n  successRate: number;\n  byOperation: Record<string, number>;\n  byModel: Record<string, number>;\n  timeline: Array<{ date: string; requests: number; cost: number }>;\n}\n\ninterface VerificationStats {\n  total: number;\n  unverified: number;\n  verified: number;\n  flagged: number;\n  needsReview: number;\n  expertReviewed: number;\n}\n\nexport function AIFeedbackDashboard() {\n  const [feedbackList, setFeedbackList] = useState<AIFeedback[]>([]);\n  const [analytics, setAnalytics] = useState<AIAnalytics | null>(null);\n  const [verificationStats, setVerificationStats] = useState<VerificationStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedFeedback, setSelectedFeedback] = useState<AIFeedback | null>(null);\n  const [reviewNotes, setReviewNotes] = useState('');\n  const [newStatus, setNewStatus] = useState<string>('');\n  const { toast } = useToast();\n\n  const loadDashboardData = useCallback(async () => {\n    setLoading(true);\n    try {\n      // Load real feedback data\n      const feedbackResponse = await fetch('/api/feedback?status=pending&limit=50');\n      if (feedbackResponse.ok) {\n        const feedbackData = await feedbackResponse.json();\n        if (feedbackData.success && feedbackData.data) {\n          // Transform feedback data to match our interface\n          const transformedFeedback = feedbackData.data.feedback.map((item: any) => ({\n            id: item.id,\n            termId: item.term_id || 'unknown',\n            termName: item.term_name || 'Unknown Term',\n            feedbackType: item.type,\n            section: 'general',\n            description: item.message || 'No description provided',\n            severity: item.rating\n              ? item.rating <= 2\n                ? 'high'\n                : item.rating <= 3\n                  ? 'medium'\n                  : 'low'\n              : 'medium',\n            status: item.status,\n            userId: item.user_id,\n            userAgent: item.user_agent,\n            createdAt: item.created_at,\n            reviewedBy: item.reviewed_by,\n            reviewedAt: item.reviewed_at,\n            reviewNotes: item.admin_notes,\n          }));\n          setFeedbackList(transformedFeedback);\n        }\n      }\n\n      // Load analytics data\n      const analyticsResponse = await fetch('/api/monitoring/analytics/dashboard?timeframe=month');\n      if (analyticsResponse.ok) {\n        const analyticsData = await analyticsResponse.json();\n        if (analyticsData.success && analyticsData.data) {\n          setAnalytics({\n            totalRequests: analyticsData.data.totalPageViews,\n            totalCost: 0, // This should come from a dedicated AI cost tracking service\n            averageLatency: analyticsData.data.averageSessionDuration,\n            successRate: 99.5, // This would need to be calculated based on error logs\n            byOperation: analyticsData.data.topPages.reduce((acc: any, page: any) => {\n              acc[page.page] = page.view_count;\n              return acc;\n            }, {}),\n            byModel: {}, // This data is not available from the current analytics endpoint\n            timeline: analyticsData.data.pageViewsByDay.map((item: any) => ({\n              date: item.day,\n              requests: item.total_views,\n              cost: 0,\n            })),\n          });\n        }\n      }\n\n      // Set verification stats with realistic estimates based on real data\n      const totalTerms = analytics?.totalRequests || 1000;\n      setVerificationStats({\n        total: totalTerms,\n        unverified: Math.floor(totalTerms * 0.25),\n        verified: Math.floor(totalTerms * 0.65),\n        flagged: Math.floor(totalTerms * 0.03),\n        needsReview: Math.floor(totalTerms * 0.05),\n        expertReviewed: Math.floor(totalTerms * 0.02),\n      });\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load dashboard data',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const updateFeedbackStatus = async (feedbackId: string, status: string, notes: string) => {\n    try {\n      const response = await fetch(`/api/feedback/${feedbackId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status, adminNotes: notes }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update feedback status');\n      }\n\n      // Update local state\n      setFeedbackList((prev) =>\n        prev.map((feedback) =>\n          feedback.id === feedbackId\n            ? {\n                ...feedback,\n                status: status as any,\n                reviewNotes: notes,\n                reviewedAt: new Date().toISOString(),\n              }\n            : feedback\n        )\n      );\n\n      toast({\n        title: 'Status Updated',\n        description: 'Feedback status has been updated successfully',\n      });\n\n      setSelectedFeedback(null);\n      setReviewNotes('');\n      setNewStatus('');\n    } catch (error) {\n      console.error('Error updating feedback:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update feedback status',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'reviewing':\n        return 'bg-blue-100 text-blue-800';\n      case 'resolved':\n        return 'bg-green-100 text-green-800';\n      case 'dismissed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">AI Content Management</h2>\n        <Button onClick={loadDashboardData} variant=\"outline\">\n          <Activity className=\"w-4 h-4 mr-2\" />\n          Refresh\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"feedback\">Content Feedback</TabsTrigger>\n          <TabsTrigger value=\"verification\">Verification Status</TabsTrigger>\n          <TabsTrigger value=\"analytics\">AI Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Pending Feedback</CardTitle>\n                <Flag className=\"h-4 w-4 text-orange-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {feedbackList.filter((f) => f.status === 'pending').length}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Requires review</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Unverified Content</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{verificationStats?.unverified || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">AI-generated terms</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analytics?.successRate || 0}%</div>\n                <p className=\"text-xs text-muted-foreground\">AI operation success</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Monthly Cost</CardTitle>\n                <Users className=\"h-4 w-4 text-blue-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  ${analytics?.totalCost?.toFixed(2) || '0.00'}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">AI API usage</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n              <CardDescription>Common AI content management tasks</CardDescription>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <Flag className=\"h-6 w-6\" />\n                <span>Review Flagged Content</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {feedbackList.filter((f) => f.status === 'pending').length} pending\n                </span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <CheckCircle className=\"h-6 w-6\" />\n                <span>Verify AI Content</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {verificationStats?.unverified} unverified\n                </span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <TrendingUp className=\"h-6 w-6\" />\n                <span>View Analytics</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {analytics?.totalRequests} requests\n                </span>\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"feedback\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Content Feedback Queue</CardTitle>\n              <CardDescription>\n                Review and respond to user feedback on AI-generated content\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {feedbackList.map((feedback) => (\n                  <div key={feedback.id} className=\"border rounded-lg p-4 space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <h3 className=\"font-medium\">{feedback.termName}</h3>\n                          {feedback.section && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {feedback.section}\n                            </Badge>\n                          )}\n                          <Badge className={getSeverityColor(feedback.severity)}>\n                            {feedback.severity}\n                          </Badge>\n                          <Badge className={getStatusColor(feedback.status)}>\n                            {feedback.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">{feedback.description}</p>\n                        <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                          <span>Type: {feedback.feedbackType}</span>\n                          <span>•</span>\n                          <span>{new Date(feedback.createdAt).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            setSelectedFeedback(feedback);\n                            setNewStatus(feedback.status);\n                          }}\n                        >\n                          Review\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Review Modal */}\n          {selectedFeedback && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Review Feedback</CardTitle>\n                <CardDescription>\n                  Update status and add review notes for: {selectedFeedback.termName}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Status</label>\n                    <Select value={newStatus} onValueChange={setNewStatus}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"reviewing\">Reviewing</SelectItem>\n                        <SelectItem value=\"resolved\">Resolved</SelectItem>\n                        <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium\">Review Notes</label>\n                  <Textarea\n                    placeholder=\"Add notes about your review decision...\"\n                    value={reviewNotes}\n                    onChange={(e) => setReviewNotes(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSelectedFeedback(null);\n                      setReviewNotes('');\n                      setNewStatus('');\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={() =>\n                      updateFeedbackStatus(selectedFeedback.id, newStatus, reviewNotes)\n                    }\n                  >\n                    Update Status\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"verification\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Content Verification Status</CardTitle>\n              <CardDescription>\n                Monitor and manage AI-generated content verification\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    {verificationStats?.unverified}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Unverified</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {verificationStats?.verified}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Verified</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {verificationStats?.flagged}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Flagged</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {verificationStats?.needsReview}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Needs Review</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {verificationStats?.expertReviewed}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Expert Reviewed</div>\n                </div>\n              </div>\n\n              <div className=\"text-center text-gray-500\">\n                Detailed verification management interface would be implemented here\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>AI Usage Analytics</CardTitle>\n              <CardDescription>\n                Monitor AI API usage, costs, and performance metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.totalRequests}</div>\n                  <div className=\"text-sm text-gray-500\">Total Requests</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">${analytics?.totalCost.toFixed(2)}</div>\n                  <div className=\"text-sm text-gray-500\">Total Cost</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.averageLatency}ms</div>\n                  <div className=\"text-sm text-gray-500\">Avg Latency</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold\">{analytics?.successRate}%</div>\n                  <div className=\"text-sm text-gray-500\">Success Rate</div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium mb-3\">Requests by Operation</h4>\n                  <div className=\"space-y-2\">\n                    {analytics &&\n                      Object.entries(analytics.byOperation).map(([operation, count]) => (\n                        <div key={operation} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">{operation.replace('_', ' ')}</span>\n                          <span className=\"font-medium\">{count}</span>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-3\">Requests by Model</h4>\n                  <div className=\"space-y-2\">\n                    {analytics &&\n                      Object.entries(analytics.byModel).map(([model, count]) => (\n                        <div key={model} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm\">{model}</span>\n                          <span className=\"font-medium\">{count}</span>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default AIFeedbackDashboard;\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/AITermSuggestions.tsx"},"span":[4040,4043],"sourceCode":"import { useQuery } from '@tanstack/react-query';\nimport { Lightbulb, Loader2, Plus, RefreshCw } from 'lucide-react';\nimport { useState } from 'react';\nimport { useToast } from '../hooks/use-toast';\nimport { Badge } from './ui/badge';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\n\ninterface TermSuggestion {\n  term: string;\n  shortDefinition: string;\n  category: string;\n  reason: string;\n}\n\ninterface AITermSuggestionsProps {\n  onSuggestionSelect?: (suggestion: TermSuggestion) => void;\n  focusCategory?: string;\n  className?: string;\n}\n\nexport function AITermSuggestions({\n  onSuggestionSelect,\n  focusCategory = '',\n  className = '',\n}: AITermSuggestionsProps) {\n  const [selectedCategory, setSelectedCategory] = useState(focusCategory);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [suggestions, setSuggestions] = useState<TermSuggestion[]>([]);\n  const [hasGenerated, setHasGenerated] = useState(false);\n  const { toast } = useToast();\n\n  // Fetch available categories\n  const { data: categories = [] } = useQuery({\n    queryKey: ['categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/categories');\n      if (!response.ok) throw new Error('Failed to fetch categories');\n      return response.json();\n    },\n  });\n\n  const generateSuggestions = async () => {\n    setIsGenerating(true);\n    setHasGenerated(true);\n\n    try {\n      const params = new URLSearchParams();\n      if (selectedCategory) {\n        params.append('category', selectedCategory);\n      }\n      params.append('limit', '6');\n\n      const response = await fetch(`/api/ai/term-suggestions?${params.toString()}`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to generate suggestions');\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        setSuggestions(result.data.suggestions || []);\n        toast({\n          title: 'Success',\n          description: `Generated ${result.data.suggestions?.length || 0} term suggestions!`,\n        });\n      } else {\n        throw new Error(result.error || 'Failed to generate suggestions');\n      }\n    } catch (error) {\n      console.error('Error generating suggestions:', error);\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to generate suggestions',\n        variant: 'destructive',\n      });\n      setSuggestions([]);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleSuggestionSelect = (suggestion: TermSuggestion) => {\n    onSuggestionSelect?.(suggestion);\n    toast({\n      title: 'Suggestion Selected',\n      description: `Selected \"${suggestion.term}\" for further processing.`,\n    });\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Lightbulb className=\"h-5 w-5 text-yellow-500\" />\n            AI Term Suggestions\n          </CardTitle>\n          <CardDescription>\n            Get AI-powered suggestions for important terms to add to your glossary\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex gap-4 items-end\">\n            <div className=\"flex-1 space-y-2\">\n              <label className=\"text-sm font-medium\">Focus Category (Optional)</label>\n              <Select\n                value={selectedCategory || 'all'}\n                onValueChange={(value) => setSelectedCategory(value === 'all' ? '' : value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All categories</SelectItem>\n                  {categories.map((cat: any) => (\n                    <SelectItem key={cat.id} value={cat.name}>\n                      {cat.name} ({cat.termCount} terms)\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <Button onClick={generateSuggestions} disabled={isGenerating} className=\"flex-shrink-0\">\n              {isGenerating ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Generating...\n                </>\n              ) : hasGenerated ? (\n                <>\n                  <RefreshCw className=\"mr-2 h-4 w-4\" />\n                  Refresh\n                </>\n              ) : (\n                <>\n                  <Lightbulb className=\"mr-2 h-4 w-4\" />\n                  Generate Suggestions\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {hasGenerated && !isGenerating && suggestions.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Lightbulb className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n            <p className=\"text-gray-500\">No suggestions generated.</p>\n            <p className=\"text-sm text-gray-400 mt-1\">\n              Try adjusting the category filter or try again.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {suggestions.length > 0 && (\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold\">\n              Suggested Terms {selectedCategory && `for ${selectedCategory}`}\n            </h3>\n            <Badge variant=\"secondary\">\n              {suggestions.length} suggestion{suggestions.length !== 1 ? 's' : ''}\n            </Badge>\n          </div>\n\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {suggestions.map((suggestion, index) => (\n              <Card key={index} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{suggestion.term}</CardTitle>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {suggestion.category}\n                        </Badge>\n                      </div>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleSuggestionSelect(suggestion)}\n                      className=\"flex-shrink-0 ml-2\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-1\" />\n                      Select\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-3\">\n                    <div>\n                      <p className=\"text-sm text-gray-600 mb-2\">{suggestion.shortDefinition}</p>\n                    </div>\n\n                    <div className=\"bg-blue-50 p-3 rounded-md\">\n                      <p className=\"text-sm text-blue-800\">\n                        <span className=\"font-medium\">Why this term matters: </span>\n                        {suggestion.reason}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {suggestions.length > 0 && (\n        <Card className=\"border-dashed\">\n          <CardContent className=\"text-center py-6\">\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-gray-600\">Want to see more suggestions?</p>\n              <Button variant=\"outline\" onClick={generateSuggestions} disabled={isGenerating}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Generate New Suggestions\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/DragDropUploader.stories.tsx"},"span":[4886,4889],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport React from 'react';\nimport DragDropUploader from './DragDropUploader';\n\nconst meta: Meta<typeof DragDropUploader> = {\n  title: 'Components/DragDropUploader',\n  component: DragDropUploader,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'A comprehensive drag-and-drop file uploader with progress tracking, validation, and multiple file support.',\n      },\n    },\n  },\n  decorators: [\n    (Story) => (\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <Story />\n      </div>\n    ),\n  ],\n  args: {\n    acceptedTypes: ['.xlsx', '.xls', '.csv', '.json', '.txt'],\n    maxFileSize: 100 * 1024 * 1024, // 100MB\n    maxFiles: 10,\n    enableCompression: false,\n    showPreview: true,\n  },\n  argTypes: {\n    acceptedTypes: {\n      control: { type: 'object' },\n      description: 'Array of accepted file extensions',\n    },\n    maxFileSize: {\n      control: { type: 'number' },\n      description: 'Maximum file size in bytes',\n    },\n    maxFiles: {\n      control: { type: 'number' },\n      description: 'Maximum number of files allowed',\n    },\n    enableCompression: {\n      control: { type: 'boolean' },\n      description: 'Enable file compression during upload',\n    },\n    showPreview: {\n      control: { type: 'boolean' },\n      description: 'Show upload options and preview',\n    },\n    onUploadComplete: { action: 'upload-complete' },\n    onUploadError: { action: 'upload-error' },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {},\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Default drag-and-drop uploader with standard settings for Excel, CSV, and text files.',\n      },\n    },\n  },\n};\n\nexport const ImagesOnly: Story = {\n  args: {\n    acceptedTypes: ['.jpg', '.jpeg', '.png', '.gif', '.webp'],\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n    maxFiles: 5,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader configured for image files only with smaller size limit.',\n      },\n    },\n  },\n};\n\nexport const DocumentsOnly: Story = {\n  args: {\n    acceptedTypes: ['.pdf', '.doc', '.docx', '.txt', '.rtf'],\n    maxFileSize: 50 * 1024 * 1024, // 50MB\n    maxFiles: 20,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader configured for document files with higher file count limit.',\n      },\n    },\n  },\n};\n\nexport const SingleFileUpload: Story = {\n  args: {\n    acceptedTypes: ['.csv'],\n    maxFileSize: 25 * 1024 * 1024, // 25MB\n    maxFiles: 1,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Single file uploader for CSV files only.',\n      },\n    },\n  },\n};\n\nexport const WithCompression: Story = {\n  args: {\n    enableCompression: true,\n    maxFileSize: 500 * 1024 * 1024, // 500MB\n    acceptedTypes: ['.xlsx', '.xls', '.csv', '.json', '.xml', '.zip', '.gz'],\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader with compression enabled for larger files.',\n      },\n    },\n  },\n};\n\nexport const MinimalInterface: Story = {\n  args: {\n    showPreview: false,\n    maxFiles: 3,\n    acceptedTypes: ['.csv', '.json'],\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Minimal uploader interface without preview options.',\n      },\n    },\n  },\n};\n\nexport const LargeFileSupport: Story = {\n  args: {\n    maxFileSize: 1024 * 1024 * 1024, // 1GB\n    maxFiles: 5,\n    enableCompression: true,\n    acceptedTypes: ['.xlsx', '.csv', '.json', '.xml', '.zip', '.gz'],\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Configuration for handling large files up to 1GB with compression.',\n      },\n    },\n  },\n};\n\nexport const RestrictiveSettings: Story = {\n  args: {\n    maxFileSize: 1024 * 1024, // 1MB\n    maxFiles: 2,\n    acceptedTypes: ['.txt'],\n    enableCompression: false,\n    showPreview: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Very restrictive settings with small file size limit and minimal file types.',\n      },\n    },\n  },\n};\n\nexport const WithCallbacks: Story = {\n  args: {\n    onUploadComplete: (results) => {\n      console.log('Upload completed:', results);\n      alert(`Successfully uploaded ${results.length} file(s)!`);\n    },\n    onUploadError: (error) => {\n      console.error('Upload error:', error);\n      alert(`Upload failed: ${error}`);\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader with success and error callback handlers.',\n      },\n    },\n  },\n};\n\nexport const InteractiveDemo: Story = {\n  render: () => {\n    const [uploadResults, setUploadResults] = React.useState<any[]>([]);\n    const [uploadErrors, setUploadErrors] = React.useState<string[]>([]);\n\n    const handleUploadComplete = (results: any[]) => {\n      setUploadResults((prev) => [...prev, ...results]);\n      console.log('Upload completed:', results);\n    };\n\n    const handleUploadError = (error: string) => {\n      setUploadErrors((prev) => [...prev, error]);\n      console.error('Upload error:', error);\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        <DragDropUploader\n          onUploadComplete={handleUploadComplete}\n          onUploadError={handleUploadError}\n          acceptedTypes={['.xlsx', '.xls', '.csv', '.json', '.txt']}\n          maxFileSize={50 * 1024 * 1024} // 50MB\n          maxFiles={8}\n          enableCompression={true}\n          showPreview={true}\n        />\n\n        {/* Results Display */}\n        {uploadResults.length > 0 && (\n          <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n            <h3 className=\"font-semibold text-green-800 mb-2\">\n              Upload Results ({uploadResults.length})\n            </h3>\n            <div className=\"space-y-1\">\n              {uploadResults.map((_result, index) => (\n                <div key={index} className=\"text-sm text-green-700\">\n                  ✓ File {index + 1}: Upload successful\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Errors Display */}\n        {uploadErrors.length > 0 && (\n          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n            <h3 className=\"font-semibold text-red-800 mb-2\">\n              Upload Errors ({uploadErrors.length})\n            </h3>\n            <div className=\"space-y-1\">\n              {uploadErrors.map((error, index) => (\n                <div key={index} className=\"text-sm text-red-700\">\n                  ✗ Error {index + 1}: {error}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Reset Button */}\n        {(uploadResults.length > 0 || uploadErrors.length > 0) && (\n          <div className=\"text-center\">\n            <button\n              onClick={() => {\n                setUploadResults([]);\n                setUploadErrors([]);\n              }}\n              className=\"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\"\n            >\n              Clear Results\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive demo showing upload results and error handling in real-time.',\n      },\n    },\n  },\n};\n\nexport const AllFileTypes: Story = {\n  args: {\n    acceptedTypes: [\n      '.xlsx',\n      '.xls',\n      '.csv',\n      '.json',\n      '.xml',\n      '.txt',\n      '.rtf',\n      '.pdf',\n      '.doc',\n      '.docx',\n      '.jpg',\n      '.jpeg',\n      '.png',\n      '.gif',\n      '.webp',\n      '.svg',\n      '.zip',\n      '.gz',\n      '.tar',\n      '.rar',\n    ],\n    maxFileSize: 200 * 1024 * 1024, // 200MB\n    maxFiles: 15,\n    enableCompression: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'File uploader that accepts a wide variety of file types including documents, images, and archives.',\n      },\n    },\n  },\n};\n\nexport const ProductionConfig: Story = {\n  args: {\n    acceptedTypes: ['.xlsx', '.xls', '.csv'],\n    maxFileSize: 100 * 1024 * 1024, // 100MB\n    maxFiles: 10,\n    enableCompression: true,\n    showPreview: true,\n    onUploadComplete: (results) => {\n      console.log('Production upload completed:', results);\n      // In production, this would handle the uploaded files\n    },\n    onUploadError: (error) => {\n      console.error('Production upload error:', error);\n      // In production, this would handle error reporting\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Production-ready configuration with appropriate limits and error handling.',\n      },\n    },\n  },\n};\n\nexport const ErrorStates: Story = {\n  render: () => {\n    const [simulateError, setSimulateError] = React.useState(false);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center space-x-4\">\n          <label className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              checked={simulateError}\n              onChange={(e) => setSimulateError(e.target.checked)}\n            />\n            <span>Simulate upload errors</span>\n          </label>\n        </div>\n\n        <DragDropUploader\n          acceptedTypes={['.csv', '.json']}\n          maxFileSize={5 * 1024 * 1024} // 5MB - small to test size errors\n          maxFiles={3} // Small number to test max files error\n          onUploadComplete={(results) => {\n            if (simulateError) {\n              console.log('Simulated success despite error flag');\n            } else {\n              console.log('Upload completed:', results);\n            }\n          }}\n          onUploadError={(error) => {\n            console.error('Upload error:', error);\n          }}\n        />\n\n        <div className=\"text-sm text-gray-600 space-y-1\">\n          <p>\n            <strong>To test error states:</strong>\n          </p>\n          <ul className=\"list-disc list-inside space-y-1\">\n            <li>Try uploading files larger than 5MB (size limit error)</li>\n            <li>Try uploading more than 3 files (max files error)</li>\n            <li>Try uploading unsupported file types (type error)</li>\n            <li>Try uploading the same file twice (duplicate error)</li>\n            <li>Enable the checkbox above to simulate upload errors</li>\n          </ul>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstration of various error states and validation messages.',\n      },\n    },\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    acceptedTypes: ['.jpg', '.jpeg', '.png'],\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n    maxFiles: 5,\n    showPreview: false, // Simplified for mobile\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n    docs: {\n      description: {\n        story: 'Mobile-optimized configuration with image files and simplified interface.',\n      },\n    },\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    acceptedTypes: ['.xlsx', '.csv', '.json'],\n    maxFileSize: 50 * 1024 * 1024,\n    maxFiles: 8,\n    enableCompression: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n    docs: {\n      description: {\n        story: 'File uploader in dark mode theme.',\n      },\n    },\n  },\n  decorators: [\n    (Story) => (\n      <div className=\"p-6 max-w-4xl mx-auto dark\">\n        <Story />\n      </div>\n    ),\n  ],\n};\n\nexport const CustomizationExample: Story = {\n  render: () => {\n    const [config, setConfig] = React.useState({\n      maxFileSize: 25 * 1024 * 1024, // 25MB\n      maxFiles: 5,\n      enableCompression: false,\n      showPreview: true,\n      acceptedTypes: ['.csv', '.json', '.xlsx'],\n    });\n\n    const handleConfigChange = (key: string, value: any) => {\n      setConfig((prev) => ({ ...prev, [key]: value }));\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Configuration Panel */}\n        <div className=\"p-4 bg-gray-50 rounded-lg\">\n          <h3 className=\"font-semibold mb-4\">Uploader Configuration</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Max File Size (MB)</label>\n              <input\n                type=\"number\"\n                value={config.maxFileSize / (1024 * 1024)}\n                onChange={(e) =>\n                  handleConfigChange('maxFileSize', Number(e.target.value) * 1024 * 1024)\n                }\n                className=\"w-full px-3 py-2 border rounded\"\n                min=\"1\"\n                max=\"1000\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Max Files</label>\n              <input\n                type=\"number\"\n                value={config.maxFiles}\n                onChange={(e) => handleConfigChange('maxFiles', Number(e.target.value))}\n                className=\"w-full px-3 py-2 border rounded\"\n                min=\"1\"\n                max=\"50\"\n              />\n            </div>\n\n            <div>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={config.enableCompression}\n                  onChange={(e) => handleConfigChange('enableCompression', e.target.checked)}\n                />\n                <span className=\"text-sm\">Enable Compression</span>\n              </label>\n            </div>\n\n            <div>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={config.showPreview}\n                  onChange={(e) => handleConfigChange('showPreview', e.target.checked)}\n                />\n                <span className=\"text-sm\">Show Preview</span>\n              </label>\n            </div>\n          </div>\n        </div>\n\n        {/* Dynamic Uploader */}\n        <DragDropUploader\n          {...config}\n          onUploadComplete={(results) => console.log('Dynamic upload completed:', results)}\n          onUploadError={(error) => console.error('Dynamic upload error:', error)}\n        />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive example showing how to customize uploader settings dynamically.',\n      },\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/DragDropUploader.stories.tsx"},"span":[11856,11859],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport React from 'react';\nimport DragDropUploader from './DragDropUploader';\n\nconst meta: Meta<typeof DragDropUploader> = {\n  title: 'Components/DragDropUploader',\n  component: DragDropUploader,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'A comprehensive drag-and-drop file uploader with progress tracking, validation, and multiple file support.',\n      },\n    },\n  },\n  decorators: [\n    (Story) => (\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <Story />\n      </div>\n    ),\n  ],\n  args: {\n    acceptedTypes: ['.xlsx', '.xls', '.csv', '.json', '.txt'],\n    maxFileSize: 100 * 1024 * 1024, // 100MB\n    maxFiles: 10,\n    enableCompression: false,\n    showPreview: true,\n  },\n  argTypes: {\n    acceptedTypes: {\n      control: { type: 'object' },\n      description: 'Array of accepted file extensions',\n    },\n    maxFileSize: {\n      control: { type: 'number' },\n      description: 'Maximum file size in bytes',\n    },\n    maxFiles: {\n      control: { type: 'number' },\n      description: 'Maximum number of files allowed',\n    },\n    enableCompression: {\n      control: { type: 'boolean' },\n      description: 'Enable file compression during upload',\n    },\n    showPreview: {\n      control: { type: 'boolean' },\n      description: 'Show upload options and preview',\n    },\n    onUploadComplete: { action: 'upload-complete' },\n    onUploadError: { action: 'upload-error' },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {},\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Default drag-and-drop uploader with standard settings for Excel, CSV, and text files.',\n      },\n    },\n  },\n};\n\nexport const ImagesOnly: Story = {\n  args: {\n    acceptedTypes: ['.jpg', '.jpeg', '.png', '.gif', '.webp'],\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n    maxFiles: 5,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader configured for image files only with smaller size limit.',\n      },\n    },\n  },\n};\n\nexport const DocumentsOnly: Story = {\n  args: {\n    acceptedTypes: ['.pdf', '.doc', '.docx', '.txt', '.rtf'],\n    maxFileSize: 50 * 1024 * 1024, // 50MB\n    maxFiles: 20,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader configured for document files with higher file count limit.',\n      },\n    },\n  },\n};\n\nexport const SingleFileUpload: Story = {\n  args: {\n    acceptedTypes: ['.csv'],\n    maxFileSize: 25 * 1024 * 1024, // 25MB\n    maxFiles: 1,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Single file uploader for CSV files only.',\n      },\n    },\n  },\n};\n\nexport const WithCompression: Story = {\n  args: {\n    enableCompression: true,\n    maxFileSize: 500 * 1024 * 1024, // 500MB\n    acceptedTypes: ['.xlsx', '.xls', '.csv', '.json', '.xml', '.zip', '.gz'],\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader with compression enabled for larger files.',\n      },\n    },\n  },\n};\n\nexport const MinimalInterface: Story = {\n  args: {\n    showPreview: false,\n    maxFiles: 3,\n    acceptedTypes: ['.csv', '.json'],\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Minimal uploader interface without preview options.',\n      },\n    },\n  },\n};\n\nexport const LargeFileSupport: Story = {\n  args: {\n    maxFileSize: 1024 * 1024 * 1024, // 1GB\n    maxFiles: 5,\n    enableCompression: true,\n    acceptedTypes: ['.xlsx', '.csv', '.json', '.xml', '.zip', '.gz'],\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Configuration for handling large files up to 1GB with compression.',\n      },\n    },\n  },\n};\n\nexport const RestrictiveSettings: Story = {\n  args: {\n    maxFileSize: 1024 * 1024, // 1MB\n    maxFiles: 2,\n    acceptedTypes: ['.txt'],\n    enableCompression: false,\n    showPreview: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Very restrictive settings with small file size limit and minimal file types.',\n      },\n    },\n  },\n};\n\nexport const WithCallbacks: Story = {\n  args: {\n    onUploadComplete: (results) => {\n      console.log('Upload completed:', results);\n      alert(`Successfully uploaded ${results.length} file(s)!`);\n    },\n    onUploadError: (error) => {\n      console.error('Upload error:', error);\n      alert(`Upload failed: ${error}`);\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader with success and error callback handlers.',\n      },\n    },\n  },\n};\n\nexport const InteractiveDemo: Story = {\n  render: () => {\n    const [uploadResults, setUploadResults] = React.useState<any[]>([]);\n    const [uploadErrors, setUploadErrors] = React.useState<string[]>([]);\n\n    const handleUploadComplete = (results: any[]) => {\n      setUploadResults((prev) => [...prev, ...results]);\n      console.log('Upload completed:', results);\n    };\n\n    const handleUploadError = (error: string) => {\n      setUploadErrors((prev) => [...prev, error]);\n      console.error('Upload error:', error);\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        <DragDropUploader\n          onUploadComplete={handleUploadComplete}\n          onUploadError={handleUploadError}\n          acceptedTypes={['.xlsx', '.xls', '.csv', '.json', '.txt']}\n          maxFileSize={50 * 1024 * 1024} // 50MB\n          maxFiles={8}\n          enableCompression={true}\n          showPreview={true}\n        />\n\n        {/* Results Display */}\n        {uploadResults.length > 0 && (\n          <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n            <h3 className=\"font-semibold text-green-800 mb-2\">\n              Upload Results ({uploadResults.length})\n            </h3>\n            <div className=\"space-y-1\">\n              {uploadResults.map((_result, index) => (\n                <div key={index} className=\"text-sm text-green-700\">\n                  ✓ File {index + 1}: Upload successful\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Errors Display */}\n        {uploadErrors.length > 0 && (\n          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n            <h3 className=\"font-semibold text-red-800 mb-2\">\n              Upload Errors ({uploadErrors.length})\n            </h3>\n            <div className=\"space-y-1\">\n              {uploadErrors.map((error, index) => (\n                <div key={index} className=\"text-sm text-red-700\">\n                  ✗ Error {index + 1}: {error}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Reset Button */}\n        {(uploadResults.length > 0 || uploadErrors.length > 0) && (\n          <div className=\"text-center\">\n            <button\n              onClick={() => {\n                setUploadResults([]);\n                setUploadErrors([]);\n              }}\n              className=\"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\"\n            >\n              Clear Results\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive demo showing upload results and error handling in real-time.',\n      },\n    },\n  },\n};\n\nexport const AllFileTypes: Story = {\n  args: {\n    acceptedTypes: [\n      '.xlsx',\n      '.xls',\n      '.csv',\n      '.json',\n      '.xml',\n      '.txt',\n      '.rtf',\n      '.pdf',\n      '.doc',\n      '.docx',\n      '.jpg',\n      '.jpeg',\n      '.png',\n      '.gif',\n      '.webp',\n      '.svg',\n      '.zip',\n      '.gz',\n      '.tar',\n      '.rar',\n    ],\n    maxFileSize: 200 * 1024 * 1024, // 200MB\n    maxFiles: 15,\n    enableCompression: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'File uploader that accepts a wide variety of file types including documents, images, and archives.',\n      },\n    },\n  },\n};\n\nexport const ProductionConfig: Story = {\n  args: {\n    acceptedTypes: ['.xlsx', '.xls', '.csv'],\n    maxFileSize: 100 * 1024 * 1024, // 100MB\n    maxFiles: 10,\n    enableCompression: true,\n    showPreview: true,\n    onUploadComplete: (results) => {\n      console.log('Production upload completed:', results);\n      // In production, this would handle the uploaded files\n    },\n    onUploadError: (error) => {\n      console.error('Production upload error:', error);\n      // In production, this would handle error reporting\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Production-ready configuration with appropriate limits and error handling.',\n      },\n    },\n  },\n};\n\nexport const ErrorStates: Story = {\n  render: () => {\n    const [simulateError, setSimulateError] = React.useState(false);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center space-x-4\">\n          <label className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              checked={simulateError}\n              onChange={(e) => setSimulateError(e.target.checked)}\n            />\n            <span>Simulate upload errors</span>\n          </label>\n        </div>\n\n        <DragDropUploader\n          acceptedTypes={['.csv', '.json']}\n          maxFileSize={5 * 1024 * 1024} // 5MB - small to test size errors\n          maxFiles={3} // Small number to test max files error\n          onUploadComplete={(results) => {\n            if (simulateError) {\n              console.log('Simulated success despite error flag');\n            } else {\n              console.log('Upload completed:', results);\n            }\n          }}\n          onUploadError={(error) => {\n            console.error('Upload error:', error);\n          }}\n        />\n\n        <div className=\"text-sm text-gray-600 space-y-1\">\n          <p>\n            <strong>To test error states:</strong>\n          </p>\n          <ul className=\"list-disc list-inside space-y-1\">\n            <li>Try uploading files larger than 5MB (size limit error)</li>\n            <li>Try uploading more than 3 files (max files error)</li>\n            <li>Try uploading unsupported file types (type error)</li>\n            <li>Try uploading the same file twice (duplicate error)</li>\n            <li>Enable the checkbox above to simulate upload errors</li>\n          </ul>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstration of various error states and validation messages.',\n      },\n    },\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    acceptedTypes: ['.jpg', '.jpeg', '.png'],\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n    maxFiles: 5,\n    showPreview: false, // Simplified for mobile\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n    docs: {\n      description: {\n        story: 'Mobile-optimized configuration with image files and simplified interface.',\n      },\n    },\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    acceptedTypes: ['.xlsx', '.csv', '.json'],\n    maxFileSize: 50 * 1024 * 1024,\n    maxFiles: 8,\n    enableCompression: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n    docs: {\n      description: {\n        story: 'File uploader in dark mode theme.',\n      },\n    },\n  },\n  decorators: [\n    (Story) => (\n      <div className=\"p-6 max-w-4xl mx-auto dark\">\n        <Story />\n      </div>\n    ),\n  ],\n};\n\nexport const CustomizationExample: Story = {\n  render: () => {\n    const [config, setConfig] = React.useState({\n      maxFileSize: 25 * 1024 * 1024, // 25MB\n      maxFiles: 5,\n      enableCompression: false,\n      showPreview: true,\n      acceptedTypes: ['.csv', '.json', '.xlsx'],\n    });\n\n    const handleConfigChange = (key: string, value: any) => {\n      setConfig((prev) => ({ ...prev, [key]: value }));\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Configuration Panel */}\n        <div className=\"p-4 bg-gray-50 rounded-lg\">\n          <h3 className=\"font-semibold mb-4\">Uploader Configuration</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Max File Size (MB)</label>\n              <input\n                type=\"number\"\n                value={config.maxFileSize / (1024 * 1024)}\n                onChange={(e) =>\n                  handleConfigChange('maxFileSize', Number(e.target.value) * 1024 * 1024)\n                }\n                className=\"w-full px-3 py-2 border rounded\"\n                min=\"1\"\n                max=\"1000\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Max Files</label>\n              <input\n                type=\"number\"\n                value={config.maxFiles}\n                onChange={(e) => handleConfigChange('maxFiles', Number(e.target.value))}\n                className=\"w-full px-3 py-2 border rounded\"\n                min=\"1\"\n                max=\"50\"\n              />\n            </div>\n\n            <div>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={config.enableCompression}\n                  onChange={(e) => handleConfigChange('enableCompression', e.target.checked)}\n                />\n                <span className=\"text-sm\">Enable Compression</span>\n              </label>\n            </div>\n\n            <div>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={config.showPreview}\n                  onChange={(e) => handleConfigChange('showPreview', e.target.checked)}\n                />\n                <span className=\"text-sm\">Show Preview</span>\n              </label>\n            </div>\n          </div>\n        </div>\n\n        {/* Dynamic Uploader */}\n        <DragDropUploader\n          {...config}\n          onUploadComplete={(results) => console.log('Dynamic upload completed:', results)}\n          onUploadError={(error) => console.error('Dynamic upload error:', error)}\n        />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive example showing how to customize uploader settings dynamically.',\n      },\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/DragDropUploader.stories.tsx"},"span":[4756,4759],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport React from 'react';\nimport DragDropUploader from './DragDropUploader';\n\nconst meta: Meta<typeof DragDropUploader> = {\n  title: 'Components/DragDropUploader',\n  component: DragDropUploader,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'A comprehensive drag-and-drop file uploader with progress tracking, validation, and multiple file support.',\n      },\n    },\n  },\n  decorators: [\n    (Story) => (\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <Story />\n      </div>\n    ),\n  ],\n  args: {\n    acceptedTypes: ['.xlsx', '.xls', '.csv', '.json', '.txt'],\n    maxFileSize: 100 * 1024 * 1024, // 100MB\n    maxFiles: 10,\n    enableCompression: false,\n    showPreview: true,\n  },\n  argTypes: {\n    acceptedTypes: {\n      control: { type: 'object' },\n      description: 'Array of accepted file extensions',\n    },\n    maxFileSize: {\n      control: { type: 'number' },\n      description: 'Maximum file size in bytes',\n    },\n    maxFiles: {\n      control: { type: 'number' },\n      description: 'Maximum number of files allowed',\n    },\n    enableCompression: {\n      control: { type: 'boolean' },\n      description: 'Enable file compression during upload',\n    },\n    showPreview: {\n      control: { type: 'boolean' },\n      description: 'Show upload options and preview',\n    },\n    onUploadComplete: { action: 'upload-complete' },\n    onUploadError: { action: 'upload-error' },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {},\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Default drag-and-drop uploader with standard settings for Excel, CSV, and text files.',\n      },\n    },\n  },\n};\n\nexport const ImagesOnly: Story = {\n  args: {\n    acceptedTypes: ['.jpg', '.jpeg', '.png', '.gif', '.webp'],\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n    maxFiles: 5,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader configured for image files only with smaller size limit.',\n      },\n    },\n  },\n};\n\nexport const DocumentsOnly: Story = {\n  args: {\n    acceptedTypes: ['.pdf', '.doc', '.docx', '.txt', '.rtf'],\n    maxFileSize: 50 * 1024 * 1024, // 50MB\n    maxFiles: 20,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader configured for document files with higher file count limit.',\n      },\n    },\n  },\n};\n\nexport const SingleFileUpload: Story = {\n  args: {\n    acceptedTypes: ['.csv'],\n    maxFileSize: 25 * 1024 * 1024, // 25MB\n    maxFiles: 1,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Single file uploader for CSV files only.',\n      },\n    },\n  },\n};\n\nexport const WithCompression: Story = {\n  args: {\n    enableCompression: true,\n    maxFileSize: 500 * 1024 * 1024, // 500MB\n    acceptedTypes: ['.xlsx', '.xls', '.csv', '.json', '.xml', '.zip', '.gz'],\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader with compression enabled for larger files.',\n      },\n    },\n  },\n};\n\nexport const MinimalInterface: Story = {\n  args: {\n    showPreview: false,\n    maxFiles: 3,\n    acceptedTypes: ['.csv', '.json'],\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Minimal uploader interface without preview options.',\n      },\n    },\n  },\n};\n\nexport const LargeFileSupport: Story = {\n  args: {\n    maxFileSize: 1024 * 1024 * 1024, // 1GB\n    maxFiles: 5,\n    enableCompression: true,\n    acceptedTypes: ['.xlsx', '.csv', '.json', '.xml', '.zip', '.gz'],\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Configuration for handling large files up to 1GB with compression.',\n      },\n    },\n  },\n};\n\nexport const RestrictiveSettings: Story = {\n  args: {\n    maxFileSize: 1024 * 1024, // 1MB\n    maxFiles: 2,\n    acceptedTypes: ['.txt'],\n    enableCompression: false,\n    showPreview: false,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Very restrictive settings with small file size limit and minimal file types.',\n      },\n    },\n  },\n};\n\nexport const WithCallbacks: Story = {\n  args: {\n    onUploadComplete: (results) => {\n      console.log('Upload completed:', results);\n      alert(`Successfully uploaded ${results.length} file(s)!`);\n    },\n    onUploadError: (error) => {\n      console.error('Upload error:', error);\n      alert(`Upload failed: ${error}`);\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'File uploader with success and error callback handlers.',\n      },\n    },\n  },\n};\n\nexport const InteractiveDemo: Story = {\n  render: () => {\n    const [uploadResults, setUploadResults] = React.useState<any[]>([]);\n    const [uploadErrors, setUploadErrors] = React.useState<string[]>([]);\n\n    const handleUploadComplete = (results: any[]) => {\n      setUploadResults((prev) => [...prev, ...results]);\n      console.log('Upload completed:', results);\n    };\n\n    const handleUploadError = (error: string) => {\n      setUploadErrors((prev) => [...prev, error]);\n      console.error('Upload error:', error);\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        <DragDropUploader\n          onUploadComplete={handleUploadComplete}\n          onUploadError={handleUploadError}\n          acceptedTypes={['.xlsx', '.xls', '.csv', '.json', '.txt']}\n          maxFileSize={50 * 1024 * 1024} // 50MB\n          maxFiles={8}\n          enableCompression={true}\n          showPreview={true}\n        />\n\n        {/* Results Display */}\n        {uploadResults.length > 0 && (\n          <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n            <h3 className=\"font-semibold text-green-800 mb-2\">\n              Upload Results ({uploadResults.length})\n            </h3>\n            <div className=\"space-y-1\">\n              {uploadResults.map((_result, index) => (\n                <div key={index} className=\"text-sm text-green-700\">\n                  ✓ File {index + 1}: Upload successful\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Errors Display */}\n        {uploadErrors.length > 0 && (\n          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n            <h3 className=\"font-semibold text-red-800 mb-2\">\n              Upload Errors ({uploadErrors.length})\n            </h3>\n            <div className=\"space-y-1\">\n              {uploadErrors.map((error, index) => (\n                <div key={index} className=\"text-sm text-red-700\">\n                  ✗ Error {index + 1}: {error}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Reset Button */}\n        {(uploadResults.length > 0 || uploadErrors.length > 0) && (\n          <div className=\"text-center\">\n            <button\n              onClick={() => {\n                setUploadResults([]);\n                setUploadErrors([]);\n              }}\n              className=\"px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\"\n            >\n              Clear Results\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive demo showing upload results and error handling in real-time.',\n      },\n    },\n  },\n};\n\nexport const AllFileTypes: Story = {\n  args: {\n    acceptedTypes: [\n      '.xlsx',\n      '.xls',\n      '.csv',\n      '.json',\n      '.xml',\n      '.txt',\n      '.rtf',\n      '.pdf',\n      '.doc',\n      '.docx',\n      '.jpg',\n      '.jpeg',\n      '.png',\n      '.gif',\n      '.webp',\n      '.svg',\n      '.zip',\n      '.gz',\n      '.tar',\n      '.rar',\n    ],\n    maxFileSize: 200 * 1024 * 1024, // 200MB\n    maxFiles: 15,\n    enableCompression: true,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'File uploader that accepts a wide variety of file types including documents, images, and archives.',\n      },\n    },\n  },\n};\n\nexport const ProductionConfig: Story = {\n  args: {\n    acceptedTypes: ['.xlsx', '.xls', '.csv'],\n    maxFileSize: 100 * 1024 * 1024, // 100MB\n    maxFiles: 10,\n    enableCompression: true,\n    showPreview: true,\n    onUploadComplete: (results) => {\n      console.log('Production upload completed:', results);\n      // In production, this would handle the uploaded files\n    },\n    onUploadError: (error) => {\n      console.error('Production upload error:', error);\n      // In production, this would handle error reporting\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Production-ready configuration with appropriate limits and error handling.',\n      },\n    },\n  },\n};\n\nexport const ErrorStates: Story = {\n  render: () => {\n    const [simulateError, setSimulateError] = React.useState(false);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center space-x-4\">\n          <label className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              checked={simulateError}\n              onChange={(e) => setSimulateError(e.target.checked)}\n            />\n            <span>Simulate upload errors</span>\n          </label>\n        </div>\n\n        <DragDropUploader\n          acceptedTypes={['.csv', '.json']}\n          maxFileSize={5 * 1024 * 1024} // 5MB - small to test size errors\n          maxFiles={3} // Small number to test max files error\n          onUploadComplete={(results) => {\n            if (simulateError) {\n              console.log('Simulated success despite error flag');\n            } else {\n              console.log('Upload completed:', results);\n            }\n          }}\n          onUploadError={(error) => {\n            console.error('Upload error:', error);\n          }}\n        />\n\n        <div className=\"text-sm text-gray-600 space-y-1\">\n          <p>\n            <strong>To test error states:</strong>\n          </p>\n          <ul className=\"list-disc list-inside space-y-1\">\n            <li>Try uploading files larger than 5MB (size limit error)</li>\n            <li>Try uploading more than 3 files (max files error)</li>\n            <li>Try uploading unsupported file types (type error)</li>\n            <li>Try uploading the same file twice (duplicate error)</li>\n            <li>Enable the checkbox above to simulate upload errors</li>\n          </ul>\n        </div>\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstration of various error states and validation messages.',\n      },\n    },\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    acceptedTypes: ['.jpg', '.jpeg', '.png'],\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n    maxFiles: 5,\n    showPreview: false, // Simplified for mobile\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n    docs: {\n      description: {\n        story: 'Mobile-optimized configuration with image files and simplified interface.',\n      },\n    },\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    acceptedTypes: ['.xlsx', '.csv', '.json'],\n    maxFileSize: 50 * 1024 * 1024,\n    maxFiles: 8,\n    enableCompression: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dark',\n    },\n    docs: {\n      description: {\n        story: 'File uploader in dark mode theme.',\n      },\n    },\n  },\n  decorators: [\n    (Story) => (\n      <div className=\"p-6 max-w-4xl mx-auto dark\">\n        <Story />\n      </div>\n    ),\n  ],\n};\n\nexport const CustomizationExample: Story = {\n  render: () => {\n    const [config, setConfig] = React.useState({\n      maxFileSize: 25 * 1024 * 1024, // 25MB\n      maxFiles: 5,\n      enableCompression: false,\n      showPreview: true,\n      acceptedTypes: ['.csv', '.json', '.xlsx'],\n    });\n\n    const handleConfigChange = (key: string, value: any) => {\n      setConfig((prev) => ({ ...prev, [key]: value }));\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Configuration Panel */}\n        <div className=\"p-4 bg-gray-50 rounded-lg\">\n          <h3 className=\"font-semibold mb-4\">Uploader Configuration</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Max File Size (MB)</label>\n              <input\n                type=\"number\"\n                value={config.maxFileSize / (1024 * 1024)}\n                onChange={(e) =>\n                  handleConfigChange('maxFileSize', Number(e.target.value) * 1024 * 1024)\n                }\n                className=\"w-full px-3 py-2 border rounded\"\n                min=\"1\"\n                max=\"1000\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Max Files</label>\n              <input\n                type=\"number\"\n                value={config.maxFiles}\n                onChange={(e) => handleConfigChange('maxFiles', Number(e.target.value))}\n                className=\"w-full px-3 py-2 border rounded\"\n                min=\"1\"\n                max=\"50\"\n              />\n            </div>\n\n            <div>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={config.enableCompression}\n                  onChange={(e) => handleConfigChange('enableCompression', e.target.checked)}\n                />\n                <span className=\"text-sm\">Enable Compression</span>\n              </label>\n            </div>\n\n            <div>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={config.showPreview}\n                  onChange={(e) => handleConfigChange('showPreview', e.target.checked)}\n                />\n                <span className=\"text-sm\">Show Preview</span>\n              </label>\n            </div>\n          </div>\n        </div>\n\n        {/* Dynamic Uploader */}\n        <DragDropUploader\n          {...config}\n          onUploadComplete={(results) => console.log('Dynamic upload completed:', results)}\n          onUploadError={(error) => console.error('Dynamic upload error:', error)}\n        />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Interactive example showing how to customize uploader settings dynamically.',\n      },\n    },\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/DragDropUploader.tsx"},"span":[789,792],"sourceCode":"import {\n  AlertTriangle,\n  Archive,\n  Check,\n  FileSpreadsheet,\n  FileText,\n  Loader2,\n  Upload,\n  X,\n} from 'lucide-react';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { useLiveRegion } from '@/components/accessibility/LiveRegion';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { cn } from '@/lib/utils';\nimport type { BaseComponentProps } from '@/types/common-props';\n\ninterface FileUpload {\n  id: string;\n  file: File;\n  status: 'pending' | 'uploading' | 'completed' | 'error';\n  progress: number;\n  error?: string;\n  result?: any;\n}\n\ninterface DragDropUploaderProps extends BaseComponentProps {\n  onUploadComplete?: (results: any[]) => void;\n  onUploadError?: (error: string) => void;\n  acceptedTypes?: string[];\n  maxFileSize?: number; // in bytes\n  maxFiles?: number;\n  enableCompression?: boolean;\n  showPreview?: boolean;\n}\n\nexport default function DragDropUploader({\n  onUploadComplete,\n  onUploadError,\n  acceptedTypes = ['.xlsx', '.xls', '.csv', '.json', '.txt'],\n  maxFileSize = 100 * 1024 * 1024, // 100MB\n  maxFiles = 10,\n  enableCompression = false,\n  showPreview = true,\n  className,\n  id,\n  children,\n}: DragDropUploaderProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { announce } = useLiveRegion();\n  const prevErrorRef = useRef<string | null>(null);\n\n  // Generate unique ID for files\n  const generateId = () => Math.random().toString(36).substr(2, 9);\n\n  // Announce error changes to screen readers\n  React.useEffect(() => {\n    if (error && error !== prevErrorRef.current) {\n      const errorCount = error.split('\\n').length;\n      announce(`File upload errors: ${errorCount} validation issues found`, 'assertive');\n      prevErrorRef.current = error;\n    } else if (!error && prevErrorRef.current) {\n      prevErrorRef.current = null;\n    }\n  }, [error, announce]);\n\n  // Validate file\n  const validateFile = useCallback(\n    (file: File): string | null => {\n      // Check file size\n      if (file.size > maxFileSize) {\n        return `File size exceeds maximum allowed size (${Math.round(maxFileSize / (1024 * 1024))}MB)`;\n      }\n\n      // Check file type\n      const fileExtension = `.${file.name.split('.').pop()?.toLowerCase()}`;\n      if (!acceptedTypes.includes(fileExtension)) {\n        return `File type not supported. Allowed types: ${acceptedTypes.join(', ')}`;\n      }\n\n      // Check for suspicious file names\n      const suspiciousPatterns = [\n        /\\.(exe|bat|cmd|scr|pif|vbs|js)$/i,\n        /^\\./, // Hidden files\n        /[<>:\"|?*]/, // Invalid characters\n      ];\n\n      for (const pattern of suspiciousPatterns) {\n        if (pattern.test(file.name)) {\n          return 'File name contains invalid or suspicious characters';\n        }\n      }\n\n      return null;\n    },\n    [acceptedTypes, maxFileSize]\n  );\n\n  // Handle file selection\n  const handleFiles = useCallback(\n    (fileList: FileList | File[]) => {\n      const newFiles: FileUpload[] = [];\n      const errors: string[] = [];\n\n      // Convert FileList to Array\n      const filesArray = Array.from(fileList);\n\n      // Check max files limit\n      if (files.length + filesArray.length > maxFiles) {\n        setError(`Maximum ${maxFiles} files allowed. Please remove some files before adding more.`);\n        return;\n      }\n\n      filesArray.forEach((file) => {\n        const validationError = validateFile(file);\n\n        if (validationError) {\n          errors.push(`${file.name}: ${validationError}`);\n        } else {\n          // Check for duplicates\n          const isDuplicate = files.some(\n            (f) => f.file.name === file.name && f.file.size === file.size\n          );\n          if (!isDuplicate) {\n            newFiles.push({\n              id: generateId(),\n              file,\n              status: 'pending',\n              progress: 0,\n            });\n          } else {\n            errors.push(`${file.name}: Duplicate file`);\n          }\n        }\n      });\n\n      if (errors.length > 0) {\n        const errorMessage = errors.join('\\n');\n        setError(errorMessage);\n        // Announce file validation errors\n        announce(`File validation errors: ${errors.length} files have issues`, 'assertive');\n      } else {\n        setError(null);\n      }\n\n      if (newFiles.length > 0) {\n        setFiles((prev) => [...prev, ...newFiles]);\n      }\n    },\n    [\n      files,\n      maxFiles,\n      validateFile, // Announce file validation errors\n      announce,\n      generateId,\n    ]\n  );\n\n  // Drag and drop handlers\n  const handleDragEnter = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsDragOver(false);\n\n      const droppedFiles = e.dataTransfer.files;\n      if (droppedFiles.length > 0) {\n        handleFiles(droppedFiles);\n      }\n    },\n    [handleFiles]\n  );\n\n  // File input change handler\n  const handleFileInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files) {\n        handleFiles(e.target.files);\n      }\n    },\n    [handleFiles]\n  );\n\n  // Remove file\n  const removeFile = useCallback((id: string) => {\n    setFiles((prev) => prev.filter((f) => f.id !== id));\n  }, []);\n\n  // Clear all files\n  const clearFiles = useCallback(() => {\n    setFiles([]);\n    setError(null);\n  }, []);\n\n  // Upload files\n  const uploadFiles = useCallback(async () => {\n    if (files.length === 0) return;\n\n    setUploading(true);\n    setError(null);\n\n    const uploadPromises = files\n      .filter((f) => f.status === 'pending')\n      .map(async (fileUpload) => {\n        try {\n          // Update status to uploading\n          setFiles((prev) =>\n            prev.map((f) =>\n              f.id === fileUpload.id ? { ...f, status: 'uploading', progress: 0 } : f\n            )\n          );\n\n          const formData = new FormData();\n          formData.append('file', fileUpload.file);\n\n          if (enableCompression) {\n            formData.append('compress', 'true');\n          }\n\n          // Create XMLHttpRequest for progress tracking\n          const xhr = new XMLHttpRequest();\n\n          return new Promise((resolve, reject) => {\n            xhr.upload.addEventListener('progress', (e) => {\n              if (e.lengthComputable) {\n                const progress = Math.round((e.loaded / e.total) * 100);\n                setFiles((prev) =>\n                  prev.map((f) => (f.id === fileUpload.id ? { ...f, progress } : f))\n                );\n              }\n            });\n\n            xhr.addEventListener('load', () => {\n              if (xhr.status === 200) {\n                try {\n                  const result = JSON.parse(xhr.responseText);\n                  setFiles((prev) =>\n                    prev.map((f) =>\n                      f.id === fileUpload.id\n                        ? { ...f, status: 'completed', progress: 100, result }\n                        : f\n                    )\n                  );\n                  resolve(result);\n                } catch (_e) {\n                  const error = 'Failed to parse response';\n                  setFiles((prev) =>\n                    prev.map((f) => (f.id === fileUpload.id ? { ...f, status: 'error', error } : f))\n                  );\n                  reject(new Error(error));\n                }\n              } else {\n                const error = `Upload failed with status ${xhr.status}`;\n                setFiles((prev) =>\n                  prev.map((f) => (f.id === fileUpload.id ? { ...f, status: 'error', error } : f))\n                );\n                reject(new Error(error));\n              }\n            });\n\n            xhr.addEventListener('error', () => {\n              const error = 'Network error during upload';\n              setFiles((prev) =>\n                prev.map((f) => (f.id === fileUpload.id ? { ...f, status: 'error', error } : f))\n              );\n              reject(new Error(error));\n            });\n\n            xhr.open('POST', '/api/s3/upload');\n            xhr.send(formData);\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n          setFiles((prev) =>\n            prev.map((f) =>\n              f.id === fileUpload.id ? { ...f, status: 'error', error: errorMessage } : f\n            )\n          );\n          throw error;\n        }\n      });\n\n    try {\n      const results = await Promise.allSettled(uploadPromises);\n      const successfulResults = results\n        .filter((r) => r.status === 'fulfilled')\n        .map((r) => (r as PromiseFulfilledResult<any>).value);\n\n      const failedUploads = results.filter((r) => r.status === 'rejected');\n\n      if (failedUploads.length > 0) {\n        const errorMessages = failedUploads.map((r) => (r as PromiseRejectedResult).reason.message);\n        setError(`Some uploads failed: ${errorMessages.join(', ')}`);\n\n        if (onUploadError) {\n          onUploadError(errorMessages.join(', '));\n        }\n      }\n\n      if (successfulResults.length > 0 && onUploadComplete) {\n        onUploadComplete(successfulResults);\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n      setError(errorMessage);\n\n      if (onUploadError) {\n        onUploadError(errorMessage);\n      }\n    } finally {\n      setUploading(false);\n    }\n  }, [files, enableCompression, onUploadComplete, onUploadError]);\n\n  // Get file icon\n  const getFileIcon = useCallback((fileName: string) => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    switch (extension) {\n      case 'xlsx':\n      case 'xls':\n        return <FileSpreadsheet className=\"h-5 w-5 text-green-500\" />;\n      case 'csv':\n        return <FileSpreadsheet className=\"h-5 w-5 text-blue-500\" />;\n      case 'json':\n        return <FileText className=\"h-5 w-5 text-yellow-500\" />;\n      case 'txt':\n        return <FileText className=\"h-5 w-5 text-gray-500\" />;\n      case 'gz':\n      case 'zip':\n        return <Archive className=\"h-5 w-5 text-purple-500\" />;\n      default:\n        return <FileText className=\"h-5 w-5 text-gray-400\" />;\n    }\n  }, []);\n\n  // Format file size\n  const formatFileSize = useCallback((bytes: number) => {\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    if (bytes < 1024 * 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;\n  }, []);\n\n  // Get status badge\n  const getStatusBadge = useCallback((status: FileUpload['status']) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"secondary\">Pending</Badge>;\n      case 'uploading':\n        return (\n          <Badge variant=\"outline\">\n            <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n            Uploading\n          </Badge>\n        );\n      case 'completed':\n        return (\n          <Badge variant=\"outline\" className=\"text-green-600\">\n            <Check className=\"h-3 w-3 mr-1\" />\n            Complete\n          </Badge>\n        );\n      case 'error':\n        return (\n          <Badge variant=\"destructive\">\n            <AlertTriangle className=\"h-3 w-3 mr-1\" />\n            Error\n          </Badge>\n        );\n      default:\n        return null;\n    }\n  }, []);\n\n  const pendingFiles = files.filter((f) => f.status === 'pending');\n  const uploadingFiles = files.filter((f) => f.status === 'uploading');\n  const completedFiles = files.filter((f) => f.status === 'completed');\n  const errorFiles = files.filter((f) => f.status === 'error');\n\n  return (\n    <div id={id} className={cn('space-y-4', className)}>\n      {/* Drop Zone */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div\n            onDragEnter={handleDragEnter}\n            onDragLeave={handleDragLeave}\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n            className={`\n              border-2 border-dashed rounded-lg p-8 text-center transition-all\n              ${\n                isDragOver ? 'border-primary bg-primary/5' : 'border-gray-300 hover:border-gray-400'\n              }\n            `}\n          >\n            <Upload\n              className={`h-12 w-12 mx-auto mb-4 ${isDragOver ? 'text-primary' : 'text-gray-400'}`}\n            />\n            <h3 className=\"text-lg font-medium mb-2\">\n              {isDragOver ? 'Drop files here' : 'Drag and drop files here'}\n            </h3>\n            <p className=\"text-sm text-gray-500 mb-4\">or click to browse files</p>\n            <p className=\"text-xs text-gray-400 mb-4\">\n              Supported formats: {acceptedTypes.join(', ')} • Max size:{' '}\n              {Math.round(maxFileSize / (1024 * 1024))}MB • Max files: {maxFiles}\n            </p>\n\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              multiple\n              accept={acceptedTypes.join(',')}\n              onChange={handleFileInputChange}\n              className=\"hidden\"\n            />\n\n            <Button\n              onClick={() => fileInputRef.current?.click()}\n              variant=\"outline\"\n              disabled={uploading}\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Select Files\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert variant=\"destructive\" role=\"alert\" aria-live=\"polite\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription className=\"whitespace-pre-line\">{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* File List */}\n      {files.length > 0 && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-medium\">Files ({files.length})</h3>\n              <div className=\"flex space-x-2\">\n                {pendingFiles.length > 0 && (\n                  <Button onClick={uploadFiles} disabled={uploading} size=\"sm\">\n                    {uploading ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Uploading...\n                      </>\n                    ) : (\n                      <>\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        Upload All\n                      </>\n                    )}\n                  </Button>\n                )}\n                <Button onClick={clearFiles} variant=\"outline\" size=\"sm\" disabled={uploading}>\n                  Clear All\n                </Button>\n              </div>\n            </div>\n\n            {/* Summary */}\n            <div className=\"grid grid-cols-4 gap-4 mb-4 text-center\">\n              <div className=\"p-2 bg-gray-50 rounded\">\n                <div className=\"text-lg font-bold\">{pendingFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Pending</div>\n              </div>\n              <div className=\"p-2 bg-blue-50 rounded\">\n                <div className=\"text-lg font-bold\">{uploadingFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Uploading</div>\n              </div>\n              <div className=\"p-2 bg-green-50 rounded\">\n                <div className=\"text-lg font-bold\">{completedFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Completed</div>\n              </div>\n              <div className=\"p-2 bg-red-50 rounded\">\n                <div className=\"text-lg font-bold\">{errorFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Errors</div>\n              </div>\n            </div>\n\n            {/* File Items */}\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {files.map((fileUpload) => (\n                <div\n                  key={fileUpload.id}\n                  className=\"flex items-center space-x-3 p-3 border rounded-lg\"\n                >\n                  {getFileIcon(fileUpload.file.name)}\n\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <p className=\"text-sm font-medium truncate\">{fileUpload.file.name}</p>\n                      {getStatusBadge(fileUpload.status)}\n                    </div>\n\n                    <div className=\"flex items-center justify-between mt-1\">\n                      <p className=\"text-xs text-gray-500\">\n                        {formatFileSize(fileUpload.file.size)}\n                      </p>\n\n                      {fileUpload.status === 'uploading' && (\n                        <span className=\"text-xs text-gray-500\">{fileUpload.progress}%</span>\n                      )}\n                    </div>\n\n                    {/* Progress Bar */}\n                    {fileUpload.status === 'uploading' && (\n                      <Progress value={fileUpload.progress} className=\"mt-1 h-1\" />\n                    )}\n\n                    {/* Error Message */}\n                    {fileUpload.status === 'error' && fileUpload.error && (\n                      <p className=\"text-xs text-red-600 mt-1\">{fileUpload.error}</p>\n                    )}\n                  </div>\n\n                  {/* Remove Button */}\n                  <Button\n                    onClick={() => removeFile(fileUpload.id)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    disabled={uploading && fileUpload.status === 'uploading'}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Upload Options */}\n      {showPreview && files.length > 0 && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-medium mb-4\">Upload Options</h3>\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={enableCompression}\n                  onChange={(_e) => {\n                    // This would need to be passed from parent component\n                    // or managed in state if compression is toggleable\n                  }}\n                  disabled={uploading}\n                />\n                <span className=\"text-sm\">Enable compression for large files</span>\n              </label>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      {children}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/DragDropUploader.tsx"},"span":[889,892],"sourceCode":"import {\n  AlertTriangle,\n  Archive,\n  Check,\n  FileSpreadsheet,\n  FileText,\n  Loader2,\n  Upload,\n  X,\n} from 'lucide-react';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { useLiveRegion } from '@/components/accessibility/LiveRegion';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { cn } from '@/lib/utils';\nimport type { BaseComponentProps } from '@/types/common-props';\n\ninterface FileUpload {\n  id: string;\n  file: File;\n  status: 'pending' | 'uploading' | 'completed' | 'error';\n  progress: number;\n  error?: string;\n  result?: any;\n}\n\ninterface DragDropUploaderProps extends BaseComponentProps {\n  onUploadComplete?: (results: any[]) => void;\n  onUploadError?: (error: string) => void;\n  acceptedTypes?: string[];\n  maxFileSize?: number; // in bytes\n  maxFiles?: number;\n  enableCompression?: boolean;\n  showPreview?: boolean;\n}\n\nexport default function DragDropUploader({\n  onUploadComplete,\n  onUploadError,\n  acceptedTypes = ['.xlsx', '.xls', '.csv', '.json', '.txt'],\n  maxFileSize = 100 * 1024 * 1024, // 100MB\n  maxFiles = 10,\n  enableCompression = false,\n  showPreview = true,\n  className,\n  id,\n  children,\n}: DragDropUploaderProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { announce } = useLiveRegion();\n  const prevErrorRef = useRef<string | null>(null);\n\n  // Generate unique ID for files\n  const generateId = () => Math.random().toString(36).substr(2, 9);\n\n  // Announce error changes to screen readers\n  React.useEffect(() => {\n    if (error && error !== prevErrorRef.current) {\n      const errorCount = error.split('\\n').length;\n      announce(`File upload errors: ${errorCount} validation issues found`, 'assertive');\n      prevErrorRef.current = error;\n    } else if (!error && prevErrorRef.current) {\n      prevErrorRef.current = null;\n    }\n  }, [error, announce]);\n\n  // Validate file\n  const validateFile = useCallback(\n    (file: File): string | null => {\n      // Check file size\n      if (file.size > maxFileSize) {\n        return `File size exceeds maximum allowed size (${Math.round(maxFileSize / (1024 * 1024))}MB)`;\n      }\n\n      // Check file type\n      const fileExtension = `.${file.name.split('.').pop()?.toLowerCase()}`;\n      if (!acceptedTypes.includes(fileExtension)) {\n        return `File type not supported. Allowed types: ${acceptedTypes.join(', ')}`;\n      }\n\n      // Check for suspicious file names\n      const suspiciousPatterns = [\n        /\\.(exe|bat|cmd|scr|pif|vbs|js)$/i,\n        /^\\./, // Hidden files\n        /[<>:\"|?*]/, // Invalid characters\n      ];\n\n      for (const pattern of suspiciousPatterns) {\n        if (pattern.test(file.name)) {\n          return 'File name contains invalid or suspicious characters';\n        }\n      }\n\n      return null;\n    },\n    [acceptedTypes, maxFileSize]\n  );\n\n  // Handle file selection\n  const handleFiles = useCallback(\n    (fileList: FileList | File[]) => {\n      const newFiles: FileUpload[] = [];\n      const errors: string[] = [];\n\n      // Convert FileList to Array\n      const filesArray = Array.from(fileList);\n\n      // Check max files limit\n      if (files.length + filesArray.length > maxFiles) {\n        setError(`Maximum ${maxFiles} files allowed. Please remove some files before adding more.`);\n        return;\n      }\n\n      filesArray.forEach((file) => {\n        const validationError = validateFile(file);\n\n        if (validationError) {\n          errors.push(`${file.name}: ${validationError}`);\n        } else {\n          // Check for duplicates\n          const isDuplicate = files.some(\n            (f) => f.file.name === file.name && f.file.size === file.size\n          );\n          if (!isDuplicate) {\n            newFiles.push({\n              id: generateId(),\n              file,\n              status: 'pending',\n              progress: 0,\n            });\n          } else {\n            errors.push(`${file.name}: Duplicate file`);\n          }\n        }\n      });\n\n      if (errors.length > 0) {\n        const errorMessage = errors.join('\\n');\n        setError(errorMessage);\n        // Announce file validation errors\n        announce(`File validation errors: ${errors.length} files have issues`, 'assertive');\n      } else {\n        setError(null);\n      }\n\n      if (newFiles.length > 0) {\n        setFiles((prev) => [...prev, ...newFiles]);\n      }\n    },\n    [\n      files,\n      maxFiles,\n      validateFile, // Announce file validation errors\n      announce,\n      generateId,\n    ]\n  );\n\n  // Drag and drop handlers\n  const handleDragEnter = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsDragOver(false);\n\n      const droppedFiles = e.dataTransfer.files;\n      if (droppedFiles.length > 0) {\n        handleFiles(droppedFiles);\n      }\n    },\n    [handleFiles]\n  );\n\n  // File input change handler\n  const handleFileInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files) {\n        handleFiles(e.target.files);\n      }\n    },\n    [handleFiles]\n  );\n\n  // Remove file\n  const removeFile = useCallback((id: string) => {\n    setFiles((prev) => prev.filter((f) => f.id !== id));\n  }, []);\n\n  // Clear all files\n  const clearFiles = useCallback(() => {\n    setFiles([]);\n    setError(null);\n  }, []);\n\n  // Upload files\n  const uploadFiles = useCallback(async () => {\n    if (files.length === 0) return;\n\n    setUploading(true);\n    setError(null);\n\n    const uploadPromises = files\n      .filter((f) => f.status === 'pending')\n      .map(async (fileUpload) => {\n        try {\n          // Update status to uploading\n          setFiles((prev) =>\n            prev.map((f) =>\n              f.id === fileUpload.id ? { ...f, status: 'uploading', progress: 0 } : f\n            )\n          );\n\n          const formData = new FormData();\n          formData.append('file', fileUpload.file);\n\n          if (enableCompression) {\n            formData.append('compress', 'true');\n          }\n\n          // Create XMLHttpRequest for progress tracking\n          const xhr = new XMLHttpRequest();\n\n          return new Promise((resolve, reject) => {\n            xhr.upload.addEventListener('progress', (e) => {\n              if (e.lengthComputable) {\n                const progress = Math.round((e.loaded / e.total) * 100);\n                setFiles((prev) =>\n                  prev.map((f) => (f.id === fileUpload.id ? { ...f, progress } : f))\n                );\n              }\n            });\n\n            xhr.addEventListener('load', () => {\n              if (xhr.status === 200) {\n                try {\n                  const result = JSON.parse(xhr.responseText);\n                  setFiles((prev) =>\n                    prev.map((f) =>\n                      f.id === fileUpload.id\n                        ? { ...f, status: 'completed', progress: 100, result }\n                        : f\n                    )\n                  );\n                  resolve(result);\n                } catch (_e) {\n                  const error = 'Failed to parse response';\n                  setFiles((prev) =>\n                    prev.map((f) => (f.id === fileUpload.id ? { ...f, status: 'error', error } : f))\n                  );\n                  reject(new Error(error));\n                }\n              } else {\n                const error = `Upload failed with status ${xhr.status}`;\n                setFiles((prev) =>\n                  prev.map((f) => (f.id === fileUpload.id ? { ...f, status: 'error', error } : f))\n                );\n                reject(new Error(error));\n              }\n            });\n\n            xhr.addEventListener('error', () => {\n              const error = 'Network error during upload';\n              setFiles((prev) =>\n                prev.map((f) => (f.id === fileUpload.id ? { ...f, status: 'error', error } : f))\n              );\n              reject(new Error(error));\n            });\n\n            xhr.open('POST', '/api/s3/upload');\n            xhr.send(formData);\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n          setFiles((prev) =>\n            prev.map((f) =>\n              f.id === fileUpload.id ? { ...f, status: 'error', error: errorMessage } : f\n            )\n          );\n          throw error;\n        }\n      });\n\n    try {\n      const results = await Promise.allSettled(uploadPromises);\n      const successfulResults = results\n        .filter((r) => r.status === 'fulfilled')\n        .map((r) => (r as PromiseFulfilledResult<any>).value);\n\n      const failedUploads = results.filter((r) => r.status === 'rejected');\n\n      if (failedUploads.length > 0) {\n        const errorMessages = failedUploads.map((r) => (r as PromiseRejectedResult).reason.message);\n        setError(`Some uploads failed: ${errorMessages.join(', ')}`);\n\n        if (onUploadError) {\n          onUploadError(errorMessages.join(', '));\n        }\n      }\n\n      if (successfulResults.length > 0 && onUploadComplete) {\n        onUploadComplete(successfulResults);\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n      setError(errorMessage);\n\n      if (onUploadError) {\n        onUploadError(errorMessage);\n      }\n    } finally {\n      setUploading(false);\n    }\n  }, [files, enableCompression, onUploadComplete, onUploadError]);\n\n  // Get file icon\n  const getFileIcon = useCallback((fileName: string) => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    switch (extension) {\n      case 'xlsx':\n      case 'xls':\n        return <FileSpreadsheet className=\"h-5 w-5 text-green-500\" />;\n      case 'csv':\n        return <FileSpreadsheet className=\"h-5 w-5 text-blue-500\" />;\n      case 'json':\n        return <FileText className=\"h-5 w-5 text-yellow-500\" />;\n      case 'txt':\n        return <FileText className=\"h-5 w-5 text-gray-500\" />;\n      case 'gz':\n      case 'zip':\n        return <Archive className=\"h-5 w-5 text-purple-500\" />;\n      default:\n        return <FileText className=\"h-5 w-5 text-gray-400\" />;\n    }\n  }, []);\n\n  // Format file size\n  const formatFileSize = useCallback((bytes: number) => {\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    if (bytes < 1024 * 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;\n  }, []);\n\n  // Get status badge\n  const getStatusBadge = useCallback((status: FileUpload['status']) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"secondary\">Pending</Badge>;\n      case 'uploading':\n        return (\n          <Badge variant=\"outline\">\n            <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n            Uploading\n          </Badge>\n        );\n      case 'completed':\n        return (\n          <Badge variant=\"outline\" className=\"text-green-600\">\n            <Check className=\"h-3 w-3 mr-1\" />\n            Complete\n          </Badge>\n        );\n      case 'error':\n        return (\n          <Badge variant=\"destructive\">\n            <AlertTriangle className=\"h-3 w-3 mr-1\" />\n            Error\n          </Badge>\n        );\n      default:\n        return null;\n    }\n  }, []);\n\n  const pendingFiles = files.filter((f) => f.status === 'pending');\n  const uploadingFiles = files.filter((f) => f.status === 'uploading');\n  const completedFiles = files.filter((f) => f.status === 'completed');\n  const errorFiles = files.filter((f) => f.status === 'error');\n\n  return (\n    <div id={id} className={cn('space-y-4', className)}>\n      {/* Drop Zone */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div\n            onDragEnter={handleDragEnter}\n            onDragLeave={handleDragLeave}\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n            className={`\n              border-2 border-dashed rounded-lg p-8 text-center transition-all\n              ${\n                isDragOver ? 'border-primary bg-primary/5' : 'border-gray-300 hover:border-gray-400'\n              }\n            `}\n          >\n            <Upload\n              className={`h-12 w-12 mx-auto mb-4 ${isDragOver ? 'text-primary' : 'text-gray-400'}`}\n            />\n            <h3 className=\"text-lg font-medium mb-2\">\n              {isDragOver ? 'Drop files here' : 'Drag and drop files here'}\n            </h3>\n            <p className=\"text-sm text-gray-500 mb-4\">or click to browse files</p>\n            <p className=\"text-xs text-gray-400 mb-4\">\n              Supported formats: {acceptedTypes.join(', ')} • Max size:{' '}\n              {Math.round(maxFileSize / (1024 * 1024))}MB • Max files: {maxFiles}\n            </p>\n\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              multiple\n              accept={acceptedTypes.join(',')}\n              onChange={handleFileInputChange}\n              className=\"hidden\"\n            />\n\n            <Button\n              onClick={() => fileInputRef.current?.click()}\n              variant=\"outline\"\n              disabled={uploading}\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Select Files\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert variant=\"destructive\" role=\"alert\" aria-live=\"polite\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription className=\"whitespace-pre-line\">{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* File List */}\n      {files.length > 0 && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-medium\">Files ({files.length})</h3>\n              <div className=\"flex space-x-2\">\n                {pendingFiles.length > 0 && (\n                  <Button onClick={uploadFiles} disabled={uploading} size=\"sm\">\n                    {uploading ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Uploading...\n                      </>\n                    ) : (\n                      <>\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        Upload All\n                      </>\n                    )}\n                  </Button>\n                )}\n                <Button onClick={clearFiles} variant=\"outline\" size=\"sm\" disabled={uploading}>\n                  Clear All\n                </Button>\n              </div>\n            </div>\n\n            {/* Summary */}\n            <div className=\"grid grid-cols-4 gap-4 mb-4 text-center\">\n              <div className=\"p-2 bg-gray-50 rounded\">\n                <div className=\"text-lg font-bold\">{pendingFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Pending</div>\n              </div>\n              <div className=\"p-2 bg-blue-50 rounded\">\n                <div className=\"text-lg font-bold\">{uploadingFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Uploading</div>\n              </div>\n              <div className=\"p-2 bg-green-50 rounded\">\n                <div className=\"text-lg font-bold\">{completedFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Completed</div>\n              </div>\n              <div className=\"p-2 bg-red-50 rounded\">\n                <div className=\"text-lg font-bold\">{errorFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Errors</div>\n              </div>\n            </div>\n\n            {/* File Items */}\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {files.map((fileUpload) => (\n                <div\n                  key={fileUpload.id}\n                  className=\"flex items-center space-x-3 p-3 border rounded-lg\"\n                >\n                  {getFileIcon(fileUpload.file.name)}\n\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <p className=\"text-sm font-medium truncate\">{fileUpload.file.name}</p>\n                      {getStatusBadge(fileUpload.status)}\n                    </div>\n\n                    <div className=\"flex items-center justify-between mt-1\">\n                      <p className=\"text-xs text-gray-500\">\n                        {formatFileSize(fileUpload.file.size)}\n                      </p>\n\n                      {fileUpload.status === 'uploading' && (\n                        <span className=\"text-xs text-gray-500\">{fileUpload.progress}%</span>\n                      )}\n                    </div>\n\n                    {/* Progress Bar */}\n                    {fileUpload.status === 'uploading' && (\n                      <Progress value={fileUpload.progress} className=\"mt-1 h-1\" />\n                    )}\n\n                    {/* Error Message */}\n                    {fileUpload.status === 'error' && fileUpload.error && (\n                      <p className=\"text-xs text-red-600 mt-1\">{fileUpload.error}</p>\n                    )}\n                  </div>\n\n                  {/* Remove Button */}\n                  <Button\n                    onClick={() => removeFile(fileUpload.id)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    disabled={uploading && fileUpload.status === 'uploading'}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Upload Options */}\n      {showPreview && files.length > 0 && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-medium mb-4\">Upload Options</h3>\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={enableCompression}\n                  onChange={(_e) => {\n                    // This would need to be passed from parent component\n                    // or managed in state if compression is toggleable\n                  }}\n                  disabled={uploading}\n                />\n                <span className=\"text-sm\">Enable compression for large files</span>\n              </label>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      {children}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/DragDropUploader.tsx"},"span":[9398,9401],"sourceCode":"import {\n  AlertTriangle,\n  Archive,\n  Check,\n  FileSpreadsheet,\n  FileText,\n  Loader2,\n  Upload,\n  X,\n} from 'lucide-react';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { useLiveRegion } from '@/components/accessibility/LiveRegion';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { cn } from '@/lib/utils';\nimport type { BaseComponentProps } from '@/types/common-props';\n\ninterface FileUpload {\n  id: string;\n  file: File;\n  status: 'pending' | 'uploading' | 'completed' | 'error';\n  progress: number;\n  error?: string;\n  result?: any;\n}\n\ninterface DragDropUploaderProps extends BaseComponentProps {\n  onUploadComplete?: (results: any[]) => void;\n  onUploadError?: (error: string) => void;\n  acceptedTypes?: string[];\n  maxFileSize?: number; // in bytes\n  maxFiles?: number;\n  enableCompression?: boolean;\n  showPreview?: boolean;\n}\n\nexport default function DragDropUploader({\n  onUploadComplete,\n  onUploadError,\n  acceptedTypes = ['.xlsx', '.xls', '.csv', '.json', '.txt'],\n  maxFileSize = 100 * 1024 * 1024, // 100MB\n  maxFiles = 10,\n  enableCompression = false,\n  showPreview = true,\n  className,\n  id,\n  children,\n}: DragDropUploaderProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { announce } = useLiveRegion();\n  const prevErrorRef = useRef<string | null>(null);\n\n  // Generate unique ID for files\n  const generateId = () => Math.random().toString(36).substr(2, 9);\n\n  // Announce error changes to screen readers\n  React.useEffect(() => {\n    if (error && error !== prevErrorRef.current) {\n      const errorCount = error.split('\\n').length;\n      announce(`File upload errors: ${errorCount} validation issues found`, 'assertive');\n      prevErrorRef.current = error;\n    } else if (!error && prevErrorRef.current) {\n      prevErrorRef.current = null;\n    }\n  }, [error, announce]);\n\n  // Validate file\n  const validateFile = useCallback(\n    (file: File): string | null => {\n      // Check file size\n      if (file.size > maxFileSize) {\n        return `File size exceeds maximum allowed size (${Math.round(maxFileSize / (1024 * 1024))}MB)`;\n      }\n\n      // Check file type\n      const fileExtension = `.${file.name.split('.').pop()?.toLowerCase()}`;\n      if (!acceptedTypes.includes(fileExtension)) {\n        return `File type not supported. Allowed types: ${acceptedTypes.join(', ')}`;\n      }\n\n      // Check for suspicious file names\n      const suspiciousPatterns = [\n        /\\.(exe|bat|cmd|scr|pif|vbs|js)$/i,\n        /^\\./, // Hidden files\n        /[<>:\"|?*]/, // Invalid characters\n      ];\n\n      for (const pattern of suspiciousPatterns) {\n        if (pattern.test(file.name)) {\n          return 'File name contains invalid or suspicious characters';\n        }\n      }\n\n      return null;\n    },\n    [acceptedTypes, maxFileSize]\n  );\n\n  // Handle file selection\n  const handleFiles = useCallback(\n    (fileList: FileList | File[]) => {\n      const newFiles: FileUpload[] = [];\n      const errors: string[] = [];\n\n      // Convert FileList to Array\n      const filesArray = Array.from(fileList);\n\n      // Check max files limit\n      if (files.length + filesArray.length > maxFiles) {\n        setError(`Maximum ${maxFiles} files allowed. Please remove some files before adding more.`);\n        return;\n      }\n\n      filesArray.forEach((file) => {\n        const validationError = validateFile(file);\n\n        if (validationError) {\n          errors.push(`${file.name}: ${validationError}`);\n        } else {\n          // Check for duplicates\n          const isDuplicate = files.some(\n            (f) => f.file.name === file.name && f.file.size === file.size\n          );\n          if (!isDuplicate) {\n            newFiles.push({\n              id: generateId(),\n              file,\n              status: 'pending',\n              progress: 0,\n            });\n          } else {\n            errors.push(`${file.name}: Duplicate file`);\n          }\n        }\n      });\n\n      if (errors.length > 0) {\n        const errorMessage = errors.join('\\n');\n        setError(errorMessage);\n        // Announce file validation errors\n        announce(`File validation errors: ${errors.length} files have issues`, 'assertive');\n      } else {\n        setError(null);\n      }\n\n      if (newFiles.length > 0) {\n        setFiles((prev) => [...prev, ...newFiles]);\n      }\n    },\n    [\n      files,\n      maxFiles,\n      validateFile, // Announce file validation errors\n      announce,\n      generateId,\n    ]\n  );\n\n  // Drag and drop handlers\n  const handleDragEnter = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsDragOver(false);\n\n      const droppedFiles = e.dataTransfer.files;\n      if (droppedFiles.length > 0) {\n        handleFiles(droppedFiles);\n      }\n    },\n    [handleFiles]\n  );\n\n  // File input change handler\n  const handleFileInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files) {\n        handleFiles(e.target.files);\n      }\n    },\n    [handleFiles]\n  );\n\n  // Remove file\n  const removeFile = useCallback((id: string) => {\n    setFiles((prev) => prev.filter((f) => f.id !== id));\n  }, []);\n\n  // Clear all files\n  const clearFiles = useCallback(() => {\n    setFiles([]);\n    setError(null);\n  }, []);\n\n  // Upload files\n  const uploadFiles = useCallback(async () => {\n    if (files.length === 0) return;\n\n    setUploading(true);\n    setError(null);\n\n    const uploadPromises = files\n      .filter((f) => f.status === 'pending')\n      .map(async (fileUpload) => {\n        try {\n          // Update status to uploading\n          setFiles((prev) =>\n            prev.map((f) =>\n              f.id === fileUpload.id ? { ...f, status: 'uploading', progress: 0 } : f\n            )\n          );\n\n          const formData = new FormData();\n          formData.append('file', fileUpload.file);\n\n          if (enableCompression) {\n            formData.append('compress', 'true');\n          }\n\n          // Create XMLHttpRequest for progress tracking\n          const xhr = new XMLHttpRequest();\n\n          return new Promise((resolve, reject) => {\n            xhr.upload.addEventListener('progress', (e) => {\n              if (e.lengthComputable) {\n                const progress = Math.round((e.loaded / e.total) * 100);\n                setFiles((prev) =>\n                  prev.map((f) => (f.id === fileUpload.id ? { ...f, progress } : f))\n                );\n              }\n            });\n\n            xhr.addEventListener('load', () => {\n              if (xhr.status === 200) {\n                try {\n                  const result = JSON.parse(xhr.responseText);\n                  setFiles((prev) =>\n                    prev.map((f) =>\n                      f.id === fileUpload.id\n                        ? { ...f, status: 'completed', progress: 100, result }\n                        : f\n                    )\n                  );\n                  resolve(result);\n                } catch (_e) {\n                  const error = 'Failed to parse response';\n                  setFiles((prev) =>\n                    prev.map((f) => (f.id === fileUpload.id ? { ...f, status: 'error', error } : f))\n                  );\n                  reject(new Error(error));\n                }\n              } else {\n                const error = `Upload failed with status ${xhr.status}`;\n                setFiles((prev) =>\n                  prev.map((f) => (f.id === fileUpload.id ? { ...f, status: 'error', error } : f))\n                );\n                reject(new Error(error));\n              }\n            });\n\n            xhr.addEventListener('error', () => {\n              const error = 'Network error during upload';\n              setFiles((prev) =>\n                prev.map((f) => (f.id === fileUpload.id ? { ...f, status: 'error', error } : f))\n              );\n              reject(new Error(error));\n            });\n\n            xhr.open('POST', '/api/s3/upload');\n            xhr.send(formData);\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n          setFiles((prev) =>\n            prev.map((f) =>\n              f.id === fileUpload.id ? { ...f, status: 'error', error: errorMessage } : f\n            )\n          );\n          throw error;\n        }\n      });\n\n    try {\n      const results = await Promise.allSettled(uploadPromises);\n      const successfulResults = results\n        .filter((r) => r.status === 'fulfilled')\n        .map((r) => (r as PromiseFulfilledResult<any>).value);\n\n      const failedUploads = results.filter((r) => r.status === 'rejected');\n\n      if (failedUploads.length > 0) {\n        const errorMessages = failedUploads.map((r) => (r as PromiseRejectedResult).reason.message);\n        setError(`Some uploads failed: ${errorMessages.join(', ')}`);\n\n        if (onUploadError) {\n          onUploadError(errorMessages.join(', '));\n        }\n      }\n\n      if (successfulResults.length > 0 && onUploadComplete) {\n        onUploadComplete(successfulResults);\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Upload failed';\n      setError(errorMessage);\n\n      if (onUploadError) {\n        onUploadError(errorMessage);\n      }\n    } finally {\n      setUploading(false);\n    }\n  }, [files, enableCompression, onUploadComplete, onUploadError]);\n\n  // Get file icon\n  const getFileIcon = useCallback((fileName: string) => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    switch (extension) {\n      case 'xlsx':\n      case 'xls':\n        return <FileSpreadsheet className=\"h-5 w-5 text-green-500\" />;\n      case 'csv':\n        return <FileSpreadsheet className=\"h-5 w-5 text-blue-500\" />;\n      case 'json':\n        return <FileText className=\"h-5 w-5 text-yellow-500\" />;\n      case 'txt':\n        return <FileText className=\"h-5 w-5 text-gray-500\" />;\n      case 'gz':\n      case 'zip':\n        return <Archive className=\"h-5 w-5 text-purple-500\" />;\n      default:\n        return <FileText className=\"h-5 w-5 text-gray-400\" />;\n    }\n  }, []);\n\n  // Format file size\n  const formatFileSize = useCallback((bytes: number) => {\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    if (bytes < 1024 * 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;\n  }, []);\n\n  // Get status badge\n  const getStatusBadge = useCallback((status: FileUpload['status']) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"secondary\">Pending</Badge>;\n      case 'uploading':\n        return (\n          <Badge variant=\"outline\">\n            <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n            Uploading\n          </Badge>\n        );\n      case 'completed':\n        return (\n          <Badge variant=\"outline\" className=\"text-green-600\">\n            <Check className=\"h-3 w-3 mr-1\" />\n            Complete\n          </Badge>\n        );\n      case 'error':\n        return (\n          <Badge variant=\"destructive\">\n            <AlertTriangle className=\"h-3 w-3 mr-1\" />\n            Error\n          </Badge>\n        );\n      default:\n        return null;\n    }\n  }, []);\n\n  const pendingFiles = files.filter((f) => f.status === 'pending');\n  const uploadingFiles = files.filter((f) => f.status === 'uploading');\n  const completedFiles = files.filter((f) => f.status === 'completed');\n  const errorFiles = files.filter((f) => f.status === 'error');\n\n  return (\n    <div id={id} className={cn('space-y-4', className)}>\n      {/* Drop Zone */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div\n            onDragEnter={handleDragEnter}\n            onDragLeave={handleDragLeave}\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n            className={`\n              border-2 border-dashed rounded-lg p-8 text-center transition-all\n              ${\n                isDragOver ? 'border-primary bg-primary/5' : 'border-gray-300 hover:border-gray-400'\n              }\n            `}\n          >\n            <Upload\n              className={`h-12 w-12 mx-auto mb-4 ${isDragOver ? 'text-primary' : 'text-gray-400'}`}\n            />\n            <h3 className=\"text-lg font-medium mb-2\">\n              {isDragOver ? 'Drop files here' : 'Drag and drop files here'}\n            </h3>\n            <p className=\"text-sm text-gray-500 mb-4\">or click to browse files</p>\n            <p className=\"text-xs text-gray-400 mb-4\">\n              Supported formats: {acceptedTypes.join(', ')} • Max size:{' '}\n              {Math.round(maxFileSize / (1024 * 1024))}MB • Max files: {maxFiles}\n            </p>\n\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              multiple\n              accept={acceptedTypes.join(',')}\n              onChange={handleFileInputChange}\n              className=\"hidden\"\n            />\n\n            <Button\n              onClick={() => fileInputRef.current?.click()}\n              variant=\"outline\"\n              disabled={uploading}\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Select Files\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert variant=\"destructive\" role=\"alert\" aria-live=\"polite\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription className=\"whitespace-pre-line\">{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* File List */}\n      {files.length > 0 && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-medium\">Files ({files.length})</h3>\n              <div className=\"flex space-x-2\">\n                {pendingFiles.length > 0 && (\n                  <Button onClick={uploadFiles} disabled={uploading} size=\"sm\">\n                    {uploading ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Uploading...\n                      </>\n                    ) : (\n                      <>\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        Upload All\n                      </>\n                    )}\n                  </Button>\n                )}\n                <Button onClick={clearFiles} variant=\"outline\" size=\"sm\" disabled={uploading}>\n                  Clear All\n                </Button>\n              </div>\n            </div>\n\n            {/* Summary */}\n            <div className=\"grid grid-cols-4 gap-4 mb-4 text-center\">\n              <div className=\"p-2 bg-gray-50 rounded\">\n                <div className=\"text-lg font-bold\">{pendingFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Pending</div>\n              </div>\n              <div className=\"p-2 bg-blue-50 rounded\">\n                <div className=\"text-lg font-bold\">{uploadingFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Uploading</div>\n              </div>\n              <div className=\"p-2 bg-green-50 rounded\">\n                <div className=\"text-lg font-bold\">{completedFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Completed</div>\n              </div>\n              <div className=\"p-2 bg-red-50 rounded\">\n                <div className=\"text-lg font-bold\">{errorFiles.length}</div>\n                <div className=\"text-xs text-gray-500\">Errors</div>\n              </div>\n            </div>\n\n            {/* File Items */}\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {files.map((fileUpload) => (\n                <div\n                  key={fileUpload.id}\n                  className=\"flex items-center space-x-3 p-3 border rounded-lg\"\n                >\n                  {getFileIcon(fileUpload.file.name)}\n\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <p className=\"text-sm font-medium truncate\">{fileUpload.file.name}</p>\n                      {getStatusBadge(fileUpload.status)}\n                    </div>\n\n                    <div className=\"flex items-center justify-between mt-1\">\n                      <p className=\"text-xs text-gray-500\">\n                        {formatFileSize(fileUpload.file.size)}\n                      </p>\n\n                      {fileUpload.status === 'uploading' && (\n                        <span className=\"text-xs text-gray-500\">{fileUpload.progress}%</span>\n                      )}\n                    </div>\n\n                    {/* Progress Bar */}\n                    {fileUpload.status === 'uploading' && (\n                      <Progress value={fileUpload.progress} className=\"mt-1 h-1\" />\n                    )}\n\n                    {/* Error Message */}\n                    {fileUpload.status === 'error' && fileUpload.error && (\n                      <p className=\"text-xs text-red-600 mt-1\">{fileUpload.error}</p>\n                    )}\n                  </div>\n\n                  {/* Remove Button */}\n                  <Button\n                    onClick={() => removeFile(fileUpload.id)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    disabled={uploading && fileUpload.status === 'uploading'}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Upload Options */}\n      {showPreview && files.length > 0 && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-medium mb-4\">Upload Options</h3>\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={enableCompression}\n                  onChange={(_e) => {\n                    // This would need to be passed from parent component\n                    // or managed in state if compression is toggleable\n                  }}\n                  disabled={uploading}\n                />\n                <span className=\"text-sm\">Enable compression for large files</span>\n              </label>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      {children}\n    </div>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FilePreview.tsx"},"span":[698,701],"sourceCode":"import {\n  AlertTriangle,\n  BarChart3,\n  Code,\n  Download,\n  Eye,\n  FileSpreadsheet,\n  FileText,\n  Loader2,\n  X,\n} from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\ninterface FilePreviewProps {\n  fileKey: string;\n  fileName: string;\n  fileSize: number;\n  contentType?: string;\n  onClose?: () => void;\n  onDownload?: () => void;\n}\n\ninterface PreviewData {\n  type: 'excel' | 'csv' | 'json' | 'text' | 'unsupported';\n  data?: any;\n  headers?: string[];\n  rows?: any[][];\n  preview?: string;\n  metadata?: {\n    sheets?: string[];\n    totalRows?: number;\n    totalColumns?: number;\n    estimatedSize?: string;\n  };\n}\n\nexport default function FilePreview({\n  fileKey,\n  fileName,\n  fileSize,\n  contentType,\n  onClose,\n  onDownload,\n}: FilePreviewProps) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [previewData, setPreviewData] = useState<PreviewData | null>(null);\n  const [activeTab, setActiveTab] = useState('preview');\n\n  const getFileType = (fileName: string, _contentType?: string): PreviewData['type'] => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n\n    switch (extension) {\n      case 'xlsx':\n      case 'xls':\n        return 'excel';\n      case 'csv':\n        return 'csv';\n      case 'json':\n        return 'json';\n      case 'txt':\n        return 'text';\n      default:\n        return 'unsupported';\n    }\n  };\n\n  const loadPreview = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const fileType = getFileType(fileName, contentType);\n\n      if (fileType === 'unsupported') {\n        setPreviewData({\n          type: 'unsupported',\n          preview: 'File type not supported for preview',\n        });\n        setLoading(false);\n        return;\n      }\n\n      // Get presigned URL for file access\n      const urlResponse = await fetch('/api/s3/presigned-url', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          key: fileKey,\n          operation: 'getObject',\n          expiresIn: 300, // 5 minutes\n        }),\n      });\n\n      if (!urlResponse.ok) {\n        throw new Error('Failed to get file access URL');\n      }\n\n      const { url } = await urlResponse.json();\n\n      // Fetch file content\n      const fileResponse = await fetch(url);\n      if (!fileResponse.ok) {\n        throw new Error('Failed to fetch file content');\n      }\n\n      const content = await fileResponse.text();\n\n      // Process based on file type\n      let preview: PreviewData;\n\n      switch (fileType) {\n        case 'csv':\n          preview = await processCSVPreview(content);\n          break;\n        case 'json':\n          preview = await processJSONPreview(content);\n          break;\n        case 'text':\n          preview = await processTextPreview(content);\n          break;\n        case 'excel':\n          // For Excel files, we'd need a different approach since they're binary\n          preview = {\n            type: 'excel',\n            preview:\n              'Excel file preview requires server-side processing. Use the download option to view the full file.',\n            metadata: {\n              estimatedSize: formatFileSize(fileSize),\n            },\n          };\n          break;\n        default:\n          preview = {\n            type: 'unsupported',\n            preview: 'File type not supported for preview',\n          };\n      }\n\n      setPreviewData(preview);\n    } catch (err) {\n      console.error('Error loading file preview:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load preview');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPreview();\n  }, []);\n\n  const processCSVPreview = async (content: string): Promise<PreviewData> => {\n    const lines = content.split('\\n').filter((line) => line.trim());\n    const headers = lines[0]?.split(',').map((h) => h.trim().replace(/\"/g, '')) || [];\n    const rows = lines\n      .slice(1, 11)\n      .map((line) => line.split(',').map((cell) => cell.trim().replace(/\"/g, '')));\n\n    return {\n      type: 'csv',\n      headers,\n      rows,\n      preview: lines.slice(0, 10).join('\\n'),\n      metadata: {\n        totalRows: lines.length - 1,\n        totalColumns: headers.length,\n        estimatedSize: formatFileSize(content.length),\n      },\n    };\n  };\n\n  const processJSONPreview = async (content: string): Promise<PreviewData> => {\n    try {\n      const data = JSON.parse(content);\n      const preview = JSON.stringify(data, null, 2);\n\n      // Truncate if too long\n      const truncatedPreview =\n        preview.length > 2000 ? `${preview.substring(0, 2000)}\\n... (truncated)` : preview;\n\n      return {\n        type: 'json',\n        data,\n        preview: truncatedPreview,\n        metadata: {\n          estimatedSize: formatFileSize(content.length),\n        },\n      };\n    } catch (_err) {\n      return {\n        type: 'json',\n        preview: 'Invalid JSON format',\n        metadata: {\n          estimatedSize: formatFileSize(content.length),\n        },\n      };\n    }\n  };\n\n  const processTextPreview = async (content: string): Promise<PreviewData> => {\n    const lines = content.split('\\n');\n    const preview = lines.slice(0, 50).join('\\n');\n    const truncatedPreview =\n      preview.length > 2000 ? `${preview.substring(0, 2000)}\\n... (truncated)` : preview;\n\n    return {\n      type: 'text',\n      preview: truncatedPreview,\n      metadata: {\n        totalRows: lines.length,\n        estimatedSize: formatFileSize(content.length),\n      },\n    };\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    if (bytes < 1024 * 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;\n  };\n\n  const getFileIcon = () => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    switch (extension) {\n      case 'xlsx':\n      case 'xls':\n        return <FileSpreadsheet className=\"h-5 w-5 text-green-500\" />;\n      case 'csv':\n        return <FileSpreadsheet className=\"h-5 w-5 text-blue-500\" />;\n      case 'json':\n        return <Code className=\"h-5 w-5 text-yellow-500\" />;\n      case 'txt':\n        return <FileText className=\"h-5 w-5 text-gray-500\" />;\n      default:\n        return <FileText className=\"h-5 w-5 text-gray-400\" />;\n    }\n  };\n\n  const getFileTypeBadge = () => {\n    if (!previewData) return null;\n\n    const badgeMap = {\n      excel: { color: 'bg-green-100 text-green-800', label: 'Excel' },\n      csv: { color: 'bg-blue-100 text-blue-800', label: 'CSV' },\n      json: { color: 'bg-yellow-100 text-yellow-800', label: 'JSON' },\n      text: { color: 'bg-gray-100 text-gray-800', label: 'Text' },\n      unsupported: { color: 'bg-red-100 text-red-800', label: 'Unsupported' },\n    };\n\n    const badge = badgeMap[previewData.type];\n    return (\n      <Badge variant=\"outline\" className={badge.color}>\n        {badge.label}\n      </Badge>\n    );\n  };\n\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {getFileIcon()}\n            <div>\n              <CardTitle className=\"text-lg\">{fileName}</CardTitle>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                {getFileTypeBadge()}\n                <span className=\"text-sm text-gray-500\">{formatFileSize(fileSize)}</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {onDownload && (\n              <Button onClick={onDownload} variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n            )}\n            {onClose && (\n              <Button onClick={onClose} variant=\"ghost\" size=\"sm\">\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        {loading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            <span className=\"ml-2\">Loading preview...</span>\n          </div>\n        ) : error ? (\n          <div className=\"flex items-center justify-center py-8 text-red-500\">\n            <AlertTriangle className=\"h-8 w-8 mr-2\" />\n            <span>{error}</span>\n          </div>\n        ) : previewData ? (\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList>\n              <TabsTrigger value=\"preview\">\n                <Eye className=\"h-4 w-4 mr-2\" />\n                Preview\n              </TabsTrigger>\n\n              {previewData.type === 'csv' && (\n                <TabsTrigger value=\"data\">\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  Data\n                </TabsTrigger>\n              )}\n\n              {previewData.metadata && (\n                <TabsTrigger value=\"metadata\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Info\n                </TabsTrigger>\n              )}\n            </TabsList>\n\n            <TabsContent value=\"preview\" className=\"mt-4\">\n              {previewData.type === 'unsupported' ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <FileText className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                  <p>{previewData.preview}</p>\n                </div>\n              ) : (\n                <div className=\"border rounded-lg p-4 bg-gray-50\">\n                  <pre className=\"text-sm overflow-auto max-h-96 whitespace-pre-wrap\">\n                    {previewData.preview}\n                  </pre>\n                </div>\n              )}\n            </TabsContent>\n\n            {previewData.type === 'csv' && previewData.headers && previewData.rows && (\n              <TabsContent value=\"data\" className=\"mt-4\">\n                <div className=\"border rounded-lg overflow-auto max-h-96\">\n                  <table className=\"w-full text-sm\">\n                    <thead className=\"bg-gray-50 sticky top-0\">\n                      <tr>\n                        {previewData.headers.map((header, index) => (\n                          <th\n                            key={index}\n                            className=\"px-3 py-2 text-left font-medium text-gray-700 border-b\"\n                          >\n                            {header}\n                          </th>\n                        ))}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {previewData.rows.map((row, rowIndex) => (\n                        <tr key={rowIndex} className=\"hover:bg-gray-50\">\n                          {row.map((cell, cellIndex) => (\n                            <td key={cellIndex} className=\"px-3 py-2 border-b text-gray-600\">\n                              {cell}\n                            </td>\n                          ))}\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                  {previewData.metadata?.totalRows && previewData.metadata.totalRows > 10 && (\n                    <div className=\"p-3 text-center text-sm text-gray-500 bg-gray-50 border-t\">\n                      Showing first 10 rows of {previewData.metadata.totalRows} total rows\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n            )}\n\n            {previewData.metadata && (\n              <TabsContent value=\"metadata\" className=\"mt-4\">\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium\">File Information</h4>\n                    <div className=\"bg-gray-50 p-3 rounded border space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">File Name:</span>\n                        <span className=\"text-sm font-medium\">{fileName}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">File Size:</span>\n                        <span className=\"text-sm font-medium\">{formatFileSize(fileSize)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">Type:</span>\n                        <span className=\"text-sm font-medium capitalize\">{previewData.type}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium\">Content Information</h4>\n                    <div className=\"bg-gray-50 p-3 rounded border space-y-1\">\n                      {previewData.metadata.totalRows && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Total Rows:</span>\n                          <span className=\"text-sm font-medium\">\n                            {previewData.metadata.totalRows.toLocaleString()}\n                          </span>\n                        </div>\n                      )}\n                      {previewData.metadata.totalColumns && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Total Columns:</span>\n                          <span className=\"text-sm font-medium\">\n                            {previewData.metadata.totalColumns}\n                          </span>\n                        </div>\n                      )}\n                      {previewData.metadata.sheets && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Sheets:</span>\n                          <span className=\"text-sm font-medium\">\n                            {previewData.metadata.sheets.join(', ')}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            )}\n          </Tabs>\n        ) : null}\n      </CardContent>\n    </Card>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FilePreview.tsx"},"span":[734,737],"sourceCode":"import {\n  AlertTriangle,\n  BarChart3,\n  Code,\n  Download,\n  Eye,\n  FileSpreadsheet,\n  FileText,\n  Loader2,\n  X,\n} from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\ninterface FilePreviewProps {\n  fileKey: string;\n  fileName: string;\n  fileSize: number;\n  contentType?: string;\n  onClose?: () => void;\n  onDownload?: () => void;\n}\n\ninterface PreviewData {\n  type: 'excel' | 'csv' | 'json' | 'text' | 'unsupported';\n  data?: any;\n  headers?: string[];\n  rows?: any[][];\n  preview?: string;\n  metadata?: {\n    sheets?: string[];\n    totalRows?: number;\n    totalColumns?: number;\n    estimatedSize?: string;\n  };\n}\n\nexport default function FilePreview({\n  fileKey,\n  fileName,\n  fileSize,\n  contentType,\n  onClose,\n  onDownload,\n}: FilePreviewProps) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [previewData, setPreviewData] = useState<PreviewData | null>(null);\n  const [activeTab, setActiveTab] = useState('preview');\n\n  const getFileType = (fileName: string, _contentType?: string): PreviewData['type'] => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n\n    switch (extension) {\n      case 'xlsx':\n      case 'xls':\n        return 'excel';\n      case 'csv':\n        return 'csv';\n      case 'json':\n        return 'json';\n      case 'txt':\n        return 'text';\n      default:\n        return 'unsupported';\n    }\n  };\n\n  const loadPreview = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const fileType = getFileType(fileName, contentType);\n\n      if (fileType === 'unsupported') {\n        setPreviewData({\n          type: 'unsupported',\n          preview: 'File type not supported for preview',\n        });\n        setLoading(false);\n        return;\n      }\n\n      // Get presigned URL for file access\n      const urlResponse = await fetch('/api/s3/presigned-url', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          key: fileKey,\n          operation: 'getObject',\n          expiresIn: 300, // 5 minutes\n        }),\n      });\n\n      if (!urlResponse.ok) {\n        throw new Error('Failed to get file access URL');\n      }\n\n      const { url } = await urlResponse.json();\n\n      // Fetch file content\n      const fileResponse = await fetch(url);\n      if (!fileResponse.ok) {\n        throw new Error('Failed to fetch file content');\n      }\n\n      const content = await fileResponse.text();\n\n      // Process based on file type\n      let preview: PreviewData;\n\n      switch (fileType) {\n        case 'csv':\n          preview = await processCSVPreview(content);\n          break;\n        case 'json':\n          preview = await processJSONPreview(content);\n          break;\n        case 'text':\n          preview = await processTextPreview(content);\n          break;\n        case 'excel':\n          // For Excel files, we'd need a different approach since they're binary\n          preview = {\n            type: 'excel',\n            preview:\n              'Excel file preview requires server-side processing. Use the download option to view the full file.',\n            metadata: {\n              estimatedSize: formatFileSize(fileSize),\n            },\n          };\n          break;\n        default:\n          preview = {\n            type: 'unsupported',\n            preview: 'File type not supported for preview',\n          };\n      }\n\n      setPreviewData(preview);\n    } catch (err) {\n      console.error('Error loading file preview:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load preview');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPreview();\n  }, []);\n\n  const processCSVPreview = async (content: string): Promise<PreviewData> => {\n    const lines = content.split('\\n').filter((line) => line.trim());\n    const headers = lines[0]?.split(',').map((h) => h.trim().replace(/\"/g, '')) || [];\n    const rows = lines\n      .slice(1, 11)\n      .map((line) => line.split(',').map((cell) => cell.trim().replace(/\"/g, '')));\n\n    return {\n      type: 'csv',\n      headers,\n      rows,\n      preview: lines.slice(0, 10).join('\\n'),\n      metadata: {\n        totalRows: lines.length - 1,\n        totalColumns: headers.length,\n        estimatedSize: formatFileSize(content.length),\n      },\n    };\n  };\n\n  const processJSONPreview = async (content: string): Promise<PreviewData> => {\n    try {\n      const data = JSON.parse(content);\n      const preview = JSON.stringify(data, null, 2);\n\n      // Truncate if too long\n      const truncatedPreview =\n        preview.length > 2000 ? `${preview.substring(0, 2000)}\\n... (truncated)` : preview;\n\n      return {\n        type: 'json',\n        data,\n        preview: truncatedPreview,\n        metadata: {\n          estimatedSize: formatFileSize(content.length),\n        },\n      };\n    } catch (_err) {\n      return {\n        type: 'json',\n        preview: 'Invalid JSON format',\n        metadata: {\n          estimatedSize: formatFileSize(content.length),\n        },\n      };\n    }\n  };\n\n  const processTextPreview = async (content: string): Promise<PreviewData> => {\n    const lines = content.split('\\n');\n    const preview = lines.slice(0, 50).join('\\n');\n    const truncatedPreview =\n      preview.length > 2000 ? `${preview.substring(0, 2000)}\\n... (truncated)` : preview;\n\n    return {\n      type: 'text',\n      preview: truncatedPreview,\n      metadata: {\n        totalRows: lines.length,\n        estimatedSize: formatFileSize(content.length),\n      },\n    };\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    if (bytes < 1024 * 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;\n  };\n\n  const getFileIcon = () => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    switch (extension) {\n      case 'xlsx':\n      case 'xls':\n        return <FileSpreadsheet className=\"h-5 w-5 text-green-500\" />;\n      case 'csv':\n        return <FileSpreadsheet className=\"h-5 w-5 text-blue-500\" />;\n      case 'json':\n        return <Code className=\"h-5 w-5 text-yellow-500\" />;\n      case 'txt':\n        return <FileText className=\"h-5 w-5 text-gray-500\" />;\n      default:\n        return <FileText className=\"h-5 w-5 text-gray-400\" />;\n    }\n  };\n\n  const getFileTypeBadge = () => {\n    if (!previewData) return null;\n\n    const badgeMap = {\n      excel: { color: 'bg-green-100 text-green-800', label: 'Excel' },\n      csv: { color: 'bg-blue-100 text-blue-800', label: 'CSV' },\n      json: { color: 'bg-yellow-100 text-yellow-800', label: 'JSON' },\n      text: { color: 'bg-gray-100 text-gray-800', label: 'Text' },\n      unsupported: { color: 'bg-red-100 text-red-800', label: 'Unsupported' },\n    };\n\n    const badge = badgeMap[previewData.type];\n    return (\n      <Badge variant=\"outline\" className={badge.color}>\n        {badge.label}\n      </Badge>\n    );\n  };\n\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {getFileIcon()}\n            <div>\n              <CardTitle className=\"text-lg\">{fileName}</CardTitle>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                {getFileTypeBadge()}\n                <span className=\"text-sm text-gray-500\">{formatFileSize(fileSize)}</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {onDownload && (\n              <Button onClick={onDownload} variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n            )}\n            {onClose && (\n              <Button onClick={onClose} variant=\"ghost\" size=\"sm\">\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        {loading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            <span className=\"ml-2\">Loading preview...</span>\n          </div>\n        ) : error ? (\n          <div className=\"flex items-center justify-center py-8 text-red-500\">\n            <AlertTriangle className=\"h-8 w-8 mr-2\" />\n            <span>{error}</span>\n          </div>\n        ) : previewData ? (\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList>\n              <TabsTrigger value=\"preview\">\n                <Eye className=\"h-4 w-4 mr-2\" />\n                Preview\n              </TabsTrigger>\n\n              {previewData.type === 'csv' && (\n                <TabsTrigger value=\"data\">\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  Data\n                </TabsTrigger>\n              )}\n\n              {previewData.metadata && (\n                <TabsTrigger value=\"metadata\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Info\n                </TabsTrigger>\n              )}\n            </TabsList>\n\n            <TabsContent value=\"preview\" className=\"mt-4\">\n              {previewData.type === 'unsupported' ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <FileText className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                  <p>{previewData.preview}</p>\n                </div>\n              ) : (\n                <div className=\"border rounded-lg p-4 bg-gray-50\">\n                  <pre className=\"text-sm overflow-auto max-h-96 whitespace-pre-wrap\">\n                    {previewData.preview}\n                  </pre>\n                </div>\n              )}\n            </TabsContent>\n\n            {previewData.type === 'csv' && previewData.headers && previewData.rows && (\n              <TabsContent value=\"data\" className=\"mt-4\">\n                <div className=\"border rounded-lg overflow-auto max-h-96\">\n                  <table className=\"w-full text-sm\">\n                    <thead className=\"bg-gray-50 sticky top-0\">\n                      <tr>\n                        {previewData.headers.map((header, index) => (\n                          <th\n                            key={index}\n                            className=\"px-3 py-2 text-left font-medium text-gray-700 border-b\"\n                          >\n                            {header}\n                          </th>\n                        ))}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {previewData.rows.map((row, rowIndex) => (\n                        <tr key={rowIndex} className=\"hover:bg-gray-50\">\n                          {row.map((cell, cellIndex) => (\n                            <td key={cellIndex} className=\"px-3 py-2 border-b text-gray-600\">\n                              {cell}\n                            </td>\n                          ))}\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                  {previewData.metadata?.totalRows && previewData.metadata.totalRows > 10 && (\n                    <div className=\"p-3 text-center text-sm text-gray-500 bg-gray-50 border-t\">\n                      Showing first 10 rows of {previewData.metadata.totalRows} total rows\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n            )}\n\n            {previewData.metadata && (\n              <TabsContent value=\"metadata\" className=\"mt-4\">\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium\">File Information</h4>\n                    <div className=\"bg-gray-50 p-3 rounded border space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">File Name:</span>\n                        <span className=\"text-sm font-medium\">{fileName}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">File Size:</span>\n                        <span className=\"text-sm font-medium\">{formatFileSize(fileSize)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-gray-600\">Type:</span>\n                        <span className=\"text-sm font-medium capitalize\">{previewData.type}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium\">Content Information</h4>\n                    <div className=\"bg-gray-50 p-3 rounded border space-y-1\">\n                      {previewData.metadata.totalRows && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Total Rows:</span>\n                          <span className=\"text-sm font-medium\">\n                            {previewData.metadata.totalRows.toLocaleString()}\n                          </span>\n                        </div>\n                      )}\n                      {previewData.metadata.totalColumns && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Total Columns:</span>\n                          <span className=\"text-sm font-medium\">\n                            {previewData.metadata.totalColumns}\n                          </span>\n                        </div>\n                      )}\n                      {previewData.metadata.sheets && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm text-gray-600\">Sheets:</span>\n                          <span className=\"text-sm font-medium\">\n                            {previewData.metadata.sheets.join(', ')}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            )}\n          </Tabs>\n        ) : null}\n      </CardContent>\n    </Card>\n  );\n}\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[4613,4616],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const EnterpriseSSO: Story = {\n  args: {\n    ssoEnabled: true,\n    ssoProviders: [\n      { id: 'okta', name: 'Okta', logo: '/logos/okta.svg' },\n      { id: 'azure', name: 'Microsoft Azure AD', logo: '/logos/azure.svg' },\n      { id: 'gsuite', name: 'Google Workspace', logo: '/logos/gsuite.svg' },\n    ],\n    onSSOLogin: (providerId: string) => console.log('SSO login with:', providerId),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const CustomBranding: Story = {\n  args: {\n    branding: {\n      logo: '/ai-glossary-logo.svg',\n      title: 'AI Glossary Pro',\n      subtitle: 'Your comprehensive AI & ML terminology resource',\n      primaryColor: '#6366F1',\n      backgroundColor: '#F8FAFC',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    mobileOptimized: true,\n    socialProviders: ['google', 'apple'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n\nexport const WithTermsAndPrivacy: Story = {\n  args: {\n    showTermsAndPrivacy: true,\n    termsUrl: '/terms-of-service',\n    privacyUrl: '/privacy-policy',\n    onTermsClick: () => console.log('Terms clicked'),\n    onPrivacyClick: () => console.log('Privacy clicked'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const FreeTrial: Story = {\n  args: {\n    showFreeTrial: true,\n    trialLength: 14,\n    trialFeatures: [\n      'Full access to AI-powered search',\n      'Interactive content and examples',\n      'Progress tracking',\n      'No credit card required',\n    ],\n    onStartTrial: () => console.log('Start free trial'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MaintenanceMode: Story = {\n  args: {\n    maintenanceMode: true,\n    maintenanceMessage:\n      'Our authentication system is currently undergoing maintenance. Please try again in a few minutes.',\n    estimatedDuration: '15 minutes',\n    onMaintenanceUpdate: () => console.log('Check for updates'),\n  },\n};\n\nexport const RegionalCompliance: Story = {\n  args: {\n    gdprCompliant: true,\n    region: 'EU',\n    cookieConsent: true,\n    dataProcessingAgreement: true,\n    onGDPRConsent: (consent: boolean) => console.log('GDPR consent:', consent),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    socialProviders: ['google', 'github'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const AccessibilityOptimized: Story = {\n  args: {\n    accessibilityFeatures: {\n      highContrast: true,\n      largeText: true,\n      keyboardNavigation: true,\n      screenReaderOptimized: true,\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DeveloperMode: Story = {\n  args: {\n    developerMode: true,\n    testAccounts: [\n      { email: 'admin@test.com', password: 'admin123', role: 'admin' },\n      { email: 'user@test.com', password: 'user123', role: 'user' },\n      { email: 'premium@test.com', password: 'premium123', role: 'premium' },\n    ],\n    onQuickLogin: (account: any) => console.log('Quick login with:', account),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[2366,2369],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const EnterpriseSSO: Story = {\n  args: {\n    ssoEnabled: true,\n    ssoProviders: [\n      { id: 'okta', name: 'Okta', logo: '/logos/okta.svg' },\n      { id: 'azure', name: 'Microsoft Azure AD', logo: '/logos/azure.svg' },\n      { id: 'gsuite', name: 'Google Workspace', logo: '/logos/gsuite.svg' },\n    ],\n    onSSOLogin: (providerId: string) => console.log('SSO login with:', providerId),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const CustomBranding: Story = {\n  args: {\n    branding: {\n      logo: '/ai-glossary-logo.svg',\n      title: 'AI Glossary Pro',\n      subtitle: 'Your comprehensive AI & ML terminology resource',\n      primaryColor: '#6366F1',\n      backgroundColor: '#F8FAFC',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    mobileOptimized: true,\n    socialProviders: ['google', 'apple'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n\nexport const WithTermsAndPrivacy: Story = {\n  args: {\n    showTermsAndPrivacy: true,\n    termsUrl: '/terms-of-service',\n    privacyUrl: '/privacy-policy',\n    onTermsClick: () => console.log('Terms clicked'),\n    onPrivacyClick: () => console.log('Privacy clicked'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const FreeTrial: Story = {\n  args: {\n    showFreeTrial: true,\n    trialLength: 14,\n    trialFeatures: [\n      'Full access to AI-powered search',\n      'Interactive content and examples',\n      'Progress tracking',\n      'No credit card required',\n    ],\n    onStartTrial: () => console.log('Start free trial'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MaintenanceMode: Story = {\n  args: {\n    maintenanceMode: true,\n    maintenanceMessage:\n      'Our authentication system is currently undergoing maintenance. Please try again in a few minutes.',\n    estimatedDuration: '15 minutes',\n    onMaintenanceUpdate: () => console.log('Check for updates'),\n  },\n};\n\nexport const RegionalCompliance: Story = {\n  args: {\n    gdprCompliant: true,\n    region: 'EU',\n    cookieConsent: true,\n    dataProcessingAgreement: true,\n    onGDPRConsent: (consent: boolean) => console.log('GDPR consent:', consent),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    socialProviders: ['google', 'github'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const AccessibilityOptimized: Story = {\n  args: {\n    accessibilityFeatures: {\n      highContrast: true,\n      largeText: true,\n      keyboardNavigation: true,\n      screenReaderOptimized: true,\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DeveloperMode: Story = {\n  args: {\n    developerMode: true,\n    testAccounts: [\n      { email: 'admin@test.com', password: 'admin123', role: 'admin' },\n      { email: 'user@test.com', password: 'user123', role: 'user' },\n      { email: 'premium@test.com', password: 'premium123', role: 'premium' },\n    ],\n    onQuickLogin: (account: any) => console.log('Quick login with:', account),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[2440,2443],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const EnterpriseSSO: Story = {\n  args: {\n    ssoEnabled: true,\n    ssoProviders: [\n      { id: 'okta', name: 'Okta', logo: '/logos/okta.svg' },\n      { id: 'azure', name: 'Microsoft Azure AD', logo: '/logos/azure.svg' },\n      { id: 'gsuite', name: 'Google Workspace', logo: '/logos/gsuite.svg' },\n    ],\n    onSSOLogin: (providerId: string) => console.log('SSO login with:', providerId),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const CustomBranding: Story = {\n  args: {\n    branding: {\n      logo: '/ai-glossary-logo.svg',\n      title: 'AI Glossary Pro',\n      subtitle: 'Your comprehensive AI & ML terminology resource',\n      primaryColor: '#6366F1',\n      backgroundColor: '#F8FAFC',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    mobileOptimized: true,\n    socialProviders: ['google', 'apple'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n\nexport const WithTermsAndPrivacy: Story = {\n  args: {\n    showTermsAndPrivacy: true,\n    termsUrl: '/terms-of-service',\n    privacyUrl: '/privacy-policy',\n    onTermsClick: () => console.log('Terms clicked'),\n    onPrivacyClick: () => console.log('Privacy clicked'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const FreeTrial: Story = {\n  args: {\n    showFreeTrial: true,\n    trialLength: 14,\n    trialFeatures: [\n      'Full access to AI-powered search',\n      'Interactive content and examples',\n      'Progress tracking',\n      'No credit card required',\n    ],\n    onStartTrial: () => console.log('Start free trial'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MaintenanceMode: Story = {\n  args: {\n    maintenanceMode: true,\n    maintenanceMessage:\n      'Our authentication system is currently undergoing maintenance. Please try again in a few minutes.',\n    estimatedDuration: '15 minutes',\n    onMaintenanceUpdate: () => console.log('Check for updates'),\n  },\n};\n\nexport const RegionalCompliance: Story = {\n  args: {\n    gdprCompliant: true,\n    region: 'EU',\n    cookieConsent: true,\n    dataProcessingAgreement: true,\n    onGDPRConsent: (consent: boolean) => console.log('GDPR consent:', consent),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    socialProviders: ['google', 'github'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const AccessibilityOptimized: Story = {\n  args: {\n    accessibilityFeatures: {\n      highContrast: true,\n      largeText: true,\n      keyboardNavigation: true,\n      screenReaderOptimized: true,\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DeveloperMode: Story = {\n  args: {\n    developerMode: true,\n    testAccounts: [\n      { email: 'admin@test.com', password: 'admin123', role: 'admin' },\n      { email: 'user@test.com', password: 'user123', role: 'user' },\n      { email: 'premium@test.com', password: 'premium123', role: 'premium' },\n    ],\n    onQuickLogin: (account: any) => console.log('Quick login with:', account),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[2712,2715],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const EnterpriseSSO: Story = {\n  args: {\n    ssoEnabled: true,\n    ssoProviders: [\n      { id: 'okta', name: 'Okta', logo: '/logos/okta.svg' },\n      { id: 'azure', name: 'Microsoft Azure AD', logo: '/logos/azure.svg' },\n      { id: 'gsuite', name: 'Google Workspace', logo: '/logos/gsuite.svg' },\n    ],\n    onSSOLogin: (providerId: string) => console.log('SSO login with:', providerId),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const CustomBranding: Story = {\n  args: {\n    branding: {\n      logo: '/ai-glossary-logo.svg',\n      title: 'AI Glossary Pro',\n      subtitle: 'Your comprehensive AI & ML terminology resource',\n      primaryColor: '#6366F1',\n      backgroundColor: '#F8FAFC',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    mobileOptimized: true,\n    socialProviders: ['google', 'apple'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n\nexport const WithTermsAndPrivacy: Story = {\n  args: {\n    showTermsAndPrivacy: true,\n    termsUrl: '/terms-of-service',\n    privacyUrl: '/privacy-policy',\n    onTermsClick: () => console.log('Terms clicked'),\n    onPrivacyClick: () => console.log('Privacy clicked'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const FreeTrial: Story = {\n  args: {\n    showFreeTrial: true,\n    trialLength: 14,\n    trialFeatures: [\n      'Full access to AI-powered search',\n      'Interactive content and examples',\n      'Progress tracking',\n      'No credit card required',\n    ],\n    onStartTrial: () => console.log('Start free trial'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MaintenanceMode: Story = {\n  args: {\n    maintenanceMode: true,\n    maintenanceMessage:\n      'Our authentication system is currently undergoing maintenance. Please try again in a few minutes.',\n    estimatedDuration: '15 minutes',\n    onMaintenanceUpdate: () => console.log('Check for updates'),\n  },\n};\n\nexport const RegionalCompliance: Story = {\n  args: {\n    gdprCompliant: true,\n    region: 'EU',\n    cookieConsent: true,\n    dataProcessingAgreement: true,\n    onGDPRConsent: (consent: boolean) => console.log('GDPR consent:', consent),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    socialProviders: ['google', 'github'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const AccessibilityOptimized: Story = {\n  args: {\n    accessibilityFeatures: {\n      highContrast: true,\n      largeText: true,\n      keyboardNavigation: true,\n      screenReaderOptimized: true,\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DeveloperMode: Story = {\n  args: {\n    developerMode: true,\n    testAccounts: [\n      { email: 'admin@test.com', password: 'admin123', role: 'admin' },\n      { email: 'user@test.com', password: 'user123', role: 'user' },\n      { email: 'premium@test.com', password: 'premium123', role: 'premium' },\n    ],\n    onQuickLogin: (account: any) => console.log('Quick login with:', account),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[2786,2789],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const EnterpriseSSO: Story = {\n  args: {\n    ssoEnabled: true,\n    ssoProviders: [\n      { id: 'okta', name: 'Okta', logo: '/logos/okta.svg' },\n      { id: 'azure', name: 'Microsoft Azure AD', logo: '/logos/azure.svg' },\n      { id: 'gsuite', name: 'Google Workspace', logo: '/logos/gsuite.svg' },\n    ],\n    onSSOLogin: (providerId: string) => console.log('SSO login with:', providerId),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const CustomBranding: Story = {\n  args: {\n    branding: {\n      logo: '/ai-glossary-logo.svg',\n      title: 'AI Glossary Pro',\n      subtitle: 'Your comprehensive AI & ML terminology resource',\n      primaryColor: '#6366F1',\n      backgroundColor: '#F8FAFC',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    mobileOptimized: true,\n    socialProviders: ['google', 'apple'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n\nexport const WithTermsAndPrivacy: Story = {\n  args: {\n    showTermsAndPrivacy: true,\n    termsUrl: '/terms-of-service',\n    privacyUrl: '/privacy-policy',\n    onTermsClick: () => console.log('Terms clicked'),\n    onPrivacyClick: () => console.log('Privacy clicked'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const FreeTrial: Story = {\n  args: {\n    showFreeTrial: true,\n    trialLength: 14,\n    trialFeatures: [\n      'Full access to AI-powered search',\n      'Interactive content and examples',\n      'Progress tracking',\n      'No credit card required',\n    ],\n    onStartTrial: () => console.log('Start free trial'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MaintenanceMode: Story = {\n  args: {\n    maintenanceMode: true,\n    maintenanceMessage:\n      'Our authentication system is currently undergoing maintenance. Please try again in a few minutes.',\n    estimatedDuration: '15 minutes',\n    onMaintenanceUpdate: () => console.log('Check for updates'),\n  },\n};\n\nexport const RegionalCompliance: Story = {\n  args: {\n    gdprCompliant: true,\n    region: 'EU',\n    cookieConsent: true,\n    dataProcessingAgreement: true,\n    onGDPRConsent: (consent: boolean) => console.log('GDPR consent:', consent),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    socialProviders: ['google', 'github'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const AccessibilityOptimized: Story = {\n  args: {\n    accessibilityFeatures: {\n      highContrast: true,\n      largeText: true,\n      keyboardNavigation: true,\n      screenReaderOptimized: true,\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DeveloperMode: Story = {\n  args: {\n    developerMode: true,\n    testAccounts: [\n      { email: 'admin@test.com', password: 'admin123', role: 'admin' },\n      { email: 'user@test.com', password: 'user123', role: 'user' },\n      { email: 'premium@test.com', password: 'premium123', role: 'premium' },\n    ],\n    onQuickLogin: (account: any) => console.log('Quick login with:', account),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[2977,2980],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const EnterpriseSSO: Story = {\n  args: {\n    ssoEnabled: true,\n    ssoProviders: [\n      { id: 'okta', name: 'Okta', logo: '/logos/okta.svg' },\n      { id: 'azure', name: 'Microsoft Azure AD', logo: '/logos/azure.svg' },\n      { id: 'gsuite', name: 'Google Workspace', logo: '/logos/gsuite.svg' },\n    ],\n    onSSOLogin: (providerId: string) => console.log('SSO login with:', providerId),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const CustomBranding: Story = {\n  args: {\n    branding: {\n      logo: '/ai-glossary-logo.svg',\n      title: 'AI Glossary Pro',\n      subtitle: 'Your comprehensive AI & ML terminology resource',\n      primaryColor: '#6366F1',\n      backgroundColor: '#F8FAFC',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    mobileOptimized: true,\n    socialProviders: ['google', 'apple'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n\nexport const WithTermsAndPrivacy: Story = {\n  args: {\n    showTermsAndPrivacy: true,\n    termsUrl: '/terms-of-service',\n    privacyUrl: '/privacy-policy',\n    onTermsClick: () => console.log('Terms clicked'),\n    onPrivacyClick: () => console.log('Privacy clicked'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const FreeTrial: Story = {\n  args: {\n    showFreeTrial: true,\n    trialLength: 14,\n    trialFeatures: [\n      'Full access to AI-powered search',\n      'Interactive content and examples',\n      'Progress tracking',\n      'No credit card required',\n    ],\n    onStartTrial: () => console.log('Start free trial'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MaintenanceMode: Story = {\n  args: {\n    maintenanceMode: true,\n    maintenanceMessage:\n      'Our authentication system is currently undergoing maintenance. Please try again in a few minutes.',\n    estimatedDuration: '15 minutes',\n    onMaintenanceUpdate: () => console.log('Check for updates'),\n  },\n};\n\nexport const RegionalCompliance: Story = {\n  args: {\n    gdprCompliant: true,\n    region: 'EU',\n    cookieConsent: true,\n    dataProcessingAgreement: true,\n    onGDPRConsent: (consent: boolean) => console.log('GDPR consent:', consent),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    socialProviders: ['google', 'github'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const AccessibilityOptimized: Story = {\n  args: {\n    accessibilityFeatures: {\n      highContrast: true,\n      largeText: true,\n      keyboardNavigation: true,\n      screenReaderOptimized: true,\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DeveloperMode: Story = {\n  args: {\n    developerMode: true,\n    testAccounts: [\n      { email: 'admin@test.com', password: 'admin123', role: 'admin' },\n      { email: 'user@test.com', password: 'user123', role: 'user' },\n      { email: 'premium@test.com', password: 'premium123', role: 'premium' },\n    ],\n    onQuickLogin: (account: any) => console.log('Quick login with:', account),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[3051,3054],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const EnterpriseSSO: Story = {\n  args: {\n    ssoEnabled: true,\n    ssoProviders: [\n      { id: 'okta', name: 'Okta', logo: '/logos/okta.svg' },\n      { id: 'azure', name: 'Microsoft Azure AD', logo: '/logos/azure.svg' },\n      { id: 'gsuite', name: 'Google Workspace', logo: '/logos/gsuite.svg' },\n    ],\n    onSSOLogin: (providerId: string) => console.log('SSO login with:', providerId),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const CustomBranding: Story = {\n  args: {\n    branding: {\n      logo: '/ai-glossary-logo.svg',\n      title: 'AI Glossary Pro',\n      subtitle: 'Your comprehensive AI & ML terminology resource',\n      primaryColor: '#6366F1',\n      backgroundColor: '#F8FAFC',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    mobileOptimized: true,\n    socialProviders: ['google', 'apple'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n\nexport const WithTermsAndPrivacy: Story = {\n  args: {\n    showTermsAndPrivacy: true,\n    termsUrl: '/terms-of-service',\n    privacyUrl: '/privacy-policy',\n    onTermsClick: () => console.log('Terms clicked'),\n    onPrivacyClick: () => console.log('Privacy clicked'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const FreeTrial: Story = {\n  args: {\n    showFreeTrial: true,\n    trialLength: 14,\n    trialFeatures: [\n      'Full access to AI-powered search',\n      'Interactive content and examples',\n      'Progress tracking',\n      'No credit card required',\n    ],\n    onStartTrial: () => console.log('Start free trial'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MaintenanceMode: Story = {\n  args: {\n    maintenanceMode: true,\n    maintenanceMessage:\n      'Our authentication system is currently undergoing maintenance. Please try again in a few minutes.',\n    estimatedDuration: '15 minutes',\n    onMaintenanceUpdate: () => console.log('Check for updates'),\n  },\n};\n\nexport const RegionalCompliance: Story = {\n  args: {\n    gdprCompliant: true,\n    region: 'EU',\n    cookieConsent: true,\n    dataProcessingAgreement: true,\n    onGDPRConsent: (consent: boolean) => console.log('GDPR consent:', consent),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    socialProviders: ['google', 'github'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const AccessibilityOptimized: Story = {\n  args: {\n    accessibilityFeatures: {\n      highContrast: true,\n      largeText: true,\n      keyboardNavigation: true,\n      screenReaderOptimized: true,\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DeveloperMode: Story = {\n  args: {\n    developerMode: true,\n    testAccounts: [\n      { email: 'admin@test.com', password: 'admin123', role: 'admin' },\n      { email: 'user@test.com', password: 'user123', role: 'user' },\n      { email: 'premium@test.com', password: 'premium123', role: 'premium' },\n    ],\n    onQuickLogin: (account: any) => console.log('Quick login with:', account),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[3363,3366],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const EnterpriseSSO: Story = {\n  args: {\n    ssoEnabled: true,\n    ssoProviders: [\n      { id: 'okta', name: 'Okta', logo: '/logos/okta.svg' },\n      { id: 'azure', name: 'Microsoft Azure AD', logo: '/logos/azure.svg' },\n      { id: 'gsuite', name: 'Google Workspace', logo: '/logos/gsuite.svg' },\n    ],\n    onSSOLogin: (providerId: string) => console.log('SSO login with:', providerId),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const CustomBranding: Story = {\n  args: {\n    branding: {\n      logo: '/ai-glossary-logo.svg',\n      title: 'AI Glossary Pro',\n      subtitle: 'Your comprehensive AI & ML terminology resource',\n      primaryColor: '#6366F1',\n      backgroundColor: '#F8FAFC',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    mobileOptimized: true,\n    socialProviders: ['google', 'apple'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n\nexport const WithTermsAndPrivacy: Story = {\n  args: {\n    showTermsAndPrivacy: true,\n    termsUrl: '/terms-of-service',\n    privacyUrl: '/privacy-policy',\n    onTermsClick: () => console.log('Terms clicked'),\n    onPrivacyClick: () => console.log('Privacy clicked'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const FreeTrial: Story = {\n  args: {\n    showFreeTrial: true,\n    trialLength: 14,\n    trialFeatures: [\n      'Full access to AI-powered search',\n      'Interactive content and examples',\n      'Progress tracking',\n      'No credit card required',\n    ],\n    onStartTrial: () => console.log('Start free trial'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MaintenanceMode: Story = {\n  args: {\n    maintenanceMode: true,\n    maintenanceMessage:\n      'Our authentication system is currently undergoing maintenance. Please try again in a few minutes.',\n    estimatedDuration: '15 minutes',\n    onMaintenanceUpdate: () => console.log('Check for updates'),\n  },\n};\n\nexport const RegionalCompliance: Story = {\n  args: {\n    gdprCompliant: true,\n    region: 'EU',\n    cookieConsent: true,\n    dataProcessingAgreement: true,\n    onGDPRConsent: (consent: boolean) => console.log('GDPR consent:', consent),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    socialProviders: ['google', 'github'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const AccessibilityOptimized: Story = {\n  args: {\n    accessibilityFeatures: {\n      highContrast: true,\n      largeText: true,\n      keyboardNavigation: true,\n      screenReaderOptimized: true,\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DeveloperMode: Story = {\n  args: {\n    developerMode: true,\n    testAccounts: [\n      { email: 'admin@test.com', password: 'admin123', role: 'admin' },\n      { email: 'user@test.com', password: 'user123', role: 'user' },\n      { email: 'premium@test.com', password: 'premium123', role: 'premium' },\n    ],\n    onQuickLogin: (account: any) => console.log('Quick login with:', account),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[3437,3440],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const EnterpriseSSO: Story = {\n  args: {\n    ssoEnabled: true,\n    ssoProviders: [\n      { id: 'okta', name: 'Okta', logo: '/logos/okta.svg' },\n      { id: 'azure', name: 'Microsoft Azure AD', logo: '/logos/azure.svg' },\n      { id: 'gsuite', name: 'Google Workspace', logo: '/logos/gsuite.svg' },\n    ],\n    onSSOLogin: (providerId: string) => console.log('SSO login with:', providerId),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const CustomBranding: Story = {\n  args: {\n    branding: {\n      logo: '/ai-glossary-logo.svg',\n      title: 'AI Glossary Pro',\n      subtitle: 'Your comprehensive AI & ML terminology resource',\n      primaryColor: '#6366F1',\n      backgroundColor: '#F8FAFC',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    mobileOptimized: true,\n    socialProviders: ['google', 'apple'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n\nexport const WithTermsAndPrivacy: Story = {\n  args: {\n    showTermsAndPrivacy: true,\n    termsUrl: '/terms-of-service',\n    privacyUrl: '/privacy-policy',\n    onTermsClick: () => console.log('Terms clicked'),\n    onPrivacyClick: () => console.log('Privacy clicked'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const FreeTrial: Story = {\n  args: {\n    showFreeTrial: true,\n    trialLength: 14,\n    trialFeatures: [\n      'Full access to AI-powered search',\n      'Interactive content and examples',\n      'Progress tracking',\n      'No credit card required',\n    ],\n    onStartTrial: () => console.log('Start free trial'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MaintenanceMode: Story = {\n  args: {\n    maintenanceMode: true,\n    maintenanceMessage:\n      'Our authentication system is currently undergoing maintenance. Please try again in a few minutes.',\n    estimatedDuration: '15 minutes',\n    onMaintenanceUpdate: () => console.log('Check for updates'),\n  },\n};\n\nexport const RegionalCompliance: Story = {\n  args: {\n    gdprCompliant: true,\n    region: 'EU',\n    cookieConsent: true,\n    dataProcessingAgreement: true,\n    onGDPRConsent: (consent: boolean) => console.log('GDPR consent:', consent),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    socialProviders: ['google', 'github'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const AccessibilityOptimized: Story = {\n  args: {\n    accessibilityFeatures: {\n      highContrast: true,\n      largeText: true,\n      keyboardNavigation: true,\n      screenReaderOptimized: true,\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DeveloperMode: Story = {\n  args: {\n    developerMode: true,\n    testAccounts: [\n      { email: 'admin@test.com', password: 'admin123', role: 'admin' },\n      { email: 'user@test.com', password: 'user123', role: 'user' },\n      { email: 'premium@test.com', password: 'premium123', role: 'premium' },\n    ],\n    onQuickLogin: (account: any) => console.log('Quick login with:', account),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[3913,3916],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const EnterpriseSSO: Story = {\n  args: {\n    ssoEnabled: true,\n    ssoProviders: [\n      { id: 'okta', name: 'Okta', logo: '/logos/okta.svg' },\n      { id: 'azure', name: 'Microsoft Azure AD', logo: '/logos/azure.svg' },\n      { id: 'gsuite', name: 'Google Workspace', logo: '/logos/gsuite.svg' },\n    ],\n    onSSOLogin: (providerId: string) => console.log('SSO login with:', providerId),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const CustomBranding: Story = {\n  args: {\n    branding: {\n      logo: '/ai-glossary-logo.svg',\n      title: 'AI Glossary Pro',\n      subtitle: 'Your comprehensive AI & ML terminology resource',\n      primaryColor: '#6366F1',\n      backgroundColor: '#F8FAFC',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    mobileOptimized: true,\n    socialProviders: ['google', 'apple'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n\nexport const WithTermsAndPrivacy: Story = {\n  args: {\n    showTermsAndPrivacy: true,\n    termsUrl: '/terms-of-service',\n    privacyUrl: '/privacy-policy',\n    onTermsClick: () => console.log('Terms clicked'),\n    onPrivacyClick: () => console.log('Privacy clicked'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const FreeTrial: Story = {\n  args: {\n    showFreeTrial: true,\n    trialLength: 14,\n    trialFeatures: [\n      'Full access to AI-powered search',\n      'Interactive content and examples',\n      'Progress tracking',\n      'No credit card required',\n    ],\n    onStartTrial: () => console.log('Start free trial'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MaintenanceMode: Story = {\n  args: {\n    maintenanceMode: true,\n    maintenanceMessage:\n      'Our authentication system is currently undergoing maintenance. Please try again in a few minutes.',\n    estimatedDuration: '15 minutes',\n    onMaintenanceUpdate: () => console.log('Check for updates'),\n  },\n};\n\nexport const RegionalCompliance: Story = {\n  args: {\n    gdprCompliant: true,\n    region: 'EU',\n    cookieConsent: true,\n    dataProcessingAgreement: true,\n    onGDPRConsent: (consent: boolean) => console.log('GDPR consent:', consent),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    socialProviders: ['google', 'github'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const AccessibilityOptimized: Story = {\n  args: {\n    accessibilityFeatures: {\n      highContrast: true,\n      largeText: true,\n      keyboardNavigation: true,\n      screenReaderOptimized: true,\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DeveloperMode: Story = {\n  args: {\n    developerMode: true,\n    testAccounts: [\n      { email: 'admin@test.com', password: 'admin123', role: 'admin' },\n      { email: 'user@test.com', password: 'user123', role: 'user' },\n      { email: 'premium@test.com', password: 'premium123', role: 'premium' },\n    ],\n    onQuickLogin: (account: any) => console.log('Quick login with:', account),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[3987,3990],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const EnterpriseSSO: Story = {\n  args: {\n    ssoEnabled: true,\n    ssoProviders: [\n      { id: 'okta', name: 'Okta', logo: '/logos/okta.svg' },\n      { id: 'azure', name: 'Microsoft Azure AD', logo: '/logos/azure.svg' },\n      { id: 'gsuite', name: 'Google Workspace', logo: '/logos/gsuite.svg' },\n    ],\n    onSSOLogin: (providerId: string) => console.log('SSO login with:', providerId),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const CustomBranding: Story = {\n  args: {\n    branding: {\n      logo: '/ai-glossary-logo.svg',\n      title: 'AI Glossary Pro',\n      subtitle: 'Your comprehensive AI & ML terminology resource',\n      primaryColor: '#6366F1',\n      backgroundColor: '#F8FAFC',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MobileOptimized: Story = {\n  args: {\n    mobileOptimized: true,\n    socialProviders: ['google', 'apple'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1',\n    },\n  },\n};\n\nexport const WithTermsAndPrivacy: Story = {\n  args: {\n    showTermsAndPrivacy: true,\n    termsUrl: '/terms-of-service',\n    privacyUrl: '/privacy-policy',\n    onTermsClick: () => console.log('Terms clicked'),\n    onPrivacyClick: () => console.log('Privacy clicked'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const FreeTrial: Story = {\n  args: {\n    showFreeTrial: true,\n    trialLength: 14,\n    trialFeatures: [\n      'Full access to AI-powered search',\n      'Interactive content and examples',\n      'Progress tracking',\n      'No credit card required',\n    ],\n    onStartTrial: () => console.log('Start free trial'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const MaintenanceMode: Story = {\n  args: {\n    maintenanceMode: true,\n    maintenanceMessage:\n      'Our authentication system is currently undergoing maintenance. Please try again in a few minutes.',\n    estimatedDuration: '15 minutes',\n    onMaintenanceUpdate: () => console.log('Check for updates'),\n  },\n};\n\nexport const RegionalCompliance: Story = {\n  args: {\n    gdprCompliant: true,\n    region: 'EU',\n    cookieConsent: true,\n    dataProcessingAgreement: true,\n    onGDPRConsent: (consent: boolean) => console.log('GDPR consent:', consent),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DarkMode: Story = {\n  args: {\n    socialProviders: ['google', 'github'],\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n  parameters: {\n    themes: {\n      default: 'dark',\n    },\n  },\n};\n\nexport const AccessibilityOptimized: Story = {\n  args: {\n    accessibilityFeatures: {\n      highContrast: true,\n      largeText: true,\n      keyboardNavigation: true,\n      screenReaderOptimized: true,\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const DeveloperMode: Story = {\n  args: {\n    developerMode: true,\n    testAccounts: [\n      { email: 'admin@test.com', password: 'admin123', role: 'admin' },\n      { email: 'user@test.com', password: 'user123', role: 'user' },\n      { email: 'premium@test.com', password: 'premium123', role: 'premium' },\n    ],\n    onQuickLogin: (account: any) => console.log('Quick login with:', account),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n"},"tags":[],"source":null},{"category":"lint/suspicious/noExplicitAny","severity":"warning","description":"Unexpected any. Specify a different type.","message":[{"elements":[],"content":"Unexpected "},{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":". Specify a different type."}],"advices":{"advices":[{"log":["info",[{"elements":["Emphasis"],"content":"any"},{"elements":[],"content":" disables many type checking rules. Its use should be avoided."}]]}]},"verboseAdvices":{"advices":[]},"location":{"path":{"file":"client/src/components/FirebaseLoginPage.stories.tsx"},"span":[4414,4417],"sourceCode":"import type { Meta, StoryObj } from '@storybook/react';\nimport FirebaseLoginPage from './FirebaseLoginPage';\n\nconst meta: Meta<typeof FirebaseLoginPage> = {\n  title: 'Authentication/FirebaseLoginPage',\n  component: FirebaseLoginPage,\n  parameters: {\n    layout: 'fullscreen',\n    docs: {\n      description: {\n        component:\n          'Firebase-powered authentication page with email/password login, social providers, and registration flows.',\n      },\n    },\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    redirectTo: '/dashboard',\n  },\n};\n\nexport const WithRegistration: Story = {\n  args: {\n    initialMode: 'register',\n    onLoginSuccess: (user: any) => console.log('Registration successful:', user),\n    onLoginError: (error: any) => console.log('Registration error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n    redirectTo: '/onboarding',\n  },\n};\n\nexport const WithSocialProviders: Story = {\n  args: {\n    socialProviders: ['google', 'github', 'twitter'],\n    onSocialLogin: (provider: string) => console.log('Social login with:', provider),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const PasswordReset: Story = {\n  args: {\n    initialMode: 'reset-password',\n    onPasswordResetSent: (email: string) => console.log('Password reset sent to:', email),\n    onLoginError: (error: any) => console.log('Reset error:', error),\n    onModeChange: (mode: string) => console.log('Mode changed to:', mode),\n  },\n};\n\nexport const WithEmailVerification: Story = {\n  args: {\n    requireEmailVerification: true,\n    onEmailVerificationSent: (email: string) => console.log('Verification sent to:', email),\n    onEmailVerified: () => console.log('Email verified successfully'),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoadingState: Story = {\n  args: {\n    loading: true,\n    loadingMessage: 'Authenticating with Firebase...',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const WithValidationErrors: Story = {\n  args: {\n    initialErrors: {\n      email: 'Please enter a valid email address',\n      password: 'Password must be at least 6 characters',\n    },\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n  },\n};\n\nexport const LoginError: Story = {\n  args: {\n    initialError: 'Invalid email or password. Please try again.',\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.log('Login error:', error),\n    onRetry: () => console.log('Retry login'),\n  },\n};\n\nexport const WithMultiFactorAuth: Story = {\n  args: {\n    mfaEnabled: true,\n    initialMode: 'mfa-challenge',\n    onMFAVerify: (code: string) => console.log('MFA code entered:', code),\n    onLoginSuccess: (user: any) => console.log('Login successful:', user),\n    onLoginError: (error: any) => console.lo...[truncated]