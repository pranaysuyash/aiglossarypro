import { expect, test } from '@playwright/test';

test.describe('AI Features Integration', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
    await expect(page.locator('#main-content')).toBeVisible();
  });

  test.describe('AI Definition Generation', () => {
    test('should generate AI-powered definitions for new terms', async ({ page }) => {
      // Navigate to AI tools or admin section
      const aiToolsSelectors = [
        page.locator('[data-testid="ai-tools"]'),
        page.locator('text=AI Tools'),
        page.locator('[href*="/ai"]'),
        page.locator('[data-testid="admin-menu"]'),
      ];

      let aiToolsFound = false;
      for (const selector of aiToolsSelectors) {
        if ((await selector.count()) > 0) {
          await selector.click();
          aiToolsFound = true;
          break;
        }
      }

      if (!aiToolsFound) {
        // Try direct navigation
        await page.goto('/ai-tools');
        await page.waitForTimeout(1000);
      }

      // Look for AI definition generator
      const generatorElements = [
        page.locator('[data-testid="ai-definition-generator"]'),
        page.locator('text=Generate Definition'),
        page.locator('text=AI Definition'),
        page.locator('[data-testid="definition-generator"]'),
      ];

      let generatorFound = false;
      for (const element of generatorElements) {
        if ((await element.count()) > 0) {
          await element.click();
          generatorFound = true;
          break;
        }
      }

      if (generatorFound) {
        // Fill in term to generate definition for
        const termInput = page.locator(
          '[data-testid="term-input"], input[name="term"], input[placeholder*="term"]'
        );
        if ((await termInput.count()) > 0) {
          await termInput.fill('Quantum Machine Learning');

          // Click generate button
          const generateButton = page.locator(
            '[data-testid="generate-button"], button:has-text("Generate")'
          );
          if ((await generateButton.count()) > 0) {
            await generateButton.click();

            // Wait for AI generation (might take time)
            await page.waitForTimeout(5000);

            // Check for generated definition
            const generatedDefinition = page.locator(
              '[data-testid="generated-definition"], [data-testid="ai-definition"]'
            );
            if ((await generatedDefinition.count()) > 0) {
              const definitionText = await generatedDefinition.textContent();
              expect(definitionText?.length).toBeGreaterThan(50); // Should be substantial

              // Check for AI generation indicators
              const aiIndicators = page.locator(
                '[data-testid="ai-generated"], text=AI Generated, text=Generated by AI'
              );
              expect(await aiIndicators.count()).toBeGreaterThan(0);
            }
          }
        }
      }

      console.log(`AI Definition Generator found and tested: ${generatorFound}`);
    });

    test('should allow customization of AI generation parameters', async ({ page }) => {
      await page.goto('/ai-tools');
      await page.waitForTimeout(1000);

      const generatorForm = page.locator('[data-testid="ai-definition-generator"], form');
      if ((await generatorForm.count()) > 0) {
        // Fill term
        const termInput = generatorForm.locator('input[name="term"]');
        if ((await termInput.count()) > 0) {
          await termInput.fill('Attention Mechanism');
        }

        // Set complexity level
        const complexitySelect = generatorForm.locator(
          '[data-testid="complexity-select"], select[name="complexity"]'
        );
        if ((await complexitySelect.count()) > 0) {
          await complexitySelect.selectOption('advanced');
        }

        // Set target audience
        const audienceSelect = generatorForm.locator(
          '[data-testid="audience-select"], select[name="audience"]'
        );
        if ((await audienceSelect.count()) > 0) {
          await audienceSelect.selectOption('researchers');
        }

        // Enable code examples
        const includeCodeCheckbox = generatorForm.locator(
          '[data-testid="include-code"], input[name="includeCode"]'
        );
        if ((await includeCodeCheckbox.count()) > 0) {
          await includeCodeCheckbox.check();
        }

        // Generate with custom parameters
        const generateButton = generatorForm.locator(
          'button[type="submit"], button:has-text("Generate")'
        );
        if ((await generateButton.count()) > 0) {
          await generateButton.click();
          await page.waitForTimeout(6000);

          // Check that generated content reflects parameters
          const generatedContent = page.locator('[data-testid="generated-definition"]');
          if ((await generatedContent.count()) > 0) {
            const content = await generatedContent.textContent();

            // Should be more advanced/technical for advanced complexity
            const hasAdvancedTerms = /mathematical|algorithm|optimization|tensor|matrix/.test(
              content?.toLowerCase()
            );

            // Should include code if requested
            const hasCodeExample =
              content?.includes('```') ||
              content?.includes('code') ||
              content?.includes('function');

            console.log(`Advanced content detected: ${hasAdvancedTerms}`);
            console.log(`Code examples included: ${hasCodeExample}`);
          }
        }
      }
    });
  });

  test.describe('AI Definition Improvement', () => {
    test('should improve existing definitions using AI', async ({ page }) => {
      // Navigate to a term page first
      await page.goto('/term/8b5bff9a-afb7-4691-a58e-adc2bf94f941'); // Characteristic Function term
      await expect(page.locator('#main-content')).toBeVisible();

      // Look for improve definition feature
      const improveButtons = [
        page.locator('[data-testid="improve-definition"]'),
        page.locator('text=Improve Definition'),
        page.locator('text=AI Improve'),
        page.locator('[data-testid="ai-improve"]'),
      ];

      let improveFound = false;
      for (const button of improveButtons) {
        if ((await button.count()) > 0) {
          await button.click();
          improveFound = true;
          break;
        }
      }

      if (improveFound) {
        // Wait for AI improvement process
        await page.waitForTimeout(4000);

        // Check for improved definition
        const improvedDefinition = page.locator(
          '[data-testid="improved-definition"], [data-testid="ai-improvement"]'
        );
        if ((await improvedDefinition.count()) > 0) {
          // Should show comparison between original and improved
          const comparisonView = page.locator(
            '[data-testid="definition-comparison"], .before-after'
          );
          const hasComparison = (await comparisonView.count()) > 0;

          // Should show improvement metrics
          const improvementMetrics = page.locator(
            '[data-testid="improvement-metrics"], .improvement-score'
          );
          const hasMetrics = (await improvementMetrics.count()) > 0;

          console.log(`Definition comparison shown: ${hasComparison}`);
          console.log(`Improvement metrics shown: ${hasMetrics}`);

          // Test accepting the improvement
          const acceptButton = page.locator(
            '[data-testid="accept-improvement"], button:has-text("Accept")'
          );
          if ((await acceptButton.count()) > 0) {
            await acceptButton.click();
            await page.waitForTimeout(1000);

            // Should update the definition
            const updatedDefinition = page.locator('[data-testid="term-definition"]');
            const hasUpdated = (await updatedDefinition.count()) > 0;
            console.log(`Definition updated: ${hasUpdated}`);
          }
        }
      }

      console.log(`AI Definition Improvement found: ${improveFound}`);
    });

    test('should show improvement suggestions and explanations', async ({ page }) => {
      await page.goto('/term/8b5bff9a-afb7-4691-a58e-adc2bf94f941');
      await page.waitForTimeout(1000);

      const improveButton = page.locator('[data-testid="improve-definition"], text=Improve');
      if ((await improveButton.count()) > 0) {
        await improveButton.click();
        await page.waitForTimeout(5000);

        // Check for improvement explanations
        const improvementExplanations = [
          page.locator('[data-testid="improvement-reasons"]'),
          page.locator('[data-testid="ai-suggestions"]'),
          page.locator('.improvement-explanation'),
        ];

        let foundExplanations = false;
        for (const explanation of improvementExplanations) {
          if ((await explanation.count()) > 0) {
            foundExplanations = true;

            // Should list specific improvements
            const improvementItems = explanation.locator('[data-testid="improvement-item"], li');
            const itemCount = await improvementItems.count();
            expect(itemCount).toBeGreaterThan(0);

            // Each item should have improvement type and description
            if (itemCount > 0) {
              const firstItem = improvementItems.first();
              const itemText = await firstItem.textContent();
              expect(itemText?.length).toBeGreaterThan(10);
            }
            break;
          }
        }

        console.log(`Improvement explanations found: ${foundExplanations}`);
      }
    });
  });

  test.describe('AI Semantic Search', () => {
    test('should perform semantic search with natural language understanding', async ({ page }) => {
      const searchInput = page.locator('[data-testid="search-input"], input[type="text"]').first();

      // Enable AI/semantic search if there's a toggle
      const semanticToggle = page.locator(
        '[data-testid="semantic-search-toggle"], [data-testid="ai-search-toggle"]'
      );
      if ((await semanticToggle.count()) > 0) {
        await semanticToggle.click();
      }

      // Perform natural language search
      const naturalQueries = [
        'how do machines learn from data',
        'explain why neural networks work well for images',
        'what techniques prevent overfitting in deep learning',
        'algorithms that can understand human language',
      ];

      for (const query of naturalQueries) {
        await searchInput.fill(query);
        await searchInput.press('Enter');

        await page.waitForTimeout(4000); // Semantic search takes longer

        // Check for semantic search results
        const semanticResults = page.locator(
          '[data-testid="semantic-results"], [data-testid="ai-search-results"]'
        );
        if ((await semanticResults.count()) > 0) {
          // Should show relevance scores
          const relevanceScores = semanticResults.locator(
            '[data-testid="relevance-score"], .relevance'
          );
          const hasScores = (await relevanceScores.count()) > 0;

          // Should show why results are relevant
          const relevanceExplanations = semanticResults.locator(
            '[data-testid="relevance-explanation"]'
          );
          const hasExplanations = (await relevanceExplanations.count()) > 0;

          console.log(`Query: "${query}"`);
          console.log(`Relevance scores shown: ${hasScores}`);
          console.log(`Relevance explanations: ${hasExplanations}`);
        }

        // Check for AI-powered features in results
        const aiFeatures = [
          page.locator('[data-testid="ai-summary"]'),
          page.locator('[data-testid="concept-connections"]'),
          page.locator('[data-testid="related-concepts"]'),
        ];

        let foundAIFeatures = false;
        for (const feature of aiFeatures) {
          if ((await feature.count()) > 0) {
            foundAIFeatures = true;
            break;
          }
        }

        console.log(`AI features in results: ${foundAIFeatures}`);

        // Go back for next query
        await page.goto('/');
        await page.waitForTimeout(500);
      }
    });

    test('should provide intelligent search suggestions', async ({ page }) => {
      const searchInput = page.locator('[data-testid="search-input"], input[type="text"]').first();

      // Start typing to trigger suggestions
      await searchInput.fill('neural net');
      await page.waitForTimeout(1000);

      // Look for AI-powered suggestions
      const aiSuggestions = page.locator(
        '[data-testid="ai-suggestions"], [data-testid="smart-suggestions"]'
      );
      if ((await aiSuggestions.count()) > 0) {
        const suggestionItems = aiSuggestions.locator('[data-testid="suggestion-item"], li');
        const suggestionCount = await suggestionItems.count();

        if (suggestionCount > 0) {
          // Should show intelligent completion
          const suggestions = await suggestionItems.allTextContents();
          const hasIntelligentSuggestions = suggestions.some(
            s =>
              s.toLowerCase().includes('network') ||
              s.toLowerCase().includes('neural') ||
              s.toLowerCase().includes('deep learning')
          );

          expect(hasIntelligentSuggestions).toBe(true);

          // Test clicking on suggestion
          await suggestionItems.first().click();
          await page.waitForTimeout(2000);

          // Should navigate to relevant results
          const currentUrl = page.url();
          expect(currentUrl).toMatch(/search|terms|term/);
        }
      }
    });
  });

  test.describe('AI Term Suggestions', () => {
    test('should show personalized term recommendations', async ({ page }) => {
      // Navigate to a term page to get context
      await page.goto('/term/8b5bff9a-afb7-4691-a58e-adc2bf94f941');
      await page.waitForTimeout(2000);

      // Look for AI term suggestions
      const suggestionSections = [
        page.locator('[data-testid="ai-term-suggestions"]'),
        page.locator('[data-testid="recommended-terms"]'),
        page.locator('[data-testid="related-terms"]'),
        page.locator('.ai-recommendations'),
      ];

      let foundSuggestions = false;
      for (const section of suggestionSections) {
        if ((await section.count()) > 0) {
          foundSuggestions = true;

          // Should show multiple suggested terms
          const termSuggestions = section.locator('[data-testid="term-suggestion"], .term-card');
          const suggestionCount = await termSuggestions.count();
          expect(suggestionCount).toBeGreaterThan(0);

          if (suggestionCount > 0) {
            // Each suggestion should have relevance information
            const firstSuggestion = termSuggestions.first();

            // Should show why it's recommended
            const reasonElement = firstSuggestion.locator(
              '[data-testid="recommendation-reason"], .reason'
            );
            const hasReason = (await reasonElement.count()) > 0;

            // Should show relevance score
            const scoreElement = firstSuggestion.locator('[data-testid="relevance-score"], .score');
            const hasScore = (await scoreElement.count()) > 0;

            console.log(`Suggestion reason shown: ${hasReason}`);
            console.log(`Relevance score shown: ${hasScore}`);

            // Test clicking on suggestion
            await firstSuggestion.click();
            await page.waitForTimeout(1000);

            // Should navigate to suggested term
            await expect(page).toHaveURL(/.*\/term\/.+/);
          }
          break;
        }
      }

      console.log(`AI term suggestions found: ${foundSuggestions}`);
    });

    test('should adapt suggestions based on user behavior', async ({ page }) => {
      // Simulate user behavior by visiting multiple terms
      const termsToVisit = [
        '/term/8b5bff9a-afb7-4691-a58e-adc2bf94f941', // Characteristic Function
        '/category/79f3d163-dae1-499d-8371-047accbe70e9', // Machine Learning category
      ];

      for (const termUrl of termsToVisit) {
        await page.goto(termUrl);
        await page.waitForTimeout(2000);

        // Interact with content to signal interest
        const interactionElements = [
          page.locator('[data-testid="favorite-button"]'),
          page.locator('[data-testid="learned-button"]'),
          page.locator('[data-testid="bookmark-button"]'),
        ];

        for (const element of interactionElements) {
          if ((await element.count()) > 0) {
            await element.click();
            await page.waitForTimeout(500);
            break;
          }
        }
      }

      // Now check if suggestions are adapted
      await page.goto('/');
      await page.waitForTimeout(1000);

      // Look for personalized recommendations on homepage
      const personalizedSections = [
        page.locator('[data-testid="personalized-recommendations"]'),
        page.locator('[data-testid="for-you"]'),
        page.locator('[data-testid="based-on-activity"]'),
      ];

      let foundPersonalized = false;
      for (const section of personalizedSections) {
        if ((await section.count()) > 0) {
          foundPersonalized = true;

          const recommendations = section.locator('[data-testid="recommendation-item"]');
          const count = await recommendations.count();

          if (count > 0) {
            // Should be related to previously viewed content
            const recommendationTexts = await recommendations.allTextContents();
            const hasRelatedContent = recommendationTexts.some(
              text =>
                text.toLowerCase().includes('machine') ||
                text.toLowerCase().includes('learning') ||
                text.toLowerCase().includes('probability')
            );

            console.log(`Personalized recommendations found: ${hasRelatedContent}`);
          }
          break;
        }
      }

      console.log(`Personalized section found: ${foundPersonalized}`);
    });
  });

  test.describe('AI Content Feedback', () => {
    test('should allow users to provide feedback on AI-generated content', async ({ page }) => {
      // Navigate to term with AI-generated content
      await page.goto('/term/8b5bff9a-afb7-4691-a58e-adc2bf94f941');
      await page.waitForTimeout(1000);

      // Look for AI feedback controls
      const feedbackElements = [
        page.locator('[data-testid="ai-feedback"]'),
        page.locator('[data-testid="content-feedback"]'),
        page.locator('.ai-feedback-controls'),
      ];

      let foundFeedback = false;
      for (const element of feedbackElements) {
        if ((await element.count()) > 0) {
          foundFeedback = true;

          // Should have thumbs up/down or rating
          const ratingControls = [
            element.locator('[data-testid="thumbs-up"], [data-testid="like-button"]'),
            element.locator('[data-testid="thumbs-down"], [data-testid="dislike-button"]'),
            element.locator('[data-testid="rating-stars"]'),
          ];

          let foundRating = false;
          for (const control of ratingControls) {
            if ((await control.count()) > 0) {
              foundRating = true;
              await control.click();
              await page.waitForTimeout(500);

              // Should show feedback confirmation
              const confirmation = page.locator(
                '[data-testid="feedback-confirmation"], text=Thank you'
              );
              const hasConfirmation = (await confirmation.count()) > 0;
              console.log(`Feedback confirmation shown: ${hasConfirmation}`);
              break;
            }
          }

          console.log(`Rating controls found: ${foundRating}`);
          break;
        }
      }

      console.log(`AI feedback controls found: ${foundFeedback}`);
    });

    test('should provide detailed feedback options', async ({ page }) => {
      await page.goto('/term/8b5bff9a-afb7-4691-a58e-adc2bf94f941');
      await page.waitForTimeout(1000);

      // Look for detailed feedback option
      const detailedFeedbackButton = page.locator(
        '[data-testid="detailed-feedback"], text=Provide Feedback, text=Report Issue'
      );
      if ((await detailedFeedbackButton.count()) > 0) {
        await detailedFeedbackButton.click();

        // Should open feedback form
        const feedbackForm = page.locator('[data-testid="feedback-form"], form');
        if ((await feedbackForm.count()) > 0) {
          // Should have feedback categories
          const categorySelect = feedbackForm.locator(
            '[data-testid="feedback-category"], select[name="category"]'
          );
          if ((await categorySelect.count()) > 0) {
            await categorySelect.selectOption('accuracy');
          }

          // Should have text area for comments
          const commentArea = feedbackForm.locator('[data-testid="feedback-comment"], textarea');
          if ((await commentArea.count()) > 0) {
            await commentArea.fill('The definition could be more beginner-friendly');
          }

          // Submit feedback
          const submitButton = feedbackForm.locator(
            'button[type="submit"], button:has-text("Submit")'
          );
          if ((await submitButton.count()) > 0) {
            await submitButton.click();
            await page.waitForTimeout(1000);

            // Should show success message
            const successMessage = page.locator('[data-testid="feedback-success"], text=submitted');
            expect(await successMessage.count()).toBeGreaterThan(0);
          }
        }
      }
    });
  });

  test.describe('AI Performance and Error Handling', () => {
    test('should handle AI service timeouts gracefully', async ({ page }) => {
      // Mock slow AI response by intercepting network
      await page.route('**/api/ai/**', async route => {
        // Simulate timeout
        await new Promise(resolve => setTimeout(resolve, 10000));
        route.continue();
      });

      await page.goto('/ai-tools');

      const termInput = page.locator('[data-testid="term-input"], input[name="term"]');
      if ((await termInput.count()) > 0) {
        await termInput.fill('Test Term');

        const generateButton = page.locator(
          '[data-testid="generate-button"], button:has-text("Generate")'
        );
        if ((await generateButton.count()) > 0) {
          await generateButton.click();

          // Should show loading state
          const loadingIndicator = page.locator(
            '[data-testid="ai-loading"], .loading, text=Generating'
          );
          expect(await loadingIndicator.count()).toBeGreaterThan(0);

          // Wait for timeout
          await page.waitForTimeout(3000);

          // Should show timeout error
          const timeoutError = page.locator(
            '[data-testid="ai-timeout"], text=timeout, text=try again'
          );
          const hasTimeoutError = (await timeoutError.count()) > 0;

          console.log(`Timeout error handling: ${hasTimeoutError}`);
        }
      }
    });

    test('should show appropriate error messages for AI service failures', async ({ page }) => {
      // Mock AI service error
      await page.route('**/api/ai/**', async route => {
        route.fulfill({
          status: 503,
          contentType: 'application/json',
          body: JSON.stringify({ error: 'AI service unavailable' }),
        });
      });

      await page.goto('/ai-tools');

      const termInput = page.locator('[data-testid="term-input"], input[name="term"]');
      const generateButton = page.locator(
        '[data-testid="generate-button"], button:has-text("Generate")'
      );

      if ((await termInput.count()) > 0 && (await generateButton.count()) > 0) {
        await termInput.fill('Test Term');
        await generateButton.click();

        await page.waitForTimeout(2000);

        // Should show service error
        const serviceError = page.locator(
          '[data-testid="ai-error"], [data-testid="service-error"], text=unavailable'
        );
        expect(await serviceError.count()).toBeGreaterThan(0);

        // Should offer retry option
        const retryButton = page.locator('[data-testid="retry-button"], button:has-text("Retry")');
        const hasRetry = (await retryButton.count()) > 0;

        console.log(`Retry option available: ${hasRetry}`);
      }
    });
  });
});
